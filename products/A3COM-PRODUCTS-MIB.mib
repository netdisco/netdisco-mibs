A3COM-PRODUCTS-MIB DEFINITIONS ::= BEGIN
    IMPORTS
        enterprises FROM RFC1155-SMI;

--
-- This MIB contains 3com product OIDs (used in sysObjectID)
--

a3Com                   OBJECT IDENTIFIER ::= { enterprises 43 }
products                OBJECT IDENTIFIER ::= { a3Com 1 }
brouterMIB              OBJECT IDENTIFIER ::= { a3Com 2 }
amp-mib                 OBJECT IDENTIFIER ::= { a3Com 3 }
genericTrap             OBJECT IDENTIFIER ::= { a3Com 4 }
viewBuilderApps         OBJECT IDENTIFIER ::= { a3Com 5 }
specificTrap            OBJECT IDENTIFIER ::= { a3Com 6 }
linkBuilder3GH-mib      OBJECT IDENTIFIER ::= { a3Com 7 }
linkBuilder10BTi-mib    OBJECT IDENTIFIER ::= { a3Com 8 }
linkBuilderECS-mib      OBJECT IDENTIFIER ::= { a3Com 9 }
generic                 OBJECT IDENTIFIER ::= { a3Com 10 }
netBuilder-mib          OBJECT IDENTIFIER ::= { a3Com 11 }
lBridgeECS-mib          OBJECT IDENTIFIER ::= { a3Com 12 }
deskMan                 OBJECT IDENTIFIER ::= { a3Com 13 }
linkBuilderMSH-mib      OBJECT IDENTIFIER ::= { a3Com 14 }
a3ComUnused15           OBJECT IDENTIFIER ::= { a3Com 15 }
a3comFddiWGHubMib       OBJECT IDENTIFIER ::= { a3Com 16 }
linkSwitch-mib          OBJECT IDENTIFIER ::= { a3Com 17 }
linkSwitch1000-mib      OBJECT IDENTIFIER ::= { a3Com 18 }
linkBuilderFMS100-mib   OBJECT IDENTIFIER ::= { a3Com 19 }
ncdMibs                 OBJECT IDENTIFIER ::= { a3Com 20 }
officeConnect-Hub8M-mib OBJECT IDENTIFIER ::= { a3Com 21 }
linkSwitch2000TR-mib    OBJECT IDENTIFIER ::= { a3Com 22 }
vlanServer-mib          OBJECT IDENTIFIER ::= { a3Com 23 }
terminalServerMib       OBJECT IDENTIFIER ::= { a3Com 24 }
rpsIIMgmtModule-mib     OBJECT IDENTIFIER ::= { a3Com 25 }
transcendEnterpriseMgr	OBJECT IDENTIFIER ::= { a3Com 26 }

terminalServer          OBJECT IDENTIFIER ::= { products 1 }          
dedicatedBridgeServer   OBJECT IDENTIFIER ::= { products 2 }          
dedicatedRouteServer    OBJECT IDENTIFIER ::= { products 3 }          
brouter                 OBJECT IDENTIFIER ::= { products 4 }          
genericMSWorkstation    OBJECT IDENTIFIER ::= { products 5 }          
genericMSServer         OBJECT IDENTIFIER ::= { products 6 }          
genericUnixServer       OBJECT IDENTIFIER ::= { products 7 }          
hub                     OBJECT IDENTIFIER ::= { products 8 }  
cards                   OBJECT IDENTIFIER ::= { products 9 }       
chipSets                OBJECT IDENTIFIER ::= { products 10 }
oem                     OBJECT IDENTIFIER ::= { products 11 }
atm                     OBJECT IDENTIFIER ::= { products 12 }
powerSupplies           OBJECT IDENTIFIER ::= { products 13 }
tdm                     OBJECT IDENTIFIER ::= { products 14 }

--
-- the following identifiers are assigned to 3com terminal servers
--        

cs2500                  OBJECT IDENTIFIER ::= { terminalServer 1 }
cs2600                  OBJECT IDENTIFIER ::= { terminalServer 2 } 
cs2000                  OBJECT IDENTIFIER ::= { terminalServer 3 }
cs1                     OBJECT IDENTIFIER ::= { terminalServer 4 }
cs210                   OBJECT IDENTIFIER ::= { terminalServer 5 }
cs2100                  OBJECT IDENTIFIER ::= { terminalServer 6 }
cs3000                  OBJECT IDENTIFIER ::= { terminalServer 7 }  
cs3100                  OBJECT IDENTIFIER ::= { terminalServer 8 }          
callisto                OBJECT IDENTIFIER ::= { terminalServer 9 } 
termServerPlatform      OBJECT IDENTIFIER ::= { terminalServer 10 }

--
-- the following ids are assigned under a3Com.products.terminalServer.cs2500
--

cs2500to                OBJECT IDENTIFIER ::= { cs2500 1 }
cs2500tlo               OBJECT IDENTIFIER ::= { cs2500 2 }

--
-- the following ids are assigned under a3Com.products.terminalServer.cs2600
--

cs2600to                OBJECT IDENTIFIER ::= { cs2600 1 }
cs2600tlo               OBJECT IDENTIFIER ::= { cs2600 2 }

--
-- the following ids are assigned under a3Com.products.terminalServer.cs2000
--

cs2000to                OBJECT IDENTIFIER ::= { cs2000 1 }
cs2000tlo               OBJECT IDENTIFIER ::= { cs2000 2 }

--
-- the following ids are assigned under a3Com.products.terminalServer.cs2100
--

cs2100to                OBJECT IDENTIFIER ::= { cs2100 1 }
cs2100tlo               OBJECT IDENTIFIER ::= { cs2100 2 }

--
-- the following ids are assigned under a3Com.products.terminalServer.cs3000
--

cs3000to                OBJECT IDENTIFIER ::= { cs3000 1 }
cs3000tlo               OBJECT IDENTIFIER ::= { cs3000 2 }

--
-- the following ids are assigned under a3Com.products.terminalServer.cs3100
--

cs3100to                OBJECT IDENTIFIER ::= { cs3100 1 }
cs3100tlo               OBJECT IDENTIFIER ::= { cs3100 2 }

--
-- the following identifiers are assigned to 3com terminal server platforms
--

series1                 OBJECT IDENTIFIER ::= { termServerPlatform 1 }
series200               OBJECT IDENTIFIER ::= { termServerPlatform 2 }
callistoPlatfor         OBJECT IDENTIFIER ::= { termServerPlatform 3 }
series2500              OBJECT IDENTIFIER ::= { termServerPlatform 4 }
series3000              OBJECT IDENTIFIER ::= { termServerPlatform 5 }


--
-- the following identifiers are assigned to 3com brouters
--

netbuilder1        OBJECT IDENTIFIER ::= { brouter 1 }  -- not used
netbuilder2        OBJECT IDENTIFIER ::= { brouter 2 }  -- >= 6.2
lBridgeECS         OBJECT IDENTIFIER ::= { brouter 3 }
netbuilderTrRA     OBJECT IDENTIFIER ::= { brouter 4 }  -- 2 port nbtr NBTR Remote Access
brouterPlatform    OBJECT IDENTIFIER ::= { brouter 5 }
netbuilderRem      OBJECT IDENTIFIER ::= { brouter 6 }  -- 4 port nb1 NB Remote
netbuilderRA       OBJECT IDENTIFIER ::= { brouter 7 }  -- 2 port nb1 NB Remote Access
netbuilderRC       OBJECT IDENTIFIER ::= { brouter 8 }  -- 2 port boundary rtr NB Remote Control
netbuilderTrRem    OBJECT IDENTIFIER ::= { brouter 9 }  -- 4 port tok.ring nb1 NBTR Remote
netbuilderTrRC     OBJECT IDENTIFIER ::= { brouter 10 } -- tok.ring boundary rtr NBTR Remote Control
nb2-4              OBJECT IDENTIFIER ::= { brouter 11 } -- 4 port nb2
nb2-8              OBJECT IDENTIFIER ::= { brouter 12 } -- 8 port nb2
nbro               OBJECT IDENTIFIER ::= { brouter 13 } -- netbuilder Rem. Office (spectre)
brouterBoards      OBJECT IDENTIFIER ::= { brouter 14 }
netbuilderLocal    OBJECT IDENTIFIER ::= { brouter 15 } -- 2 Lan nb1 NB Local
netbuilderTrLocal  OBJECT IDENTIFIER ::= { brouter 16 } -- 2 Lan nbtr NBTR Local
netbuilderRC1x2    OBJECT IDENTIFIER ::= { brouter 17 } -- NB Rem Ctl w/2 wan ports
netbuilderTrRC1x2  OBJECT IDENTIFIER ::= { brouter 18 } -- NBTR Rem Ctl w/2 wan ports
casper             OBJECT IDENTIFIER ::= { brouter 19 } -- Spectre Large
spectreHuge        OBJECT IDENTIFIER ::= { brouter 20 } -- Spectre Huge
spectreIsdn        OBJECT IDENTIFIER ::= { brouter 21 } -- Spectre ISDN
nb2-8-4fddi        OBJECT IDENTIFIER ::= { brouter 22 } -- 8 port nb2 capable of 4 fddi sets
nb2-8-dualwide     OBJECT IDENTIFIER ::= { brouter 23 } -- 8 port nb2 w/dual wide slots 4 crew
brouterBrdFwVers   OBJECT IDENTIFIER ::= { brouter 24 } -- fw versions
brouterBrdSwVers   OBJECT IDENTIFIER ::= { brouter 25 } -- sw versions
spectreIsdnHuge    OBJECT IDENTIFIER ::= { brouter 26 } -- Spectre ISDN
nbroTrHuge         OBJECT IDENTIFIER ::= { brouter 27 } -- SpectreTR4x8
nbroTrIsdn         OBJECT IDENTIFIER ::= { brouter 28 } -- SpectreTrIsdn4x8
nbroTrNext         OBJECT IDENTIFIER ::= { brouter 29 } -- SpectreTrxxx
nbro2Eth           OBJECT IDENTIFIER ::= { brouter 30 } -- Spectre2Eth
nbro2EthIsdn       OBJECT IDENTIFIER ::= { brouter 31 } -- Spectre2EthIsdn
officeConnRtr      OBJECT IDENTIFIER ::= { brouter 32 } -- officeConnect


--
-- the following ids are assigned under a3Com.products.brouter.netbuilderTrRA
--
netbuilderTrRAbp   OBJECT IDENTIFIER ::= { netbuilderTrRA 1 }  -- NBTR Rem. Acc. w/Basic Prot. SW
netbuilderTrRAcp   OBJECT IDENTIFIER ::= { netbuilderTrRA 2 }  -- NBTR Rem. Acc. w/Compl. Prot. SW
netbuilderTrRAxw   OBJECT IDENTIFIER ::= { netbuilderTrRA 3 }  -- NBTR Rem. Acc w/Ext. WAN SW
netbuilderTrRAcx   OBJECT IDENTIFIER ::= { netbuilderTrRA 4 }  -- NBTR Rem. Acc. w/Con Svc SW
netbuilderTrRAba   OBJECT IDENTIFIER ::= { netbuilderTrRA 5 }  -- NBTR Rem. Acc. w/Bndry Rtg Clnt
netbuilderTrRAar   OBJECT IDENTIFIER ::= { netbuilderTrRA 6 }  -- NBTR Rem. Acc. w/Acc. Rtr SW
netbuilderTrRAsn   OBJECT IDENTIFIER ::= { netbuilderTrRA 7 }  -- NBTR Rem. Acc. w/SNA SW
netbuilderTrRArb   OBJECT IDENTIFIER ::= { netbuilderTrRA 8 }  -- NBTR RA w/RB SW
netbuilderTrRAff   OBJECT IDENTIFIER ::= { netbuilderTrRA 9 }  -- NBTR RA w/Full Feature SW
netbuidlerTrRAcf   OBJECT IDENTIFIER ::= { netbuilderTrRA 10 } -- NBTR RA w/CF SW
netbuilderTrRAbx   OBJECT IDENTIFIER ::= { netbuilderTrRA 11 } -- NBTR Rem Acc w/BX SW
netbuilderTrRAappn OBJECT IDENTIFIER ::= { netbuilderTrRA 12 } -- NBTR RAAcc w/Appn SW
netbuilderTrRAlm   OBJECT IDENTIFIER ::= { netbuilderTrRA 13 } -- NBTR RA w/Lm Sw
netbuilderTrRAlt   OBJECT IDENTIFIER ::= { netbuilderTrRA 14 } -- NBTR RA w/Lt Sw
netbuilderTrRAwm   OBJECT IDENTIFIER ::= { netbuilderTrRA 15 } -- NBTR RA w/Wm Sw
netbuilderTrRAwt   OBJECT IDENTIFIER ::= { netbuilderTrRA 16 } -- NBTR RA w/Wt Sw
netbuilderTrRAae   OBJECT IDENTIFIER ::= { netbuilderTrRA 17 } -- NBTR RA w/Ae Sw
netbuilderTrRAap   OBJECT IDENTIFIER ::= { netbuilderTrRA 18 } -- NBTR RA w/Ap Sw
netbuilderTrRAan   OBJECT IDENTIFIER ::= { netbuilderTrRA 19 } -- NBTR RA w/An Sw
netbuilderTrRAla   OBJECT IDENTIFIER ::= { netbuilderTrRA 20 } -- NBTR RA w/La Sw
netbuilderTrRAwa   OBJECT IDENTIFIER ::= { netbuilderTrRA 21 } -- NBTR RA w/Wa Sw
netbuilderTrRAaa   OBJECT IDENTIFIER ::= { netbuilderTrRA 22 } -- NBTR RA w/Aa Sw
netbuilderTrRAab   OBJECT IDENTIFIER ::= { netbuilderTrRA 23 } -- NBTR RA w/Ab Sw
netbuilderTrRAbf   OBJECT IDENTIFIER ::= { netbuilderTrRA 24 } -- NBTR RA w/Bf Sw


--
-- the following identifiers are assigned to brouterPlatform
--

nb1                OBJECT IDENTIFIER ::= { brouterPlatform 1 } -- nb1 platform
nb2                OBJECT IDENTIFIER ::= { brouterPlatform 2 } -- nb2 platform
nbroPlatform       OBJECT IDENTIFIER ::= { brouterPlatform 3 } -- netbuilder remote office platform
casperPlatform     OBJECT IDENTIFIER ::= { brouterPlatform 4 } -- Casper platform
spectreIsdnPform   OBJECT IDENTIFIER ::= { brouterPlatform 5 } -- spec.isdn pf
spectreIITr        OBJECT IDENTIFIER ::= { brouterPlatform 6 }--spec.IITr pf
nbroIITrIsdnPform  OBJECT IDENTIFIER ::= { brouterPlatform 7 }--sp.IITr Isdn pf
nbroIIEthPform     OBJECT IDENTIFIER ::= { brouterPlatform 8 }--spec.IITr pf
nbroIIEthIsdnPform OBJECT IDENTIFIER ::= { brouterPlatform 9 }--sp.IITr Isdn pf
ocGen   OBJECT IDENTIFIER ::= { brouterPlatform 10 }--generic Office Connect
ocIsdnSt OBJECT IDENTIFIER ::= { brouterPlatform 11 }--Office Conn w/ISDN s/t
ocIsdnU OBJECT IDENTIFIER ::= { brouterPlatform 12 }--Office Conn w/ISDN U
ocCsuDsu OBJECT IDENTIFIER ::= { brouterPlatform 13 }--Office Conn w/56K CSU/DSU
ocWanOnly OBJECT IDENTIFIER ::= { brouterPlatform 14 }--Office Conn w/WAN only
ocT1CsuDsu OBJECT IDENTIFIER ::= { brouterPlatform 15 }--Office Conn w/T1 CSU/DSU


--
-- the following id are assigned under a3Com.products.brouter.netbuilderRem
--

netbuilderRemBp   OBJECT IDENTIFIER ::= { netbuilderRem 1 }  -- nb Rem. w/Basic Prot
netbuilderRemCp   OBJECT IDENTIFIER ::= { netbuilderRem 2 }  -- nb Rem w/Compl Prot
netbuilderRemXw   OBJECT IDENTIFIER ::= { netbuilderRem 3 }  -- nb Rem w/Ext WAN
netbuilderRemCx   OBJECT IDENTIFIER ::= { netbuilderRem 4 }  -- nb Rem w/X25 Con Svc
netbuilderRemBa   OBJECT IDENTIFIER ::= { netbuilderRem 5 }  -- nb Rem w/Bndry Rtg
netbuilderRemAr   OBJECT IDENTIFIER ::= { netbuilderRem 6 }  -- nb Rem w/Acc Rtr SW
netbuilderRemSn   OBJECT IDENTIFIER ::= { netbuilderRem 7 }  -- nb Rem w/SNA SW
netbuilderRemRb   OBJECT IDENTIFIER ::= { netbuilderRem 8 }  -- nb Rem w/RB SW
netbuilderRemFf   OBJECT IDENTIFIER ::= { netbuilderRem 9 }  -- nb Remw/FF SW
netbuilderRemCf   OBJECT IDENTIFIER ::= { netbuilderRem 10 } -- nb Rem w/CF SW
netbuilderRemBx   OBJECT IDENTIFIER ::= { netbuilderRem 11 } -- nb Rem w/BX SW
netbuilderRemAppn OBJECT IDENTIFIER ::= { netbuilderRem 12 } -- nb Rem w/Appn SW
netbuilderRemLm   OBJECT IDENTIFIER ::= { netbuilderRem 13 } -- nb Rem w/Lm Sw
netbuilderRemLt   OBJECT IDENTIFIER ::= { netbuilderRem 14 } -- nb Rem w/Lt Sw
netbuilderRemWm   OBJECT IDENTIFIER ::= { netbuilderRem 15 } -- nb Rem w/Wm Sw
netbuilderRemWt   OBJECT IDENTIFIER ::= { netbuilderRem 16 } -- nb Rem w/Wt Sw
netbuilderRemAe   OBJECT IDENTIFIER ::= { netbuilderRem 17 } -- nb Rem w/Ae Sw
netbuilderRemAp   OBJECT IDENTIFIER ::= { netbuilderRem 18 } -- nb Rem w/Ap Sw
netbuilderRemAn   OBJECT IDENTIFIER ::= { netbuilderRem 19 } -- nb Rem w/An Sw
netbuilderRemLa   OBJECT IDENTIFIER ::= { netbuilderRem 20 } -- nb Rem w/La Sw
netbuilderRemWa   OBJECT IDENTIFIER ::= { netbuilderRem 21 } -- nb Rem w/Wa Sw
netbuilderRemAa   OBJECT IDENTIFIER ::= { netbuilderRem 22 } -- nb Rem w/Aa Sw
netbuilderRemAb   OBJECT IDENTIFIER ::= { netbuilderRem 23 } -- nb Rem w/Ab Sw
netbuilderRemBf   OBJECT IDENTIFIER ::= { netbuilderRem 24 } -- nb Rem w/Bf Sw

--
-- the following ids are assigned under a3Com.products.brouter.netbuilderRA
--

netbuilderRAbp   OBJECT IDENTIFIER ::= { netbuilderRA 1 }  -- nb RA w/Basic Prot
netbuilderRAcp   OBJECT IDENTIFIER ::= { netbuilderRA 2 }  -- nb RA w/Compl Prot
netbuilderRAxw   OBJECT IDENTIFIER ::= { netbuilderRA 3 }  -- nb RA w/Ext WAN
netbuilderRAcx   OBJECT IDENTIFIER ::= { netbuilderRA 4 }  -- nb RA w/Conn Svc
netbuilderRAba   OBJECT IDENTIFIER ::= { netbuilderRA 5 }  -- nb RA w/Bndry Rtg
netbuilderRAar   OBJECT IDENTIFIER ::= { netbuilderRA 6 }  -- nb RA w/AccRtr SW
netbuilderRAsn   OBJECT IDENTIFIER ::= { netbuilderRA 7 }  -- nb RA w/SNA SW
netbuilderRArb   OBJECT IDENTIFIER ::= { netbuilderRA 8 }  -- nb RA w/RB SW
netbuilderRAff   OBJECT IDENTIFIER ::= { netbuilderRA 9 }  -- nb RA/FF SW
netbuilderRAcf   OBJECT IDENTIFIER ::= { netbuilderRA 10 } -- nb RA w/CF SW
netbuilderRAbx   OBJECT IDENTIFIER ::= { netbuilderRA 11 } -- nb RA w/BX SW
netbuilderRAappn OBJECT IDENTIFIER ::= { netbuilderRA 12 } -- nb RA w/Appn SW
netbuilderRAlm   OBJECT IDENTIFIER ::= { netbuilderRA 13 } -- nb RA w/Lm Sw
netbuilderRAlt   OBJECT IDENTIFIER ::= { netbuilderRA 14 } -- nb RA w/Lt Sw
netbuilderRAwm   OBJECT IDENTIFIER ::= { netbuilderRA 15 } -- nb RA w/Wm Sw
netbuilderRAwt   OBJECT IDENTIFIER ::= { netbuilderRA 16 } -- nb RA w/Wt Sw
netbuilderRAae   OBJECT IDENTIFIER ::= { netbuilderRA 17 } -- nb RA w/Ae Sw
netbuilderRAap   OBJECT IDENTIFIER ::= { netbuilderRA 18 } -- nb RA w/Ap Sw
netbuilderRAan   OBJECT IDENTIFIER ::= { netbuilderRA 19 } -- nb RA w/An Sw
netbuilderRAla   OBJECT IDENTIFIER ::= { netbuilderRA 20 } -- nb RA w/La Sw
netbuilderRAwa   OBJECT IDENTIFIER ::= { netbuilderRA 21 } -- nb RA w/Wa Sw
netbuilderRAaa   OBJECT IDENTIFIER ::= { netbuilderRA 22 } -- nb RA w/Aa Sw
netbuilderRAab   OBJECT IDENTIFIER ::= { netbuilderRA 23 } -- nb RA w/Ab Sw
netbuilderRAbf   OBJECT IDENTIFIER ::= { netbuilderRA 24 } -- nb RA w/Bf Sw

--
-- the following ids are assigned under a3Com.products.brouter.netbuilderRC
--

netbuilderRCbp   OBJECT IDENTIFIER ::= { netbuilderRC 1 }  -- nb RC w/Basic Prot
netbuilderRCcp   OBJECT IDENTIFIER ::= { netbuilderRC 2 }  -- nb RC w/Compl Prot
netbuilderRCxw   OBJECT IDENTIFIER ::= { netbuilderRC 3 }  -- nb RC w/Ext WAN
netbuilderRCcx   OBJECT IDENTIFIER ::= { netbuilderRC 4 }  -- nb RC w/Conn Svc
netbuilderRCba   OBJECT IDENTIFIER ::= { netbuilderRC 5 }  -- nb RC w/Bndry Rtg
netbuilderRCar   OBJECT IDENTIFIER ::= { netbuilderRC 6 }  -- nb RC w/AccRtr SW
netbuilderRCsn   OBJECT IDENTIFIER ::= { netbuilderRC 7 }  -- nb RC w/SNA SW
netbuilderRCrb   OBJECT IDENTIFIER ::= { netbuilderRC 8 }  -- nb RC w/RB SW
netbuilderRCff   OBJECT IDENTIFIER ::= { netbuilderRC 9 }  -- nb RC w/FF SW
netbuilderRCcf   OBJECT IDENTIFIER ::= { netbuilderRC 10 } -- nb RC w/CF SW
netbuilderRCbx   OBJECT IDENTIFIER ::= { netbuilderRC 11 } -- nb RC w/BX SW
netbuilderRCappn OBJECT IDENTIFIER ::= { netbuilderRC 12 } -- nb RC w/Appn SW
netbuilderRClm   OBJECT IDENTIFIER ::= { netbuilderRC 13 } -- nb RC w/Lm Sw
netbuilderRClt   OBJECT IDENTIFIER ::= { netbuilderRC 14 } -- nb RC w/Lt Sw
netbuilderRCwm   OBJECT IDENTIFIER ::= { netbuilderRC 15 } -- nb RC w/Wm Sw
netbuilderRCwt   OBJECT IDENTIFIER ::= { netbuilderRC 16 } -- nb RC w/Wt Sw
netbuilderRCae   OBJECT IDENTIFIER ::= { netbuilderRC 17 } -- nb RC w/Ae Sw
netbuilderRCap   OBJECT IDENTIFIER ::= { netbuilderRC 18 } -- nb RC w/Ap Sw
netbuilderRCan   OBJECT IDENTIFIER ::= { netbuilderRC 19 } -- nb RC w/An Sw
netbuilderRCla   OBJECT IDENTIFIER ::= { netbuilderRC 20 } -- nb RC w/La Sw
netbuilderRCwa   OBJECT IDENTIFIER ::= { netbuilderRC 21 } -- nb RC w/Wa Sw
netbuilderRCaa   OBJECT IDENTIFIER ::= { netbuilderRC 22 } -- nb RC w/Aa Sw
netbuilderRCab   OBJECT IDENTIFIER ::= { netbuilderRC 23 } -- nb RC w/Ab Sw
netbuilderRCbf   OBJECT IDENTIFIER ::= { netbuilderRC 24 } -- nb RC w/Bf Sw

--
-- the following ids are assigned under a3Com.products.brouter.netbuilderTrRem
--

netbuilderTrRemBp   OBJECT IDENTIFIER ::= { netbuilderTrRem 1 }  -- nbtr Rem w/BP
netbuilderTrRemCp   OBJECT IDENTIFIER ::= { netbuilderTrRem 2 }  -- nbtr Rem w/CP
netbuilderTrRemXw   OBJECT IDENTIFIER ::= { netbuilderTrRem 3 }  -- nbtr Rem w/XW
netbuilderTrRemCx   OBJECT IDENTIFIER ::= { netbuilderTrRem 4 }  -- nbtr Rem w/CX
netbuilderTrRemBa   OBJECT IDENTIFIER ::= { netbuilderTrRem 5 }  -- nbtr Rem w/BA
netbuilderTrRemAr   OBJECT IDENTIFIER ::= { netbuilderTrRem 6 }  -- nbtr Rem w/AR
netbuilderTrRemSn   OBJECT IDENTIFIER ::= { netbuilderTrRem 7 }  -- nbtr Rem w/SNA
netbuilderTrRemRb   OBJECT IDENTIFIER ::= { netbuilderTrRem 8 }  -- nb TrRem w/RB
netbuilderTrRemFf   OBJECT IDENTIFIER ::= { netbuilderTrRem 9 }  -- nb TrRem w/FF
netbuilderTrRemCf   OBJECT IDENTIFIER ::= { netbuilderTrRem 10 } -- nb TrRem w/CF
netbuilderTrRemBx   OBJECT IDENTIFIER ::= { netbuilderTrRem 11 } -- nbtr Rem w/BX
netbuilderTrRemAppn OBJECT IDENTIFIER ::= { netbuilderTrRem 12 } -- nb TrRem w/Appn SW  
netbuilderTrRemLm   OBJECT IDENTIFIER ::= { netbuilderTrRem 13 } -- nb TrRem w/Lm  
netbuilderTrRemLt   OBJECT IDENTIFIER ::= { netbuilderTrRem 14 } -- nb TrRem w/Lt  
netbuilderTrRemWm   OBJECT IDENTIFIER ::= { netbuilderTrRem 15 } -- nb TrRem w/Wm
netbuilderTrRemWt   OBJECT IDENTIFIER ::= { netbuilderTrRem 16 } -- nb TrRem w/Wt
netbuilderTrRemAe   OBJECT IDENTIFIER ::= { netbuilderTrRem 17 } -- nb TrRem w/Ae
netbuilderTrRemAp   OBJECT IDENTIFIER ::= { netbuilderTrRem 18 } -- nb TrRem w/Ap
netbuilderTrRemAn   OBJECT IDENTIFIER ::= { netbuilderTrRem 19 } -- nb TrRem w/An
netbuilderTrRemLa   OBJECT IDENTIFIER ::= { netbuilderTrRem 20 } -- nb TrRem w/La
netbuilderTrRemWa   OBJECT IDENTIFIER ::= { netbuilderTrRem 21 } -- nb TrRem w/La
netbuilderTrRemAa   OBJECT IDENTIFIER ::= { netbuilderTrRem 22 } -- nb TrRem w/Aa
netbuilderTrRemAb   OBJECT IDENTIFIER ::= { netbuilderTrRem 23 } -- nb TrRem w/Ab
netbuilderTrRemBf   OBJECT IDENTIFIER ::= { netbuilderTrRem 24 } -- nb TrRem w/Bf


--
-- the following ids are assigned under a3Com.products.brouter.netbuilderTrRC
--

netbuilderTrRCbp   OBJECT IDENTIFIER ::= { netbuilderTrRC 1 }  -- NBTR RC w/Basic Prot
netbuilderTrRCcp   OBJECT IDENTIFIER ::= { netbuilderTrRC 2 }  -- NBTR Rc w/Compl Prot
netbuilderTrRCxw   OBJECT IDENTIFIER ::= { netbuilderTrRC 3 }  -- NBTR Rc w/Ext WAN
netbuilderTrRCcx   OBJECT IDENTIFIER ::= { netbuilderTrRC 4 }  -- NBTR RC w/CX
netbuilderTrRCba   OBJECT IDENTIFIER ::= { netbuilderTrRC 5 }  -- NBTR RC w/BA
netbuilderTrRCar   OBJECT IDENTIFIER ::= { netbuilderTrRC 6 }  -- NBTR RC w/AR
netbuilderTrRCsn   OBJECT IDENTIFIER ::= { netbuilderTrRC 7 }  -- NBTR RC w/SNA
netbuilderTrRCrb   OBJECT IDENTIFIER ::= { netbuilderTrRC 8 }  -- NBTR RC w/RB
netbuilderTrRCff   OBJECT IDENTIFIER ::= { netbuilderTrRC 9 }  -- NBTR RC w/FF
netbuilderTrRCcf   OBJECT IDENTIFIER ::= { netbuilderTrRC 10 } -- NBTR RC w/CF
netbuilderTrRCbx   OBJECT IDENTIFIER ::= { netbuilderTrRC 11 } -- NBTR RC w/BX
netbuilderTrRCappn OBJECT IDENTIFIER ::= { netbuilderTrRC 12 } -- NBTR RC w/Appn SW
netbuilderTrRClm   OBJECT IDENTIFIER ::= { netbuilderTrRC 13 } -- NBTR RC w/Lm
netbuilderTrRClt   OBJECT IDENTIFIER ::= { netbuilderTrRC 14 } -- NBTR RC w/Lt
netbuilderTrRCwm   OBJECT IDENTIFIER ::= { netbuilderTrRC 15 } -- NBTR RC w/Wm
netbuilderTrRCwt   OBJECT IDENTIFIER ::= { netbuilderTrRC 16 } -- NBTR RC w/Wt
netbuilderTrRCae   OBJECT IDENTIFIER ::= { netbuilderTrRC 17 } -- NBTR RC w/Ae
netbuilderTrRCap   OBJECT IDENTIFIER ::= { netbuilderTrRC 18 } -- NBTR RC w/Ap
netbuilderTrRCan   OBJECT IDENTIFIER ::= { netbuilderTrRC 19 } -- NBTR RC w/An
netbuilderTrRCla   OBJECT IDENTIFIER ::= { netbuilderTrRC 20 } -- NBTR RC w/La
netbuilderTrRCwa   OBJECT IDENTIFIER ::= { netbuilderTrRC 21 } -- NBTR RC w/Wa
netbuilderTrRCaa   OBJECT IDENTIFIER ::= { netbuilderTrRC 22 } -- NBTR RC w/Aa
netbuilderTrRCab   OBJECT IDENTIFIER ::= { netbuilderTrRC 23 } -- NBTR RC w/Ab
netbuilderTrRCbf   OBJECT IDENTIFIER ::= { netbuilderTrRC 24 } -- NBTR RC w/Bf

--
-- the following identifiers are assigned under a3Com.products.brouter.nb2-4
--

nb2-4Bp   OBJECT IDENTIFIER ::= { nb2-4 1 }  -- nb2 4 slot w/Basic Prot SW
nb2-4Cp   OBJECT IDENTIFIER ::= { nb2-4 2 }  -- nb2 4 slot w/Compl Prot SW
nb2-4Xw   OBJECT IDENTIFIER ::= { nb2-4 3 }  -- nb2 4 slot w/Ext WAN SW
nb2-4Cx   OBJECT IDENTIFIER ::= { nb2-4 4 }  -- nb2 4 slot w/Conn Svc SW
nb2-4Ba   OBJECT IDENTIFIER ::= { nb2-4 5 }  -- nb2 4 slot w/BA
nb2-4Ar   OBJECT IDENTIFIER ::= { nb2-4 6 }  -- nb2 4 slot w/AR
nb2-4Sn   OBJECT IDENTIFIER ::= { nb2-4 7 }  -- nb2 4 slot w/SNA
nb2-4Rb   OBJECT IDENTIFIER ::= { nb2-4 8 }  -- nb2 4 slot w/RB
nb2-4Ff   OBJECT IDENTIFIER ::= { nb2-4 9 }  -- nb2 4 slot w/Full Feature SW
nb2-4Cf   OBJECT IDENTIFIER ::= { nb2-4 10 } -- nb2 4 slot w/CF
nb2-4Bx   OBJECT IDENTIFIER ::= { nb2-4 11 } -- nb2 4 slot w/BX
nb2-4Appn OBJECT IDENTIFIER ::= { nb2-4 12 } -- nb2 4 slot w/Appn SW
nb2-4Lm   OBJECT IDENTIFIER ::= { nb2-4 13 } -- nb2 4 slot w/Lm Sw
nb2-4Lt   OBJECT IDENTIFIER ::= { nb2-4 14 } -- nb2 4 slot w/Lt Sw
nb2-4Wm   OBJECT IDENTIFIER ::= { nb2-4 15 } -- nb2 4 slot w/Wm Sw
nb2-4Wt   OBJECT IDENTIFIER ::= { nb2-4 16 } -- nb2 4 slot w/Wt Sw
nb2-4Ae   OBJECT IDENTIFIER ::= { nb2-4 17 } -- nb2 4 slot w/Ae Sw
nb2-4Ap   OBJECT IDENTIFIER ::= { nb2-4 18 } -- nb2 4 slot w/Ap Sw
nb2-4An   OBJECT IDENTIFIER ::= { nb2-4 19 } -- nb2 4 slot w/An Sw
nb2-4La   OBJECT IDENTIFIER ::= { nb2-4 20 } -- nb2 4 slot w/La Sw
nb2-4Wa   OBJECT IDENTIFIER ::= { nb2-4 21 } -- nb2 4 slot w/Wa Sw
nb2-4Aa   OBJECT IDENTIFIER ::= { nb2-4 22 } -- nb2 4 slot w/Aa Sw
nb2-4Ab   OBJECT IDENTIFIER ::= { nb2-4 23 } -- nb2 4 slot w/Ab Sw
nb2-4Bf   OBJECT IDENTIFIER ::= { nb2-4 24 } -- nb2 4 slot w/Bf Sw


--
-- the following identifiers are assigned under a3Com.products.brouter.nb2-8
--

nb2-8Bp   OBJECT IDENTIFIER ::= { nb2-8 1 }  -- nb2 8 slot w/Basic Prot SW
nb2-8Cp   OBJECT IDENTIFIER ::= { nb2-8 2 }  -- nb2 8 slot w/Compl Prot SW
nb2-8Xw   OBJECT IDENTIFIER ::= { nb2-8 3 }  -- nb2 8 slot w/Ext WAN SW
nb2-8Cx   OBJECT IDENTIFIER ::= { nb2-8 4 }  -- nb2 8 slot w/Conn Svc SW
nb2-8Ba   OBJECT IDENTIFIER ::= { nb2-8 5 }  -- nb2 8 slot w/BA
nb2-8Ar   OBJECT IDENTIFIER ::= { nb2-8 6 }  -- nb2 8 slot w/AR
nb2-8Sn   OBJECT IDENTIFIER ::= { nb2-8 7 }  -- nb2 8 slot w/SNA
nb2-8Rb   OBJECT IDENTIFIER ::= { nb2-8 8 }  -- nb2 8 slot w/RB
nb2-8Ff   OBJECT IDENTIFIER ::= { nb2-8 9 }  -- nb2 8 slot w/Full Feature SW
nb2-8Cf   OBJECT IDENTIFIER ::= { nb2-8 10 } -- nb2 8 slot w/CF
nb2-8Bx   OBJECT IDENTIFIER ::= { nb2-8 11 } -- nb2 8 slot w/BX
nb2-8Appn OBJECT IDENTIFIER ::= { nb2-8 12 } -- nb2 8 slot w/Appn SW
nb2-8Lm   OBJECT IDENTIFIER ::= { nb2-8 13 } -- nb2 8 slot w/Lm Sw
nb2-8Lt   OBJECT IDENTIFIER ::= { nb2-8 14 } -- nb2 8 slot w/Lt Sw
nb2-8Wm   OBJECT IDENTIFIER ::= { nb2-8 15 } -- nb2 8 slot w/Wm Sw
nb2-8Wt   OBJECT IDENTIFIER ::= { nb2-8 16 } -- nb2 8 slot w/Wt Sw
nb2-8Ae   OBJECT IDENTIFIER ::= { nb2-8 17 } -- nb2 8 slot w/Ae Sw
nb2-8Ap   OBJECT IDENTIFIER ::= { nb2-8 18 } -- nb2 8 slot w/Ap Sw
nb2-8An   OBJECT IDENTIFIER ::= { nb2-8 19 } -- nb2 8 slot w/An Sw
nb2-8La   OBJECT IDENTIFIER ::= { nb2-8 20 } -- nb2 8 slot w/La Sw
nb2-8Wa   OBJECT IDENTIFIER ::= { nb2-8 21 } -- nb2 8 slot w/Wa Sw
nb2-8Aa   OBJECT IDENTIFIER ::= { nb2-8 22 } -- nb2 8 slot w/Aa Sw
nb2-8Ab   OBJECT IDENTIFIER ::= { nb2-8 23 } -- nb2 8 slot w/Ab Sw
nb2-8Bf   OBJECT IDENTIFIER ::= { nb2-8 24 } -- nb2 8 slot w/Bf Sw

--
-- the following identifiers are assigned under a3Com.products.brouter.nbro
--

nbroBp   OBJECT IDENTIFIER ::= { nbro 1 }  -- nbro w/Basic Prot SW
nbroCp   OBJECT IDENTIFIER ::= { nbro 2 }  -- nbro w/Compl Prot SW
nbroXw   OBJECT IDENTIFIER ::= { nbro 3 }  -- nbro w/Ext WAN SW
nbroCx   OBJECT IDENTIFIER ::= { nbro 4 }  -- nbro w/Conn Svc SW
nbro201  OBJECT IDENTIFIER ::= { nbro 5 }  -- nbro w/Bndry Rtg. SW
nbroAr   OBJECT IDENTIFIER ::= { nbro 6 }  -- nbro w/AR
nbroSn   OBJECT IDENTIFIER ::= { nbro 7 }  -- nbro w/SNA
nbro200  OBJECT IDENTIFIER ::= { nbro 8 }  -- nbro w/Bridge Prd. SW
nbroFf   OBJECT IDENTIFIER ::= { nbro 9 }  -- nbro w/Full Feature SW
nbroCf   OBJECT IDENTIFIER ::= { nbro 10 } -- nbro w/CF
nbroBx   OBJECT IDENTIFIER ::= { nbro 11 } -- nbro w/BX
nbroAppn OBJECT IDENTIFIER ::= { nbro 12 } -- nbro w/Appn SW
nbroLm   OBJECT IDENTIFIER ::= { nbro 13 } -- nbro w/Lm Sw
nbroLt   OBJECT IDENTIFIER ::= { nbro 14 } -- nbro w/Lt Sw
nbroWm   OBJECT IDENTIFIER ::= { nbro 15 } -- nbro w/Wm Sw
nbroWt   OBJECT IDENTIFIER ::= { nbro 16 } -- nbro w/Wt Sw
nbroAe   OBJECT IDENTIFIER ::= { nbro 17 } -- nbro w/Ae Sw
nbroAp   OBJECT IDENTIFIER ::= { nbro 18 } -- nbro w/Ap Sw
nbroAn   OBJECT IDENTIFIER ::= { nbro 19 } -- nbro w/An Sw
nbroLa   OBJECT IDENTIFIER ::= { nbro 20 } -- nbro w/La Sw
nbroWa   OBJECT IDENTIFIER ::= { nbro 21 } -- nbro w/Wa Sw
nbro224  OBJECT IDENTIFIER ::= { nbro 22 } -- nbro w/Aa Sw
nbroAb   OBJECT IDENTIFIER ::= { nbro 23 } -- nbro w/Ab Sw
nbro223  OBJECT IDENTIFIER ::= { nbro 24 } -- nbro w/Bf Sw

--
-- the following identifier are assigned under a3Com.products.brouter.netbuilderLocal
--

netbuilderLocalBp   OBJECT IDENTIFIER ::= { netbuilderLocal 1 }  -- nb Local w/BP
netbuilderLocalCp   OBJECT IDENTIFIER ::= { netbuilderLocal 2 }  -- nb Local w/CP
netbuilderLocalXw   OBJECT IDENTIFIER ::= { netbuilderLocal 3 }  -- nb Local w/XW
netbuilderLocalCx   OBJECT IDENTIFIER ::= { netbuilderLocal 4 }  -- nb Local w/CX
netbuilderLocalBa   OBJECT IDENTIFIER ::= { netbuilderLocal 5 }  -- nb Local w/BA
netbuilderLocalAr   OBJECT IDENTIFIER ::= { netbuilderLocal 6 }  -- nb Local w/AR
netbuilderLocalSn   OBJECT IDENTIFIER ::= { netbuilderLocal 7 }  -- nb Local w/SN
netbuilderLocalRb   OBJECT IDENTIFIER ::= { netbuilderLocal 8 }  -- nb Local w/RB
netbuilderLocalFf   OBJECT IDENTIFIER ::= { netbuilderLocal 9 }  -- nb Local w/FF
netbuilderLocalCf   OBJECT IDENTIFIER ::= { netbuilderLocal 10 } -- nb Local w/CF
netbuilderLocalBx   OBJECT IDENTIFIER ::= { netbuilderLocal 11 } -- nb Local w/BX
netbuilderLocalAppn OBJECT IDENTIFIER ::= { netbuilderLocal 12 } -- nb Local w/Appn SW
netbuilderLocalLm   OBJECT IDENTIFIER ::= { netbuilderLocal 13 } -- nb Local w/Lm
netbuilderLocalLt   OBJECT IDENTIFIER ::= { netbuilderLocal 14 } -- nb Local w/Lt
netbuilderLocalWm   OBJECT IDENTIFIER ::= { netbuilderLocal 15 } -- nb Local w/Wm
netbuilderLocalWt   OBJECT IDENTIFIER ::= { netbuilderLocal 16 } -- nb Local w/Wt
netbuilderLocalAe   OBJECT IDENTIFIER ::= { netbuilderLocal 17 } -- nb Local w/Ae
netbuilderLocalAp   OBJECT IDENTIFIER ::= { netbuilderLocal 18 } -- nb Local w/Ap
netbuilderLocalAn   OBJECT IDENTIFIER ::= { netbuilderLocal 19 } -- nb Local w/An
netbuilderLocalLa   OBJECT IDENTIFIER ::= { netbuilderLocal 20 } -- nb Local w/La
netbuilderLocalWa   OBJECT IDENTIFIER ::= { netbuilderLocal 21 } -- nb Local w/Wa
netbuilderLocalAa   OBJECT IDENTIFIER ::= { netbuilderLocal 22 } -- nb Local w/Aa
netbuilderLocalAb   OBJECT IDENTIFIER ::= { netbuilderLocal 23 } -- nb Local w/Ab
netbuilderLocalBf   OBJECT IDENTIFIER ::= { netbuilderLocal 24 } -- nb Local w/Bf


--
-- the following identifiers are assigned under a3Com.products.brouter.netbuilderTrLocal
-- 

netbuilderTrLocalBp   OBJECT IDENTIFIER ::= { netbuilderTrLocal 1 }  -- nbtr Local w/Basic Prot SW
netbuilderTrLocalCp   OBJECT IDENTIFIER ::= { netbuilderTrLocal 2 }  -- nbtr Local w/Compl Prot SW
netbuilderTrLocalXw   OBJECT IDENTIFIER ::= { netbuilderTrLocal 3 }  -- nbtr Local w/XW
netbuilderTrLocalCx   OBJECT IDENTIFIER ::= { netbuilderTrLocal 4 }  -- nbtr Local w/CX
netbuilderTrLocalBa   OBJECT IDENTIFIER ::= { netbuilderTrLocal 5 }  -- nbtr Local w/BA
netbuilderTrLocalAr   OBJECT IDENTIFIER ::= { netbuilderTrLocal 6 }  -- nbtr Local w/Acc Rtr SW
netbuilderTrLocalSn   OBJECT IDENTIFIER ::= { netbuilderTrLocal 7 }  -- nbtr Local w/SNA Acc Rtr SW
netbuilderTrLocalRb   OBJECT IDENTIFIER ::= { netbuilderTrLocal 8 }  -- nbtr Local w/RB
netbuilderTrLocalFf   OBJECT IDENTIFIER ::= { netbuilderTrLocal 9 }  -- nbtr Local w/FF
netbuilderTrLocalCf   OBJECT IDENTIFIER ::= { netbuilderTrLocal 10 } -- nbtr Local w/CF
netbuilderTrLocalBx   OBJECT IDENTIFIER ::= { netbuilderTrLocal 11 } -- nbtr Local w/BX SW
netbuilderTrLocalAppn OBJECT IDENTIFIER ::= { netbuilderTrLocal 12 } -- nb TrLocal w/Appn SW
netbuilderTrLocalLm   OBJECT IDENTIFIER ::= { netbuilderTrLocal 13 } -- nbtr Local w/Lm
netbuilderTrLocalLt   OBJECT IDENTIFIER ::= { netbuilderTrLocal 14 } -- nbtr Local w/Lt
netbuilderTrLocalWm   OBJECT IDENTIFIER ::= { netbuilderTrLocal 15 } -- nbtr Local w/Wm
netbuilderTrLocalWt   OBJECT IDENTIFIER ::= { netbuilderTrLocal 16 } -- nbtr Local w/Wt
netbuilderTrLocalAe   OBJECT IDENTIFIER ::= { netbuilderTrLocal 17 } -- nbtr Local w/Ae
netbuilderTrLocalAp   OBJECT IDENTIFIER ::= { netbuilderTrLocal 18 } -- nbtr Local w/Ap
netbuilderTrLocalAn   OBJECT IDENTIFIER ::= { netbuilderTrLocal 19 } -- nbtr Local w/An
netbuilderTrLocalLa   OBJECT IDENTIFIER ::= { netbuilderTrLocal 20 } -- nbtr Local w/La
netbuilderTrLocalWa   OBJECT IDENTIFIER ::= { netbuilderTrLocal 21 } -- nbtr Local w/Wa
netbuilderTrLocalAa   OBJECT IDENTIFIER ::= { netbuilderTrLocal 22 } -- nbtr Local w/Aa
netbuilderTrLocalAb   OBJECT IDENTIFIER ::= { netbuilderTrLocal 23 } -- nbtr Local w/Ab
netbuilderTrLocalBf   OBJECT IDENTIFIER ::= { netbuilderTrLocal 24 } -- nbtr Local w/Bf

--
-- the following identifiers are assigned under a3Com.products.brouter.netbuilderRC1x2
--

netbuilderRC1x2bp   OBJECT IDENTIFIER ::= { netbuilderRC1x2 1 }  -- nbRC1x2 w/BP
netbuilderRC1x2cp   OBJECT IDENTIFIER ::= { netbuilderRC1x2 2 }  -- nbRC1x2 w/CP
netbuilderRC1x2xw   OBJECT IDENTIFIER ::= { netbuilderRC1x2 3 }  -- nbRC1x2 w/XW
netbuilderRC1x2cx   OBJECT IDENTIFIER ::= { netbuilderRC1x2 4 }  -- nbRC1x2 w/CX
netbuilderRC1x2ba   OBJECT IDENTIFIER ::= { netbuilderRC1x2 5 }  -- nbRC1x2 w/BA
netbuilderRC1x2ar   OBJECT IDENTIFIER ::= { netbuilderRC1x2 6 }  -- nb RC1x2 w/AR
netbuilderRC1x2sn   OBJECT IDENTIFIER ::= { netbuilderRC1x2 7 }  -- nb RC1x2 w/SN
netbuilderRC1x2rb   OBJECT IDENTIFIER ::= { netbuilderRC1x2 8 }  -- nb RC1x2 w/RB
netbuilderRC1x2ff   OBJECT IDENTIFIER ::= { netbuilderRC1x2 9 }  -- nb RC1x2 w/FF
netbuilderRC1x2cf   OBJECT IDENTIFIER ::= { netbuilderRC1x2 10 } -- nb RC1x2 w/CF
netbuilderRC1x2bx   OBJECT IDENTIFIER ::= { netbuilderRC1x2 11 } -- nb RC1x2 w/BX
netbuilderRC1x2appn OBJECT IDENTIFIER ::= { netbuilderRC1x2 12 } -- RC1x2 w/Appn
netbuilderRC1x2lm   OBJECT IDENTIFIER ::= { netbuilderRC1x2 13 } -- RC1x2 w/Lm 
netbuilderRC1x2lt   OBJECT IDENTIFIER ::= { netbuilderRC1x2 14 } -- RC1x2 w/Lt Sw
netbuilderRC1x2wm   OBJECT IDENTIFIER ::= { netbuilderRC1x2 15 } -- RC1x2 w/Wm Sw
netbuilderRC1x2wt   OBJECT IDENTIFIER ::= { netbuilderRC1x2 16 } -- RC1x2 w/Wt Sw
netbuilderRC1x2ae   OBJECT IDENTIFIER ::= { netbuilderRC1x2 17 } -- RC1x2 w/Ae Sw
netbuilderRC1x2ap   OBJECT IDENTIFIER ::= { netbuilderRC1x2 18 } -- RC1x2 w/Ap Sw
netbuilderRC1x2an   OBJECT IDENTIFIER ::= { netbuilderRC1x2 19 } -- RC1x2 w/An Sw
netbuilderRC1x2la   OBJECT IDENTIFIER ::= { netbuilderRC1x2 20 } -- RC1x2 w/La Sw
netbuilderRC1x2wa   OBJECT IDENTIFIER ::= { netbuilderRC1x2 21 } -- RC1x2 w/Wa Sw
netbuilderRC1x2aa   OBJECT IDENTIFIER ::= { netbuilderRC1x2 22 } -- RC1x2 w/Aa Sw
netbuilderRC1x2ab   OBJECT IDENTIFIER ::= { netbuilderRC1x2 23 } -- RC1x2 w/Ab Sw
netbuilderRC1x2bf   OBJECT IDENTIFIER ::= { netbuilderRC1x2 24 } -- RC1x2 w/Bf Sw

--
-- the following identifiers are assigned under a3Com.products.brouter.netbuilderTrRC1x2
--

netbuilderTrRC1x2bp   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 1 }
netbuilderTrRC1x2cp   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 2 }
netbuilderTrRC1x2xw   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 3 }
netbuilderTrRC1x2cx   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 4 }
netbuilderTrRC1x2ba   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 5 }
netbuilderTrRC1x2ar   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 6 }
netbuilderTrRC1x2sn   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 7 }
netbuilderTrRC1x2rb   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 8 }
netbuilderTrRC1x2ff   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 9 }
netbuilderTrRC1x2cf   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 10 }
netbuilderTrRC1x2bx   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 11 }
netbuilderTrRC1x2appn OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 12 }
netbuilderTrRC1x2lm   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 13 }
netbuilderTrRC1x2lt   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 14 }
netbuilderTrRC1x2wm   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 15 }
netbuilderTrRC1x2wt   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 16 }
netbuilderTrRC1x2ae   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 17 }
netbuilderTrRC1x2ap   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 18 }
netbuilderTrRC1x2an   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 19 }
netbuilderTrRC1x2la   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 20 }
netbuilderTrRC1x2wa   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 21 }
netbuilderTrRC1x2aa   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 22 }
netbuilderTrRC1x2ab   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 23 }
netbuilderTrRC1x2bf   OBJECT IDENTIFIER ::= { netbuilderTrRC1x2 24 }

--
-- the following identifiers are assigned under a3Com.products.brouter.casper
-- (casper aka "nbro Large" )
--

nbrolBp   OBJECT IDENTIFIER ::= { casper 1 }  -- casper w/Basic Prot SW
nbrolCp   OBJECT IDENTIFIER ::= { casper 2 }  -- casper w/Compl Prot SW
nbrolXw   OBJECT IDENTIFIER ::= { casper 3 }  -- casper w/Ext WAN SW
nbrol228  OBJECT IDENTIFIER ::= { casper 4 }  -- casper w/Conn Svc SW
nbrol201  OBJECT IDENTIFIER ::= { casper 5 }  -- casper w/Bndry Rtg. SW
nbro222   OBJECT IDENTIFIER ::= { casper 6 }  -- casper w/AR SW
nbrolSn   OBJECT IDENTIFIER ::= { casper 7 }  -- casper w/SNA
nbrol200  OBJECT IDENTIFIER ::= { casper 8 }  -- casper w/RB. SW
nbrolFf   OBJECT IDENTIFIER ::= { casper 9 }  -- casper w/Full Feature SW
nbro227   OBJECT IDENTIFIER ::= { casper 10 } -- casper w/CF SW
nbro221   OBJECT IDENTIFIER ::= { casper 11 } -- casper w/BX SW
nbrolAppn OBJECT IDENTIFIER ::= { casper 12 } -- casper w/Appn SW
nbrolLm   OBJECT IDENTIFIER ::= { casper 13 } -- casper w/Lm Sw
nbrolLt   OBJECT IDENTIFIER ::= { casper 14 } -- casper w/Lt Sw
nbrolWm   OBJECT IDENTIFIER ::= { casper 15 } -- casper w/Wm Sw
nbrolWt   OBJECT IDENTIFIER ::= { casper 16 } -- casper w/Wt Sw
nbrolAe   OBJECT IDENTIFIER ::= { casper 17 } -- casper w/Ae Sw
nbrolAp   OBJECT IDENTIFIER ::= { casper 18 } -- casper w/Ap Sw
nbrolAn   OBJECT IDENTIFIER ::= { casper 19 } -- casper w/An Sw
nbrolLa   OBJECT IDENTIFIER ::= { casper 20 } -- casper w/La Sw
nbrolWa   OBJECT IDENTIFIER ::= { casper 21 } -- casper w/Wa Sw
nbrol224  OBJECT IDENTIFIER ::= { casper 22 } -- casper w/Aa Sw
nbrolAb   OBJECT IDENTIFIER ::= { casper 23 } -- casper w/Ab Sw
nbrol223  OBJECT IDENTIFIER ::= { casper 24 } -- casper w/Bf Sw

--
-- the following identifiers are assigned under a3Com.products.brouter.spectreHuge
-- (spectre Huge aka nbro Huge )
--

nbrohBp   OBJECT IDENTIFIER ::= { spectreHuge 1 }  -- spectreHuge w/BP SW
nbrohCp   OBJECT IDENTIFIER ::= { spectreHuge 2 }  -- spectreHuge w/CP SW
nbrohXw   OBJECT IDENTIFIER ::= { spectreHuge 3 }  -- spectreHuge w/Ext WAN SW
nbro228   OBJECT IDENTIFIER ::= { spectreHuge 4 }  -- spectreHuge w/CX SW
nbroh201  OBJECT IDENTIFIER ::= { spectreHuge 5 }  -- casper w/Bndry Rtg. SW
nbroh222  OBJECT IDENTIFIER ::= { spectreHuge 6 }  -- spectreHuge w/AR SW
nbrohSn   OBJECT IDENTIFIER ::= { spectreHuge 7 }  -- spectreHuge w/SNA
nbroh200  OBJECT IDENTIFIER ::= { spectreHuge 8 }  -- spectreHuge w/RB SW
nbrohFf   OBJECT IDENTIFIER ::= { spectreHuge 9 }  -- spectreHuge w/FF SW
nbroh227  OBJECT IDENTIFIER ::= { spectreHuge 10 } -- spectreHuge w/CF SW
nbroh221  OBJECT IDENTIFIER ::= { spectreHuge 11 } -- spectreHuge w/BX SW
nbrohAppn OBJECT IDENTIFIER ::= { spectreHuge 12 } -- spectreHuge w/Appn SW
nbrohLm   OBJECT IDENTIFIER ::= { spectreHuge 13 } -- spectreHuge w/Lm Sw
nbrohLt   OBJECT IDENTIFIER ::= { spectreHuge 14 } -- spectreHuge w/Lt Sw
nbrohWm   OBJECT IDENTIFIER ::= { spectreHuge 15 } -- spectreHuge w/Wm Sw
nbrohWt   OBJECT IDENTIFIER ::= { spectreHuge 16 } -- spectreHuge w/Wt Sw
nbrohAe   OBJECT IDENTIFIER ::= { spectreHuge 17 } -- spectreHuge w/Ae Sw
nbrohAp   OBJECT IDENTIFIER ::= { spectreHuge 18 } -- spectreHuge w/Ap Sw
nbrohAn   OBJECT IDENTIFIER ::= { spectreHuge 19 } -- spectreHuge w/An Sw
nbrohLa   OBJECT IDENTIFIER ::= { spectreHuge 20 } -- spectreHuge w/La Sw
nbrohWa   OBJECT IDENTIFIER ::= { spectreHuge 21 } -- spectreHuge w/Wa Sw
nbroh224  OBJECT IDENTIFIER ::= { spectreHuge 22 } -- spectreHuge w/Aa Sw
nbrohAb   OBJECT IDENTIFIER ::= { spectreHuge 23 } -- spectreHuge w/Ab Sw
nbroh223  OBJECT IDENTIFIER ::= { spectreHuge 24 } -- spectreHuge w/Bf Sw

--
-- the following identifiers are assigned under a3Com.products.brouter.spectreIsdn
--

nbroiBp   OBJECT IDENTIFIER ::= { spectreIsdn 1 }  -- spectreIsdn w/BP SW
nbroiCp   OBJECT IDENTIFIER ::= { spectreIsdn 2 }  -- spectreIsdn w/CP SW
nbroiXw   OBJECT IDENTIFIER ::= { spectreIsdn 3 }  -- spectreIsdn w/Ext WAN SW
nbroiCX   OBJECT IDENTIFIER ::= { spectreIsdn 4 }  -- spectreIsdn w/CX SW
nbroiBA   OBJECT IDENTIFIER ::= { spectreIsdn 5 }  -- spectreIsdn w/Bndry Rtg. SW
nbro422   OBJECT IDENTIFIER ::= { spectreIsdn 6 }  -- spectreIsdn w/AR SW
nbroiSn   OBJECT IDENTIFIER ::= { spectreIsdn 7 }  -- spectreIsdn w/SNA
nbroi200  OBJECT IDENTIFIER ::= { spectreIsdn 8 }  -- spectreIsdn w/RB SW
nbroiFf   OBJECT IDENTIFIER ::= { spectreIsdn 9 }  -- spectreIsdn w/FF SW
nbroil427 OBJECT IDENTIFIER ::= { spectreIsdn 10 } -- spectreIsdn w/CF SW
nbro421   OBJECT IDENTIFIER ::= { spectreIsdn 11 } -- spectreIsdn w/BX SW
nbroiAppn OBJECT IDENTIFIER ::= { spectreIsdn 12 } -- spectreIsdn w/Appn SW
nbroiLm   OBJECT IDENTIFIER ::= { spectreIsdn 13 } -- spectreIsdn w/Lm Sw
nbroiLt   OBJECT IDENTIFIER ::= { spectreIsdn 14 } -- spectreIsdn w/Lt Sw
nbroiWm   OBJECT IDENTIFIER ::= { spectreIsdn 15 } -- spectreIsdn w/Wm Sw
nbroiWt   OBJECT IDENTIFIER ::= { spectreIsdn 16 } -- spectreIsdn w/Wt Sw
nbroiAe   OBJECT IDENTIFIER ::= { spectreIsdn 17 } -- spectreIsdn w/Ae Sw
nbroiAp   OBJECT IDENTIFIER ::= { spectreIsdn 18 } -- spectreIsdn w/Ap Sw
nbroiAn   OBJECT IDENTIFIER ::= { spectreIsdn 19 } -- spectreIsdn w/An Sw
nbroiLa   OBJECT IDENTIFIER ::= { spectreIsdn 20 } -- spectreIsdn w/La Sw
nbroiWa   OBJECT IDENTIFIER ::= { spectreIsdn 21 } -- spectreIsdn w/Wa Sw
nbroi424  OBJECT IDENTIFIER ::= { spectreIsdn 22 } -- spectreIsdn w/Aa Sw
nbroiAb   OBJECT IDENTIFIER ::= { spectreIsdn 23 } -- spectreIsdn w/Ab Sw
nbroi423  OBJECT IDENTIFIER ::= { spectreIsdn 24 } -- spectreIsdn w/Bf Sw

--
-- the following identifiers are assigned under a3Com.products.brouter.nb2-8-4fddi
--

nb2-8-4fddiBp   OBJECT IDENTIFIER ::= { nb2-8-4fddi 1 }  -- crew 4fddi w/BP
nb2-8-4fddiCp   OBJECT IDENTIFIER ::= { nb2-8-4fddi 2 }  -- crew 4fddi w/CP
nb2-8-4fddiXw   OBJECT IDENTIFIER ::= { nb2-8-4fddi 3 }  -- crew 4fddi w/XW
nb2-8-4fddiCx   OBJECT IDENTIFIER ::= { nb2-8-4fddi 4 }  -- crew 4fddi w/CX
nb2-8-4fddiBa   OBJECT IDENTIFIER ::= { nb2-8-4fddi 5 }  -- crew 4fddi w/BA
nb2-8-4fddiAr   OBJECT IDENTIFIER ::= { nb2-8-4fddi 6 }  -- crew 4fddi w/AR
nb2-8-4fddiSn   OBJECT IDENTIFIER ::= { nb2-8-4fddi 7 }  -- crew 4fddi w/SNA
nb2-8-4fddiRb   OBJECT IDENTIFIER ::= { nb2-8-4fddi 8 }  -- crew 4fddi w/RB
nb2-8-4fddiFf   OBJECT IDENTIFIER ::= { nb2-8-4fddi 9 }  -- crew 4fddi w/FF
nb2-8-4fddiCf   OBJECT IDENTIFIER ::= { nb2-8-4fddi 10 } -- crew 4fddi w/CF
nb2-8-4fddiBx   OBJECT IDENTIFIER ::= { nb2-8-4fddi 11 } -- crew 4fddi w/BX
nb2-8-4fddiAppn OBJECT IDENTIFIER ::= { nb2-8-4fddi 12 } -- crew 4fddi w/Appn
nb2-8-4fddiLm   OBJECT IDENTIFIER ::= { nb2-8-4fddi 13 } -- crew 4fddi w/Lm
nb2-8-4fddiLt   OBJECT IDENTIFIER ::= { nb2-8-4fddi 14 } -- crew 4fddi w/Lt
nb2-8-4fddiWm   OBJECT IDENTIFIER ::= { nb2-8-4fddi 15 } -- crew 4fddi w/Wm
nb2-8-4fddiWt   OBJECT IDENTIFIER ::= { nb2-8-4fddi 16 } -- crew 4fddi w/Wt
nb2-8-4fddiAe   OBJECT IDENTIFIER ::= { nb2-8-4fddi 17 } -- crew 4fddi w/Ae
nb2-8-4fddiAp   OBJECT IDENTIFIER ::= { nb2-8-4fddi 18 } -- crew 4fddi w/Ap
nb2-8-4fddiAn   OBJECT IDENTIFIER ::= { nb2-8-4fddi 19 } -- crew 4fddi w/An
nb2-8-4fddiLa   OBJECT IDENTIFIER ::= { nb2-8-4fddi 20 } -- crew 4fddi w/La
nb2-8-4fddiWa   OBJECT IDENTIFIER ::= { nb2-8-4fddi 21 } -- crew 4fddi w/Wa
nb2-8-4fddiAa   OBJECT IDENTIFIER ::= { nb2-8-4fddi 22 } -- crew 4fddi w/Aa
nb2-8-4fddiAb   OBJECT IDENTIFIER ::= { nb2-8-4fddi 23 } -- crew 4fddi w/Ab
nb2-8-4fddiBf   OBJECT IDENTIFIER ::= { nb2-8-4fddi 24 } -- crew 4fddi w/Bf

--
-- the following identifiers are assigned under a3Com.products.brouter.nb2-8-dualwide
--

nb2-8-dualwideBp   OBJECT IDENTIFIER ::= { nb2-8-dualwide 1 }  -- crew dualwide w/BP
nb2-8-dualwideCp   OBJECT IDENTIFIER ::= { nb2-8-dualwide 2 }  -- crew dualwide w/CP
nb2-8-dualwideXw   OBJECT IDENTIFIER ::= { nb2-8-dualwide 3 }  -- crew dualwide w/XW
nb2-8-dualwideCx   OBJECT IDENTIFIER ::= { nb2-8-dualwide 4 }  -- crew dualwide w/CX
nb2-8-dualwideBa   OBJECT IDENTIFIER ::= { nb2-8-dualwide 5 }  -- crew dualwide w/BA
nb2-8-dualwideAr   OBJECT IDENTIFIER ::= { nb2-8-dualwide 6 }  -- crew dualwide w/AR
nb2-8-dualwideSn   OBJECT IDENTIFIER ::= { nb2-8-dualwide 7 }  -- crew dualwide w/SNA
nb2-8-dualwideRb   OBJECT IDENTIFIER ::= { nb2-8-dualwide 8 }  -- crew dualwide w/RB
nb2-8-dualwideFf   OBJECT IDENTIFIER ::= { nb2-8-dualwide 9 }  -- crew dualwide w/FF
nb2-8-dualwideCf   OBJECT IDENTIFIER ::= { nb2-8-dualwide 10 } -- crew dualwide w/CF
nb2-8-dualwideBx   OBJECT IDENTIFIER ::= { nb2-8-dualwide 11 } -- crew dualwide w/BX
nb2-8-dualwideAppn OBJECT IDENTIFIER ::= { nb2-8-dualwide 12 } -- crew dualwide w/Appn
nb2-8-dualwideLm   OBJECT IDENTIFIER ::= { nb2-8-dualwide 13 } -- crew dualwide w/Lm
nb2-8-dualwideLt   OBJECT IDENTIFIER ::= { nb2-8-dualwide 14 } -- crew dualwide w/Lt
nb2-8-dualwideWm   OBJECT IDENTIFIER ::= { nb2-8-dualwide 15 } -- crew dualwide w/Wm
nb2-8-dualwideWt   OBJECT IDENTIFIER ::= { nb2-8-dualwide 16 } -- crew dualwide w/Wt
nb2-8-dualwideAe   OBJECT IDENTIFIER ::= { nb2-8-dualwide 17 } -- crew dualwide w/Ae
nb2-8-dualwideAp   OBJECT IDENTIFIER ::= { nb2-8-dualwide 18 } -- crew dualwide w/Ap
nb2-8-dualwideAn   OBJECT IDENTIFIER ::= { nb2-8-dualwide 19 } -- crew dualwide w/An
nb2-8-dualwideLa   OBJECT IDENTIFIER ::= { nb2-8-dualwide 20 } -- crew dualwide w/La
nb2-8-dualwideWa   OBJECT IDENTIFIER ::= { nb2-8-dualwide 21 } -- crew dualwide w/Wa
nb2-8-dualwideAa   OBJECT IDENTIFIER ::= { nb2-8-dualwide 22 } -- crew dualwide w/Aa
nb2-8-dualwideAb   OBJECT IDENTIFIER ::= { nb2-8-dualwide 23 } -- crew dualwide w/Ab
nb2-8-dualwideBf   OBJECT IDENTIFIER ::= { nb2-8-dualwide 24 } -- crew dualwide w/Bf

--
-- the following identifiers are assigned under a3Com.products.brouter.spectreIs dnHuge
--

nbroihBp   OBJECT IDENTIFIER ::= { spectreIsdnHuge 1 } --spectreIsdn w/BP SW
nbroihCp   OBJECT IDENTIFIER ::= { spectreIsdnHuge 2 } --spectreIsdn w/CP SW
nbroihXw   OBJECT IDENTIFIER ::= { spectreIsdnHuge 3 } -- spectreIsdn w/Ext WAN SW
nbroihCx   OBJECT IDENTIFIER ::= { spectreIsdnHuge 4 } -- spectreIsdn w/CX SW
nbroihBa   OBJECT IDENTIFIER ::= { spectreIsdnHuge 5 } --spectreIsdn w/Bndry Rtg . SW
nbroih422  OBJECT IDENTIFIER ::= { spectreIsdnHuge 6 } --spectreIsdn w/AR SW
nbroihSn   OBJECT IDENTIFIER ::= { spectreIsdnHuge 7 } --spectreIsdn w/SNA
nbroihRb   OBJECT IDENTIFIER ::= { spectreIsdnHuge 8 } --spectreIsdn w/RB SW
nbroihFf   OBJECT IDENTIFIER ::= { spectreIsdnHuge 9 } -- spectreIsdn w/FF SW
nbroih427  OBJECT IDENTIFIER ::= { spectreIsdnHuge 10 }--spectreIsdn w/CF SW
nbroih421  OBJECT IDENTIFIER ::= { spectreIsdnHuge 11 }--spectreIsdn w/BX SW
nbroihAppn OBJECT IDENTIFIER ::= { spectreIsdnHuge 12 } -- spectreIsdn w/Appn
nbroihLm   OBJECT IDENTIFIER ::= { spectreIsdnHuge 13 } -- spectreIsdn w/Lm Sw
nbroihLt   OBJECT IDENTIFIER ::= { spectreIsdnHuge 14 } -- spectreIsdn w/Lt Sw
nbroihWm   OBJECT IDENTIFIER ::= { spectreIsdnHuge 15 } -- spectreIsdn w/Wm Sw
nbroihWt   OBJECT IDENTIFIER ::= { spectreIsdnHuge 16 } -- spectreIsdn w/Wt Sw
nbroihAe   OBJECT IDENTIFIER ::= { spectreIsdnHuge 17 } -- spectreIsdn w/Ae Sw
nbroihAp   OBJECT IDENTIFIER ::= { spectreIsdnHuge 18 } -- spectreIsdn w/Ap Sw
nbroihAn   OBJECT IDENTIFIER ::= { spectreIsdnHuge 19 } -- spectreIsdn w/An Sw
nbroihLa   OBJECT IDENTIFIER ::= { spectreIsdnHuge 20 } -- spectreIsdn w/La Sw
nbroihWa   OBJECT IDENTIFIER ::= { spectreIsdnHuge 21 } -- spectreIsdn w/Wa Sw
nbroih424  OBJECT IDENTIFIER ::= { spectreIsdnHuge 22 } -- spectreIsdn w/Aa Sw
nbroihAb   OBJECT IDENTIFIER ::= { spectreIsdnHuge 23 } -- spectreIsdn w/Ab Sw
nbroih423  OBJECT IDENTIFIER ::= { spectreIsdnHuge 24 } -- spectreIsdn w/Bf Sw

--
-- the following identifiers are assigned under a3Com.products.brouter.nbroTrLarge
--

nbroTrlBp  OBJECT IDENTIFIER ::= { nbroTrHuge 1 } --nbroTrHuge w/BP SW
nbroTrlCp  OBJECT IDENTIFIER ::= { nbroTrHuge 2 } --nbroTrHuge w/CP SW
nbroTrlXw  OBJECT IDENTIFIER ::= { nbroTrHuge 3 } -- nbroTrHuge w/Ext WAN SW
nbroTrlCx OBJECT IDENTIFIER ::= { nbroTrHuge 4 } -- nbroTrHuge w/CX SW
nbroTrlBa OBJECT IDENTIFIER ::= { nbroTrHuge 5 } --nbroTrHuge w/Bndry Rtg. SW
nbro322  OBJECT IDENTIFIER ::= { nbroTrHuge 6 } --nbroTrHuge w/AR SW
nbroTrlSn  OBJECT IDENTIFIER ::= { nbroTrHuge 7 } --nbroTrHuge w/SNA
nbroTrlRb OBJECT IDENTIFIER ::= { nbroTrHuge 8 } --nbroTrHuge w/RB SW
nbroTrlFf  OBJECT IDENTIFIER ::= { nbroTrHuge 9 } -- nbroTrHuge w/FF SW
nbroTrl327  OBJECT IDENTIFIER ::= { nbroTrHuge 10 }--nbroTrHuge w/CF SW
nbro321     OBJECT IDENTIFIER ::= { nbroTrHuge 11 }--nbroTrHuge w/BX SW
nbroTrlAppn OBJECT IDENTIFIER ::= { nbroTrHuge 12 } -- nbroTrHuge w/Appn SW
nbroTrlLm OBJECT IDENTIFIER ::= { nbroTrHuge 13 } -- nbroTrHuge w/Lm Sw
nbroTrlLt OBJECT IDENTIFIER ::= { nbroTrHuge 14 } -- nbroTrHuge w/Lt Sw
nbroTrlWm OBJECT IDENTIFIER ::= { nbroTrHuge 15 } -- nbroTrHuge w/Wm Sw
nbroTrlWt OBJECT IDENTIFIER ::= { nbroTrHuge 16 } -- nbroTrHuge w/Wt Sw
nbroTrlAe OBJECT IDENTIFIER ::= { nbroTrHuge 17 } -- nbroTrHuge w/Ae Sw
nbroTrlAp OBJECT IDENTIFIER ::= { nbroTrHuge 18 } -- nbroTrHuge w/Ap Sw
nbroTrlAn OBJECT IDENTIFIER ::= { nbroTrHuge 19 } -- nbroTrHuge w/An Sw
nbroTrlLa OBJECT IDENTIFIER ::= { nbroTrHuge 20 } -- nbroTrHuge w/La Sw
nbroTrlWa OBJECT IDENTIFIER ::= { nbroTrHuge 21 } -- nbroTrHuge w/Wa Sw
nbroTrlAa OBJECT IDENTIFIER ::= { nbroTrHuge 22 } -- nbroTrHuge w/Aa Sw
nbroTrlAb OBJECT IDENTIFIER ::= { nbroTrHuge 23 } -- nbroTrHuge w/Ab Sw
nbroTrl323 OBJECT IDENTIFIER ::= { nbroTrHuge 24 } -- nbroTrHuge w/Bf Sw


--
-- the following identifiers are assigned under a3Com.products.brouter.nbroTrIsdn
--

nbroTrIsdnBp   OBJECT IDENTIFIER ::= { nbroTrIsdn 1 } --nbroTrIsdn w/BP SW
nbroTrIsdnCp   OBJECT IDENTIFIER ::= { nbroTrIsdn 2 } --nbroTrIsdn w/CP SW
nbroTrIsdnXw   OBJECT IDENTIFIER ::= { nbroTrIsdn 3 } -- nbroTrIsdn w/Ext WAN SW
nbroTrIsdnCx   OBJECT IDENTIFIER ::= { nbroTrIsdn 4 } -- nbroTrIsdn w/CX SW
nbroTrIsdnBa   OBJECT IDENTIFIER ::= { nbroTrIsdn 5 } --nbroTrIsdn w/Bndry Rtg. SW
nbroTrIsdnAr   OBJECT IDENTIFIER ::= { nbroTrIsdn 6 } --nbroTrIsdn w/AR SW
nbroTrIsdnSn   OBJECT IDENTIFIER ::= { nbroTrIsdn 7 } --nbroTrIsdn w/SNA
nbroTrIsdnRb   OBJECT IDENTIFIER ::= { nbroTrIsdn 8 } --nbroTrIsdn w/RB SW
nbroTrIsdnFf   OBJECT IDENTIFIER ::= { nbroTrIsdn 9 } -- nbroTrIsdn w/FF SW
nbro527        OBJECT IDENTIFIER ::= { nbroTrIsdn 10 }--nbroTrIsdn w/CF SW
nbroTrIsdnBx   OBJECT IDENTIFIER ::= { nbroTrIsdn 11 }--nbroTrIsdn w/BX SW
nbroTrIsdnAppn OBJECT IDENTIFIER ::= { nbroTrIsdn 12 } -- nbroTrIsdn w/Appn SW
nbroTrIsdnLm   OBJECT IDENTIFIER ::= { nbroTrIsdn 13 } -- nbroTrIsdn w/Lm Sw
nbroTrIsdnLt   OBJECT IDENTIFIER ::= { nbroTrIsdn 14 } -- nbroTrIsdn w/Lt Sw
nbroTrIsdnWm   OBJECT IDENTIFIER ::= { nbroTrIsdn 15 } -- nbroTrIsdn w/Wm Sw
nbroTrIsdnWt   OBJECT IDENTIFIER ::= { nbroTrIsdn 16 } -- nbroTrIsdn w/Wt Sw
nbroTrIsdnAe   OBJECT IDENTIFIER ::= { nbroTrIsdn 17 } -- nbroTrIsdn w/Ae Sw
nbroTrIsdnAp   OBJECT IDENTIFIER ::= { nbroTrIsdn 18 } -- nbroTrIsdn w/Ap Sw
nbroTrIsdnAn   OBJECT IDENTIFIER ::= { nbroTrIsdn 19 } -- nbroTrIsdn w/An Sw
nbroTrIsdnLa   OBJECT IDENTIFIER ::= { nbroTrIsdn 20 } -- nbroTrIsdn w/La Sw
nbroTrIsdnWa   OBJECT IDENTIFIER ::= { nbroTrIsdn 21 } -- nbroTrIsdn w/Wa Sw
nbroTrIsdnAa   OBJECT IDENTIFIER ::= { nbroTrIsdn 22 } -- nbroTrIsdn w/Aa Sw
nbroTrIsdnAb   OBJECT IDENTIFIER ::= { nbroTrIsdn 23 } -- nbroTrIsdn w/Ab Sw
nbro523        OBJECT IDENTIFIER ::= { nbroTrIsdn 24 } -- nbroTrIsdn w/Bf Sw

--
-- the following identifiers are assigned under a3Com.products.brouter.nbroTrNext
--

nbroTrhBp  OBJECT IDENTIFIER ::= { nbroTrNext 1 } --nbroTrNext w/BP SW
nbroTrhCp  OBJECT IDENTIFIER ::= { nbroTrNext 2 } --nbroTrNext w/CP SW
nbroTrhXw  OBJECT IDENTIFIER ::= { nbroTrNext 3 } -- nbroTrNext w/Ext WAN SW
nbroTrhCx OBJECT IDENTIFIER ::= { nbroTrNext 4 } -- nbroTrNext w/CX SW
nbroTrhBa OBJECT IDENTIFIER ::= { nbroTrNext 5 } --nbroTrNext w/Bndry Rtg. SW
nbroTrh322  OBJECT IDENTIFIER ::= { nbroTrNext 6 } --nbroTrNext w/AR SW
nbroTrhSn  OBJECT IDENTIFIER ::= { nbroTrNext 7 } --nbroTrNext w/SNA
nbroTrhRb OBJECT IDENTIFIER ::= { nbroTrNext 8 } --nbroTrNext w/RB SW
nbroTrhFf  OBJECT IDENTIFIER ::= { nbroTrNext 9 } -- nbroTrNext w/FF SW
nbroTrh327  OBJECT IDENTIFIER ::= { nbroTrNext 10 }--nbroTrNext w/CF SW
nbroTrh321     OBJECT IDENTIFIER ::= { nbroTrNext 11 }--nbroTrNext w/BX SW
nbroTrhAppn OBJECT IDENTIFIER ::= { nbroTrNext 12 } -- nbroTrNext w/Appn SW
nbroTrhLm OBJECT IDENTIFIER ::= { nbroTrNext 13 } -- nbroTrNext w/Lm Sw
nbroTrhLt OBJECT IDENTIFIER ::= { nbroTrNext 14 } -- nbroTrNext w/Lt Sw
nbroTrhWm OBJECT IDENTIFIER ::= { nbroTrNext 15 } -- nbroTrNext w/Wm Sw
nbroTrhWt OBJECT IDENTIFIER ::= { nbroTrNext 16 } -- nbroTrNext w/Wt Sw
nbroTrhAe OBJECT IDENTIFIER ::= { nbroTrNext 17 } -- nbroTrNext w/Ae Sw
nbroTrhAp OBJECT IDENTIFIER ::= { nbroTrNext 18 } -- nbroTrNext w/Ap Sw
nbroTrhAn OBJECT IDENTIFIER ::= { nbroTrNext 19 } -- nbroTrNext w/An Sw
nbroTrhLa OBJECT IDENTIFIER ::= { nbroTrNext 20 } -- nbroTrNext w/La Sw
nbroTrhWa OBJECT IDENTIFIER ::= { nbroTrNext 21 } -- nbroTrNext w/Wa Sw
nbroTrhAa OBJECT IDENTIFIER ::= { nbroTrNext 22 } -- nbroTrNext w/Aa Sw
nbroTrhAb OBJECT IDENTIFIER ::= { nbroTrNext 23 } -- nbroTrNext w/Ab Sw
nbroTrh323 OBJECT IDENTIFIER ::= { nbroTrNext 24 } -- nbroTrNext w/Bf Sw


--
-- the following identifiers are assigned under a3Com.products.brouter.officeConnRtr
--

ocRtrBp   OBJECT IDENTIFIER ::= { officeConnRtr 1 }  -- officeConnRtr w/BP SW
ocRtrCp   OBJECT IDENTIFIER ::= { officeConnRtr 2 }  -- officeConnRtr w/CP SW
ocRtrXw   OBJECT IDENTIFIER ::= { officeConnRtr 3 }  -- officeConnRtr w/Ext WAN SW
ocRtrCx   OBJECT IDENTIFIER ::= { officeConnRtr 4 }  -- officeConnRtr w/CX SW
ocRtrBa   OBJECT IDENTIFIER ::= { officeConnRtr 5 }  -- officeConnRtr w/Bndry Rtg. SW
ocRtrAr   OBJECT IDENTIFIER ::= { officeConnRtr 6 }  -- officeConnRtr w/AR SW
ocRtrSn   OBJECT IDENTIFIER ::= { officeConnRtr 7 }  -- officeConnRtr w/SNA
ocRtrRb   OBJECT IDENTIFIER ::= { officeConnRtr 8 }  -- officeConnRtr w/RB SW
ocRtrFf   OBJECT IDENTIFIER ::= { officeConnRtr 9 }  -- officeConnRtr w/FF SW
ocRtrCf   OBJECT IDENTIFIER ::= { officeConnRtr 10 } -- officeConnRtr w/CF SW
ocRtrBx   OBJECT IDENTIFIER ::= { officeConnRtr 11 } -- officeConnRtr w/BX SW
ocRtrAppn OBJECT IDENTIFIER ::= { officeConnRtr 12 } -- officeConnRtr w/Appn SW
ocRtrLm   OBJECT IDENTIFIER ::= { officeConnRtr 13 } -- officeConnRtr w/Lm Sw
ocRtrLt   OBJECT IDENTIFIER ::= { officeConnRtr 14 } -- officeConnRtr w/Lt Sw
ocRtrWm   OBJECT IDENTIFIER ::= { officeConnRtr 15 } -- officeConnRtr w/Wm Sw
ocRtrWt   OBJECT IDENTIFIER ::= { officeConnRtr 16 } -- officeConnRtr w/Wt Sw
ocRtrAe   OBJECT IDENTIFIER ::= { officeConnRtr 17 } -- officeConnRtr w/Ae Sw
ocRtrAp   OBJECT IDENTIFIER ::= { officeConnRtr 18 } -- officeConnRtr w/Ap Sw
ocRtrAn   OBJECT IDENTIFIER ::= { officeConnRtr 19 } -- officeConnRtr w/An Sw
ocRtrLa   OBJECT IDENTIFIER ::= { officeConnRtr 20 } -- officeConnRtr w/La Sw
ocRtrWa   OBJECT IDENTIFIER ::= { officeConnRtr 21 } -- officeConnRtr w/Wa Sw
ocRtrAa   OBJECT IDENTIFIER ::= { officeConnRtr 22 } -- officeConnRtr w/Aa Sw
ocRtrAb   OBJECT IDENTIFIER ::= { officeConnRtr 23 } -- officeConnRtr w/Ab Sw
ocRtrBf   OBJECT IDENTIFIER ::= { officeConnRtr 24 } -- officeConnRtr w/Bf Sw

--
-- the following identifiers are assigned to brouterBoards
--

ethernet      OBJECT IDENTIFIER ::= { brouterBoards 1 }
fddiPhy       OBJECT IDENTIFIER ::= { brouterBoards 2 }
fddiMac       OBJECT IDENTIFIER ::= { brouterBoards 3 }
hss           OBJECT IDENTIFIER ::= { brouterBoards 4 }
tokenRingBrd  OBJECT IDENTIFIER ::= { brouterBoards 5 }
hssG703       OBJECT IDENTIFIER ::= { brouterBoards 6 }
hssRS449      OBJECT IDENTIFIER ::= { brouterBoards 7 }
t3HSSI        OBJECT IDENTIFIER ::= { brouterBoards 8 } 
dualEth       OBJECT IDENTIFIER ::= { brouterBoards 9 }
cec           OBJECT IDENTIFIER ::= { brouterBoards 10 }
fddiPhySm     OBJECT IDENTIFIER ::= { brouterBoards 11 }
fddiPhyMmSm   OBJECT IDENTIFIER ::= { brouterBoards 12 }
fddiPhySmMm   OBJECT IDENTIFIER ::= { brouterBoards 13 } 
hdwan         OBJECT IDENTIFIER ::= { brouterBoards 14 } 
hdwan449      OBJECT IDENTIFIER ::= { brouterBoards 15 } 
hdwan232      OBJECT IDENTIFIER ::= { brouterBoards 16 }
mp6Eth        OBJECT IDENTIFIER ::= { brouterBoards 17 }
trPlus        OBJECT IDENTIFIER ::= { brouterBoards 18 }
macPlus       OBJECT IDENTIFIER ::= { brouterBoards 19 }
cecStar       OBJECT IDENTIFIER ::= { brouterBoards 20 }
isdnBri       OBJECT IDENTIFIER ::= { brouterBoards 21 }
isdnPri       OBJECT IDENTIFIER ::= { brouterBoards 22 }
mpAtm         OBJECT IDENTIFIER ::= { brouterBoards 23 }
hssI431       OBJECT IDENTIFIER ::= { brouterBoards 24 }
mpFddi        OBJECT IDENTIFIER ::= { brouterBoards 25 }
mp6EthFl      OBJECT IDENTIFIER ::= { brouterBoards 26 }
ethV3         OBJECT IDENTIFIER ::= { brouterBoards 27 }
ethV3Fl       OBJECT IDENTIFIER ::= { brouterBoards 28 }
nbroBrd       OBJECT IDENTIFIER ::= { brouterBoards 29 }
mpAtmFiber    OBJECT IDENTIFIER ::= { brouterBoards 30 }
dpe           OBJECT IDENTIFIER ::= { brouterBoards 31 }
flatFddiMm    OBJECT IDENTIFIER ::= { brouterBoards 32 }
flatFddiSs    OBJECT IDENTIFIER ::= { brouterBoards 33 }
flatFddiSm    OBJECT IDENTIFIER ::= { brouterBoards 34 }
flatFddiMs    OBJECT IDENTIFIER ::= { brouterBoards 35 }
mpAtmFiberMm  OBJECT IDENTIFIER ::= { brouterBoards 36 }
nbocBrd       OBJECT IDENTIFIER ::= { brouterBoards 37 }
nbocST        OBJECT IDENTIFIER ::= { brouterBoards 38 }
nbocU         OBJECT IDENTIFIER ::= { brouterBoards 39 }
nboc56kCSU    OBJECT IDENTIFIER ::= { brouterBoards 40 }
nbocT1CSU     OBJECT IDENTIFIER ::= { brouterBoards 41 }
nboc1x1       OBJECT IDENTIFIER ::= { brouterBoards 42 }
nboc2FlexWAN  OBJECT IDENTIFIER ::= { brouterBoards 43 }


--
-- the following identifiers are assigned to brouterBrdFwVers
--

noFw          OBJECT IDENTIFIER ::= { brouterBrdFwVers 1 }
cecFw         OBJECT IDENTIFIER ::= { brouterBrdFwVers 2 }
hdwanFw       OBJECT IDENTIFIER ::= { brouterBrdFwVers 3 }
hdwan232Fw    OBJECT IDENTIFIER ::= { brouterBrdFwVers 4 }
hdwan449Fw    OBJECT IDENTIFIER ::= { brouterBrdFwVers 5 }
mp6ethFw      OBJECT IDENTIFIER ::= { brouterBrdFwVers 6 }
cecStarFw     OBJECT IDENTIFIER ::= { brouterBrdFwVers 7 }
mpAtmFw       OBJECT IDENTIFIER ::= { brouterBrdFwVers 8 }
mpFddiFw      OBJECT IDENTIFIER ::= { brouterBrdFwVers 9 }
mp6EthFlFw    OBJECT IDENTIFIER ::= { brouterBrdFwVers 10 }
nbroFw        OBJECT IDENTIFIER ::= { brouterBrdFwVers 11 }
nbocFw        OBJECT IDENTIFIER ::= { brouterBrdFwVers 12 }
dpeFw         OBJECT IDENTIFIER ::= { brouterBrdFwVers 13 }


--
-- the following identifiers are assigned to brouterBrdSwVers
--

noSw          OBJECT IDENTIFIER ::= { brouterBrdSwVers 1 }
mp6eth        OBJECT IDENTIFIER ::= { brouterBrdSwVers 2 }

--
-- the following identifiers are assigned under a3Com.products.genericMSWorkstation
--

deskManProduct OBJECT IDENTIFIER ::= { genericMSWorkstation 1 }

--
-- the following identifiers are assigned under a3Com.products.genericMSWorkstation.deskManProduct
--

ethernetSoftHub  OBJECT IDENTIFIER ::= { deskManProduct 1 }
ethernetDTAnode  OBJECT IDENTIFIER ::= { deskManProduct 2 }
tokenRingSoftHub OBJECT IDENTIFIER ::= { deskManProduct 3 }
tokenRingDTAnode OBJECT IDENTIFIER ::= { deskManProduct 4 }

--
-- the following identifiers are assigned to 3com hubs
--

linkBuilder3GH              OBJECT IDENTIFIER ::= { hub 1 }
linkBuilder10BTi            OBJECT IDENTIFIER ::= { hub 2 }
linkBuilderECS              OBJECT IDENTIFIER ::= { hub 3 }
linkBuilderMSH              OBJECT IDENTIFIER ::= { hub 4 }
linkBuilderFMS              OBJECT IDENTIFIER ::= { hub 5 }
linkBuilderFddiWorkGroupHub OBJECT IDENTIFIER ::= { hub 6 }
linkBuilderFMSII            OBJECT IDENTIFIER ::= { hub 7 }
linkSwitchFMS               OBJECT IDENTIFIER ::= { hub 8 }
linkSwitchMSH               OBJECT IDENTIFIER ::= { hub 9 }
linkBuilderFMSLBridge       OBJECT IDENTIFIER ::= { hub 10 }
linkBuilderTP8i             OBJECT IDENTIFIER ::= { hub 11 }
linkBuilderMSHFddi          OBJECT IDENTIFIER ::= { hub 12 }
linkSwitch1000              OBJECT IDENTIFIER ::= { hub 13 }
linkSwitch500               OBJECT IDENTIFIER ::= { hub 14 }
linkSwitch2700AU            OBJECT IDENTIFIER ::= { hub 15 }
linkSwitch2700Bridge        OBJECT IDENTIFIER ::= { hub 16 }
linkBuilderFMS100LBridge    OBJECT IDENTIFIER ::= { hub 17 }
linkSwitch2700TliAU         OBJECT IDENTIFIER ::= { hub 18 }
linkSwitch2700TliBridge     OBJECT IDENTIFIER ::= { hub 19 }
linkBuilderFMS100           OBJECT IDENTIFIER ::= { hub 20 }
officeConnect-Hub8M         OBJECT IDENTIFIER ::= { hub 21 }
linkSwitch3000              OBJECT IDENTIFIER ::= { hub 22 }
mshSwitch                   OBJECT IDENTIFIER ::= { hub 23 }
linkSwitch2000TR            OBJECT IDENTIFIER ::= { hub 24 }
oncoreFastModuleFPA100      OBJECT IDENTIFIER ::= { hub 25}
oncoreFastModuleFPA10       OBJECT IDENTIFIER ::= { hub 26}
oncoreFastModuleFPA10FX     OBJECT IDENTIFIER ::= { hub 27}	
oncoreFastModuleBPA         OBJECT IDENTIFIER ::= { hub 28}              
superStackDesktopSwitch     OBJECT IDENTIFIER ::= { hub 29 }
oncoreFastModuleFPA100TX    OBJECT IDENTIFIER ::= { hub 30}	
officeConnect-Switch140M    OBJECT IDENTIFIER ::= { hub 31 }

--
-- the following identifiers are assigned to 3com atm switching/access products
--

cELLplex7000             OBJECT IDENTIFIER ::= { atm 1 }
cELLplex7000-cards       OBJECT IDENTIFIER ::= { atm 2 }
atmAccess                OBJECT IDENTIFIER ::= { atm 3 }

--
-- the following identifiers are assigned to 3com cELLplex7000 interface cards
--

cELLplex-7x00cardBridge       OBJECT IDENTIFIER ::= { cELLplex7000-cards 1 }
cELLplex-7200card             OBJECT IDENTIFIER ::= { cELLplex7000-cards 2 }
cELLplex-7200Fcard            OBJECT IDENTIFIER ::= { cELLplex7000-cards 3 }
cELLplex-7400card             OBJECT IDENTIFIER ::= { cELLplex7000-cards 4 }
cELLplex-7600card             OBJECT IDENTIFIER ::= { cELLplex7000-cards 5 }

--
-- the following identifiers are assinged to 3com Broadband Access products
--
broadbandAccess               OBJECT IDENTIFIER ::= { tdm 1 }

--
-- the following identifiers are assigned to 3com modules and cards
--

linkBuilder3GH-cards              OBJECT IDENTIFIER ::= { cards 1 }
linkBuilder10BTi-cards            OBJECT IDENTIFIER ::= { cards 2 }
linkBuilderECS-cards              OBJECT IDENTIFIER ::= { cards 3 }
linkBuilderMSH-cards              OBJECT IDENTIFIER ::= { cards 4 }
linkBuilderFMS-cards              OBJECT IDENTIFIER ::= { cards 5 }
linkBuilderFMSII-cards            OBJECT IDENTIFIER ::= { cards 6 } 
a3C512                            OBJECT IDENTIFIER ::= { cards 7 }
linkBuilderTP8i-cards             OBJECT IDENTIFIER ::= { cards 8 }
linkSwitch1000-cards              OBJECT IDENTIFIER ::= { cards 9 }
linkBuilderFMS100-cards           OBJECT IDENTIFIER ::= { cards 10 } 
officeConnect-Hub8M-cards         OBJECT IDENTIFIER ::= { cards 11 } 
linkSwitch2000TR-cards            OBJECT IDENTIFIER ::= { cards 12 }

linkBuilder10BTi-cards-utp        OBJECT IDENTIFIER ::= { linkBuilder10BTi-cards 1 }
linkBuilder10BT-cards-utp         OBJECT IDENTIFIER ::= { linkBuilder10BTi-cards 2 }

linkBuilderFMS-cards-utp          OBJECT IDENTIFIER ::= { linkBuilderFMS-cards 1 }
linkBuilderFMS-cards-coax         OBJECT IDENTIFIER ::= { linkBuilderFMS-cards 2 }
linkBuilderFMS-cards-fiber        OBJECT IDENTIFIER ::= { linkBuilderFMS-cards 3 }
linkBuilderFMS-cards-12fiber      OBJECT IDENTIFIER ::= { linkBuilderFMS-cards 4 }
linkBuilderFMS-cards-24utp        OBJECT IDENTIFIER ::= { linkBuilderFMS-cards 5 }

linkBuilderFMSII-cards-12tp-rj45  OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 1 }
linkBuilderFMSII-cards-10coax-bnc OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 2 }
linkBuilderFMSII-cards-6fiber-st  OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 3 }
linkBuilderFMSII-cards-12fiber-st OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 4 } 
linkBuilderFMSII-cards-24tp-rj45  OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 5 } 
linkBuilderFMSII-cards-24tp-telco OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 6 }
superStackHub10-cards-12tp-rj45   OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 7 }
superStackHub10-cards-24tp-rj45   OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 8 } 
superStackHub10-cards-6fiber-st   OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 9 }
superStackHub10-cards-24tp-telco  OBJECT IDENTIFIER ::= { linkBuilderFMSII-cards 10 }

a3C512-withBNC-expn-card          OBJECT IDENTIFIER ::= { a3C512 1 }
a3C512-withAUI-expn-card          OBJECT IDENTIFIER ::= { a3C512 2 }
a3C512-withFOIRL-expn-card        OBJECT IDENTIFIER ::= { a3C512 3 }

linkBuilderTP8i-cards-8tp-rj45    OBJECT IDENTIFIER ::= { linkBuilderTP8i-cards 1 }

linkSwitch1000-cards-24tp-rj45    OBJECT IDENTIFIER ::= { linkSwitch1000-cards 1 }
linkSwitch1000-cards-12tp-rj45    OBJECT IDENTIFIER ::= { linkSwitch1000-cards 2 }
linkSwitch3000-cards-5fiber-sc    OBJECT IDENTIFIER ::= { linkSwitch1000-cards 3 }
linkSwitch3000-cards-8tp-rj45     OBJECT IDENTIFIER ::= { linkSwitch1000-cards 4 }

superStackSwitch1000-cards-24tp-rj45    OBJECT IDENTIFIER ::= { linkSwitch1000-cards 5 }
superStackSwitch1000-cards-12tp-rj45    OBJECT IDENTIFIER ::= { linkSwitch1000-cards 6 }
superStackSwitch3000-cards-5fiber-sc    OBJECT IDENTIFIER ::= { linkSwitch1000-cards 7 }
superStackSwitch3000-cards-8tp-rj45     OBJECT IDENTIFIER ::= { linkSwitch1000-cards 8 }

oncore-cards-5fiber-sc-2tp-rj45-blk       OBJECT IDENTIFIER ::= { linkSwitch1000-cards 9}   
oncore-cards-24tp-telco-blk               OBJECT IDENTIFIER ::= { linkSwitch1000-cards 10}   
oncore-cards-24tp-telco-1fiber-sc-blk     OBJECT IDENTIFIER ::= { linkSwitch1000-cards 11}    
oncore-cards-1fiber-sc-7blk               OBJECT IDENTIFIER ::= { linkSwitch1000-cards 12}   

superStackSwitch1000-3000-cards-atm       OBJECT IDENTIFIER ::= { linkSwitch1000-cards 13}

oncore-cards-2fiber-sc-7blk               OBJECT IDENTIFIER ::= { linkSwitch1000-cards 14}  
oncore-cards-1fiber-sc-tp-rj45-7blk       OBJECT IDENTIFIER ::= { linkSwitch1000-cards 15}  
oncore-cards-1fiber-sc-atm-7blk           OBJECT IDENTIFIER ::= { linkSwitch1000-cards 16}
superStackDesktopSwitch-24tp-rj45         OBJECT IDENTIFIER ::= { linkSwitch1000-cards 17}

linkSwitch3000-cards-12tp-rj45            OBJECT IDENTIFIER ::= { linkSwitch1000-cards 18}
superStackSwitch3000-cards-12tp-rj45      OBJECT IDENTIFIER ::= { linkSwitch1000-cards 19}

oncore-cards-7tp-rj45-blk                 OBJECT IDENTIFIER ::= { linkSwitch1000-cards 20}  

officeConnect-Switch140M-5tp-rj45         OBJECT IDENTIFIER ::= { linkSwitch1000-cards 21}

superStackSwitch3000-cards-12tp-rj45-ten100      OBJECT IDENTIFIER ::= { linkSwitch1000-cards 22} 

linkBuilderFMS100-cards-12utp     OBJECT IDENTIFIER ::= { linkBuilderFMS100-cards 1 }  -- this is Ethernet 100BaseTX repeater card
linkBuilderFMS100-cards-12T4      OBJECT IDENTIFIER ::= { linkBuilderFMS100-cards 2 }  -- this is Ethernet 100BaseT4 repeater card

officeConnect-Hub8M-cards-8tp-rj45  OBJECT IDENTIFIER ::= { officeConnect-Hub8M-cards 1 }

linkSwitch2000TR-cards-12tp-rj45    OBJECT IDENTIFIER ::= { linkSwitch2000TR-cards 1 }

--
-- the following identifiers are assigned to 3com chip sets
--

valcan         OBJECT IDENTIFIER ::= { chipSets 1 }

--
-- the following identifiers are assigned to 3com oem products
--

linkConv250   OBJECT IDENTIFIER ::= { oem 1 }
linkConv251   OBJECT IDENTIFIER ::= { oem 2 }
linkConv350   OBJECT IDENTIFIER ::= { oem 3 }
linkConv351   OBJECT IDENTIFIER ::= { oem 4 }

--
-- the following identifiers are assigned to Synernetics products
--     (SysOID 1.3.6.1.4.1.114)  
--

synernetics             OBJECT IDENTIFIER ::= { enterprises 114 }
lanplex                 OBJECT IDENTIFIER ::= { synernetics 1 }

lANplex-12-slot-support OBJECT IDENTIFIER ::= { lanplex 1 }
lANplex-4-slot-support  OBJECT IDENTIFIER ::= { lanplex 2 }

lpsProducts             OBJECT IDENTIFIER ::= { lanplex 3 }

--
-- the following identifiers are assigned to the LANplex product line
--

lps6000                 OBJECT IDENTIFIER ::= { lpsProducts 2 }
lps2000                 OBJECT IDENTIFIER ::= { lpsProducts 3 }

-- 
-- the following identifiers are assigned to the LANplex product types
--

lps6012                 OBJECT IDENTIFIER ::= { lps6000 1 }
lps6004                 OBJECT IDENTIFIER ::= { lps6000 2 }

lps2500                 OBJECT IDENTIFIER ::= { lps2000 1 }
lss2200                 OBJECT IDENTIFIER ::= { lps2000 2 }
lps2016                 OBJECT IDENTIFIER ::= { lps2000 3 }
lss2200SS2	        OBJECT IDENTIFIER ::= { lps2000 4 }

--
-- the following identifiers are assigned to the LANplex 6000 devices
--

lps6012System           OBJECT IDENTIFIER ::= { lps6012 1 }
lps6012Chassis          OBJECT IDENTIFIER ::= { lps6012 2 }
lps6012ESM              OBJECT IDENTIFIER ::= { lps6012 3 }
lps6012EFSM             OBJECT IDENTIFIER ::= { lps6012 4 }
lps6012TRSM		OBJECT IDENTIFIER ::= { lps6012 5 }
lps6012TMM		OBJECT IDENTIFIER ::= { lps6012 6 }
lps6012FSM		OBJECT IDENTIFIER ::= { lps6012 7 } 

lps6004System           OBJECT IDENTIFIER ::= { lps6004 1 }
lps6004Chassis          OBJECT IDENTIFIER ::= { lps6004 2 }
lps6004ESM              OBJECT IDENTIFIER ::= { lps6004 3 }
lps6004EFSM             OBJECT IDENTIFIER ::= { lps6004 4 }
lps6004TRSM		OBJECT IDENTIFIER ::= { lps6004 5 }
lps6004TMM		OBJECT IDENTIFIER ::= { lps6004 6 }
lps6004FSM		OBJECT IDENTIFIER ::= { lps6004 7 } 

--
-- the following identifiers are assigned to the LANplex agent versions
--

lanplex-2500-2          OBJECT IDENTIFIER ::= { lps2500 2 }
lanplex-2500-3          OBJECT IDENTIFIER ::= { lps2500 3 }
lanplex-2500-4          OBJECT IDENTIFIER ::= { lps2500 4 }
lanplex-2500-5          OBJECT IDENTIFIER ::= { lps2500 5 }
lanplex-2500-6          OBJECT IDENTIFIER ::= { lps2500 6 }

linkSwitch-2200-2       OBJECT IDENTIFIER ::= { lss2200 2 }
linkSwitch-2200-3       OBJECT IDENTIFIER ::= { lss2200 3 }
linkSwitch-2200-4       OBJECT IDENTIFIER ::= { lss2200 4 }
linkSwitch-2200-5       OBJECT IDENTIFIER ::= { lss2200 5 }
linkSwitch-2200-6       OBJECT IDENTIFIER ::= { lss2200 6 }

lanplex-2016-2          OBJECT IDENTIFIER ::= { lps2016 2 }
lanplex-2016-3          OBJECT IDENTIFIER ::= { lps2016 3 }
lanplex-2016-4          OBJECT IDENTIFIER ::= { lps2016 4 }
lanplex-2016-5          OBJECT IDENTIFIER ::= { lps2016 5 }
lanplex-2016-6          OBJECT IDENTIFIER ::= { lps2016 6 }

linkSwitch-2200-SS2-7       OBJECT IDENTIFIER ::= { lss2200SS2 7 }

lanplex-6012-System-2   OBJECT IDENTIFIER ::= { lps6012System 2 }
lanplex-6012-System-3   OBJECT IDENTIFIER ::= { lps6012System 3 }
lanplex-6012-System-4   OBJECT IDENTIFIER ::= { lps6012System 4 }
lanplex-6012-System-5   OBJECT IDENTIFIER ::= { lps6012System 5 }
lanplex-6012-System-6   OBJECT IDENTIFIER ::= { lps6012System 6 }

lanplex-6012-Chassis-2  OBJECT IDENTIFIER ::= { lps6012Chassis 2 }
lanplex-6012-Chassis-3  OBJECT IDENTIFIER ::= { lps6012Chassis 3 }
lanplex-6012-Chassis-4  OBJECT IDENTIFIER ::= { lps6012Chassis 4 }
lanplex-6012-Chassis-5  OBJECT IDENTIFIER ::= { lps6012Chassis 5 }
lanplex-6012-Chassis-6  OBJECT IDENTIFIER ::= { lps6012Chassis 6 }

lanplex-6012-ESM-2      OBJECT IDENTIFIER ::= { lps6012ESM 2 }
lanplex-6012-ESM-3      OBJECT IDENTIFIER ::= { lps6012ESM 3 }
lanplex-6012-ESM-4      OBJECT IDENTIFIER ::= { lps6012ESM 4 }
lanplex-6012-ESM-5      OBJECT IDENTIFIER ::= { lps6012ESM 5 }
lanplex-6012-ESM-6      OBJECT IDENTIFIER ::= { lps6012ESM 6 }

lanplex-6012-EFSM-2     OBJECT IDENTIFIER ::= { lps6012EFSM 2 }
lanplex-6012-EFSM-3     OBJECT IDENTIFIER ::= { lps6012EFSM 3 }
lanplex-6012-EFSM-4     OBJECT IDENTIFIER ::= { lps6012EFSM 4 }
lanplex-6012-EFSM-5     OBJECT IDENTIFIER ::= { lps6012EFSM 5 }
lanplex-6012-EFSM-6     OBJECT IDENTIFIER ::= { lps6012EFSM 6 }

lanplex-6012-TRSM-5     OBJECT IDENTIFIER ::= { lps6012TRSM 5 }
lanplex-6012-TRSM-6     OBJECT IDENTIFIER ::= { lps6012TRSM 6 }

lanplex-6012-TMM-6      OBJECT IDENTIFIER ::= { lps6012TMM 6 }

lanplex-6012-FSM-7      OBJECT IDENTIFIER ::= { lps6012FSM 7 }

lanplex-6004-System-2   OBJECT IDENTIFIER ::= { lps6004System 2 }
lanplex-6004-System-3   OBJECT IDENTIFIER ::= { lps6004System 3 }
lanplex-6004-System-4   OBJECT IDENTIFIER ::= { lps6004System 4 }
lanplex-6004-System-5   OBJECT IDENTIFIER ::= { lps6004System 5 }
lanplex-6004-System-6   OBJECT IDENTIFIER ::= { lps6004System 6 }

lanplex-6004-Chassis-2  OBJECT IDENTIFIER ::= { lps6004Chassis 2 }
lanplex-6004-Chassis-3  OBJECT IDENTIFIER ::= { lps6004Chassis 3 }
lanplex-6004-Chassis-4  OBJECT IDENTIFIER ::= { lps6004Chassis 4 }
lanplex-6004-Chassis-5  OBJECT IDENTIFIER ::= { lps6004Chassis 5 }
lanplex-6004-Chassis-6  OBJECT IDENTIFIER ::= { lps6004Chassis 6 }

lanplex-6004-ESM-2      OBJECT IDENTIFIER ::= { lps6004ESM 2 }
lanplex-6004-ESM-3      OBJECT IDENTIFIER ::= { lps6004ESM 3 }
lanplex-6004-ESM-4      OBJECT IDENTIFIER ::= { lps6004ESM 4 }
lanplex-6004-ESM-5      OBJECT IDENTIFIER ::= { lps6004ESM 5 }
lanplex-6004-ESM-6      OBJECT IDENTIFIER ::= { lps6004ESM 6 }

lanplex-6004-EFSM-2     OBJECT IDENTIFIER ::= { lps6004EFSM 2 }
lanplex-6004-EFSM-3     OBJECT IDENTIFIER ::= { lps6004EFSM 3 }
lanplex-6004-EFSM-4     OBJECT IDENTIFIER ::= { lps6004EFSM 4 }
lanplex-6004-EFSM-5     OBJECT IDENTIFIER ::= { lps6004EFSM 5 }
lanplex-6004-EFSM-6     OBJECT IDENTIFIER ::= { lps6004EFSM 6 }

lanplex-6004-TRSM-5     OBJECT IDENTIFIER ::= { lps6004TRSM 5 }
lanplex-6004-TRSM-6     OBJECT IDENTIFIER ::= { lps6004TRSM 6 }

lanplex-6004-TMM-6     OBJECT IDENTIFIER ::= { lps6004TMM 6 }

lanplex-6004-FSM-7     OBJECT IDENTIFIER ::= { lps6004FSM 7 }

--
-- the following identifier are assigned to the LANplex MIB modules
--

lanplexSystemsMib       OBJECT IDENTIFIER ::= { lanplex 4 }
lanplexOptFddi          OBJECT IDENTIFIER ::= { lanplex 10 }

--
-- the following identifiers are assigned to Centrum products
--     (SysOID 1.3.6.1.4.1.327)  
--

centrum        OBJECT IDENTIFIER ::= { enterprises 327 }
mibDoc         OBJECT IDENTIFIER ::= { centrum 1 }
centrumRemote  OBJECT IDENTIFIER ::= { mibDoc 1 }

--
-- for the older ISOLAN equipment
--

bicc            OBJECT IDENTIFIER ::= { enterprises 170 }
bdn             OBJECT IDENTIFIER ::= { bicc 1 }
bdnDevices      OBJECT IDENTIFIER ::= { bdn 1 }

--
-- Power Supplies
--

rpsIIMgmtModule OBJECT IDENTIFIER ::= { powerSupplies 1 }

--
-- Transcend Enterprise Manager
--

watchModule     OBJECT IDENTIFIER ::= { transcendEnterpriseMgr 1 }

END       

C-PRODUCT-GROUP-MIB DEFINITIONS ::= BEGIN

-- IMPORTS enterprises FROM RFC1155-SMI;
IMPORTS atmAccess   FROM A3Com-products-MIB;

config      OBJECT IDENTIFIER ::= { atmAccess 1 }
access9600  OBJECT IDENTIFIER ::= { atmAccess 2 }
access9300  OBJECT IDENTIFIER ::= { atmAccess 3 }
access9100  OBJECT IDENTIFIER ::= { atmAccess 4 }
mojave      OBJECT IDENTIFIER ::= { atmAccess 5 }

c-product   OBJECT IDENTIFIER ::= { config 1  }

-- groups in CS600
-- all enterprise-specific groups in cs600 are defined here

sys         OBJECT IDENTIFIER ::= { c-product 1  }
shelf       OBJECT IDENTIFIER ::= { c-product 2  }
card        OBJECT IDENTIFIER ::= { c-product 3  }
port        OBJECT IDENTIFIER ::= { c-product 4  }
circuit     OBJECT IDENTIFIER ::= { c-product 5  }
fault       OBJECT IDENTIFIER ::= { c-product 6  }

ds3card     OBJECT IDENTIFIER ::= { c-product 11 }
qsim        OBJECT IDENTIFIER ::= { c-product 12 }
e3card      OBJECT IDENTIFIER ::= { c-product 13 }
hssicard    OBJECT IDENTIFIER ::= { c-product 14 }
cbr    	    OBJECT IDENTIFIER ::= { c-product 15 }
oc3card	    OBJECT IDENTIFIER ::= { c-product 16 }
enetcard    OBJECT IDENTIFIER ::= { c-product 17 }
mcpu        OBJECT IDENTIFIER ::= { c-product 18 }
ima         OBJECT IDENTIFIER ::= { c-product 19 }
ctx         OBJECT IDENTIFIER ::= { c-product 20 }

END
C-PRODUCT-BASE-MIB DEFINITIONS ::= BEGIN


IMPORTS
        sys, shelf, card, port, circuit, fault  FROM C-PRODUCT-GROUP-MIB
        IpAddress                               FROM RFC1155-SMI
        DisplayString, PhysAddress              FROM RFC1213-MIB
        OBJECT-TYPE                             FROM RFC-1212;


-- This data type is used to define time and date

TimeAndDate ::= OCTET STRING (SIZE(6..6))

-- It is composed of 6 data bytes defined as follows:
--
-- byte 1 - year   (0..99)
-- byte 2 - month  (1..12)
-- byte 3 - day    (1..31)
-- byte 4 - hour   (0..23)
-- byte 5 - minute (0..59)
-- byte 6 - second (0..59)

-- This data type is used to define the supported card types

CardType ::= INTEGER { none             (1),   -- no card
                       mcpu             (2),   -- management cpu card
                       ds3              (3),   -- ds3 card
                       ether            (4),   -- ethernet card
                       ctx              (5),   -- ctx card
                       oc3              (6),   -- oc3 card
                       backplane        (7),   -- backplane card (not supported)
                       hssi             (8),   -- hssi card
                       cbr-dsx-4        (9),   -- 4 port cbr dsx card
                       cbr-e1-4         (11),  -- 4 port cbr e1 card
                       cbr-dsx-8        (12),  -- 8 port cbr dsx card
                       cbr-e1-8         (14),  -- 8 port cbr e1 card
                       unknown          (15),  -- undefined card type
                       v-35-qsim        (16),  -- v.35 serial if module
                       rs-422-qsim      (17),  -- rs-422 serial if module
                       hsim             (18),  -- hssi if module
                       e3               (19),  -- e3 card
                       ima-dsx-8        (20),  -- 4 port ima dsx card
                       ima-csu-8        (21),  -- 4 port ima csu card
                       ima-e1-8         (22),  -- 4 port ima e1 card
                       ima-dsx-4        (23),  -- 8 port ima dsx card
                       ima-csu-4        (24),  -- 8 port ima csu card
                       ima-e1-4         (25),  -- 8 port ima e1 card
                       fam-csu-8        (26),  -- 8 port ima e1 card
                       ctx-plus         (27),  -- 8 port ima e1 card
                       fam-dsx-8        (28),  -- 8 port ima e1 card
                       fam-e1-8         (29),  -- 8 port ima e1 card
                       mojave-backplane (30),  -- Mojave backplane
                       ima-4-9300       (31),  -- AB9300 ima card
                       cbr-dsx-3-v35    (32),  -- 3 port/V35 cbr dsx card
                       cbr-csu-3-v35    (33),  -- 3 port/V35 cbr csu card 
                       cbr-e1-3-v35     (34),  -- 3 port/V35 E1 card
                       cbr-dsx-4-9300   (35),  -- 4 port cbr dsx card
                       cbr-csu-4-9300   (36),  -- 4 port cbr csu card 
                       cbr-e1-4-9300    (37),  -- 4 port E1 card
                       ctx-9300         (38)   -- AB9300 ctx card
                     } 

-- This data type is used to define the admin. and oper. status of a hardware
-- component (e.g. port card, trunk card, power supply, etc.)

AdminStatus ::= INTEGER { out-of-service (1),
                          in-service     (2) }

PortOperStatus ::= INTEGER { out-of-service (1),
                             in-service     (2),
                             no-response    (3),
                             coming-up      (4),
                             coming-down    (5),
                             status-failed  (6) }

CardOperStatus ::= INTEGER { out-of-service (1),
                             in-service     (2),
                             failed         (6) }
 
CardShelfState ::= INTEGER { empty          (1),
                             missing        (2),
                             match          (3),
                             mismatch       (4),
                             invalid        (5),
                             hwrev-mismatch (6) }

VcpPacketDiscard ::= INTEGER { pkt-no             (1),
                               pkt-yes            (2) }
 
-- This data type is used to define alarms types

AlarmType ::= INTEGER { los                  (1),  -- loss of signal
                        oof                  (2),  -- out of frame
                        ais                  (3),  -- alarm indication signal
                        idle                 (4),  -- idle signal
                        ferf                 (5),  -- far end rx failure
                        lcd                  (6),  -- loss of cell delineation
                        vp-ais               (7),  -- virtual path ais
                        vc-ais               (8),  -- virtual channel ais
                        upload-image-missing (9),  -- no upload image found
                        card-reconf-ok       (10), -- card reconfig. succeeded
                        unknown-db-card-type (11), -- unknown card type in DB
                        card-reconf-fail     (12), -- card reconfig. failed
                        card-mismatch        (13), -- card type mismatched
                        new-card-conf-ok     (14), -- new card config. succeeded
                        card-conf-fail       (15), -- card config. failed
                        unknown-card-type    (16), -- unknown card type
                        card-removed         (17), -- card prematurely remvd
                        download-fail        (18), -- download card image failed
                        ps1-missing          (19), -- left power supply absent
                        ps2-missing          (20), -- right power supply absent
                        ps1-fail             (21), -- left power supply failed
                        ps2-fail             (22), -- right power supply failed
                        relay-fuse-fail      (23), -- relay power fuse failed
                        comm-fail            (24), -- communication failed
                        fan1-fail            (25), -- fan 1 failed
                        fan2-fail            (26), -- fan 2 failed
                        fan3-fail            (27), -- fan 3 failed
                        fan4-fail            (28), -- fan 4 failed
                        feac-lpbk            (29), -- feac loopback
                        ntwk-line-lpbk       (30), -- network line loopback
                        card-lpbk            (31), -- card loopback
                        cell-lpbk            (32), -- cell line loopback
                        card-missing         (33), -- card not installed
                        card-inited          (34), -- card initialized
                        cellbus-parity-fail  (35), -- cellbus parity failed
                        rx-fifo-overflow     (36), -- rx fifo overflow
                        tx-fifo-overflow     (37), -- tx fifo overflow
                        lp-cellbus-congest   (38), -- lp cellbus congested
                        mp-cellbus-congest   (39), -- mp cellbus congested
                        hp-cellbus-congest   (40), -- hp cellbus congested
                        prom-checksum-fail   (43), -- prom checksum error
                        sram-0-fail          (44), -- bank 0 sram failed
                        sram-1-fail          (45), -- bank 1 sram failed
                        sar-sram-fail        (46), -- sar sram failed
                        hdlc-sram-fail       (47), -- hdlc sram failed
                        mailbox-sram-fail    (48), -- mailbox sram failed
                        cellbus-xilink-fail  (49), -- cellbus xilinx failed
                        prt01-xlnk-fail      (50), -- prt01 xlnx prg failed
                        prt23-xlnk-fail      (51), -- prt23 xlnx prg failed
                        prt45-xlnk-fail      (52), -- prt45 xlnx prg failed
                        prt67-xlnk-fail      (53), -- prt67 xlnx prg failed
                        sar-xlnk-fail        (54), -- sAR xlnk prg failed
                        port-lpbk-pseudo-fail(55), -- port lpbk pseudo-failure
                        e1-slot16-ais        (56), -- e1 time slot16 ais
                        e1-loss-cas-multifrm (57), -- e1 loss of cas multiframe
                        fe-e1-loss-cas       (58), -- far end e1 loss of cas
                        port-yellow          (61), -- port yellow
                        port-ais             (62), -- port ais
                        vc-rdi               (64), -- vc rdi
                        local-card-lpbk      (65), -- local card loopback
                        intern-refclk-fail   (66), -- internal ref. clk. failed
                        bits-refclk-fail     (67), -- bits ref. clk. failed
                        cbr-refclk-fail      (68), -- cbr ref. clk. failed
                        plcp-refclk-fail     (69), -- plcp ref. clk. failed
                        loss-of-clock        (70), -- loss of clock
                        remote-lpbk          (71), -- remote loopback
                        oc3-refclk-missing   (73), -- oc3 ref. clk. failed
                        power-up             (75), -- system power up
                        loss-cell-del        (77), -- ima loss Cell Delin    
                        loss-ima-frame       (78), -- ima loss of IMA Frame
                        loss-diff-sync       (79), -- ima loss of Diff Sync
                        dup-id               (80), -- ima Duplicate ID
                        bad-ima-id           (81), -- ima bad ID
                        bad-ima-M-value      (82), -- ima bad M value
                        dup-link-id          (83), -- ima duplicate Link ID
                        dup-offset           (84), -- ima duplicate offset
                        test-pattern-fail    (85), -- ima test Pattern failed
                        bad-link-id          (86), -- ima bad link ID
                        bad-offset           (87), -- ima bad offset
                        fe-no-links          (88), -- ima group far End no link
                        fe-bad-M             (89), -- ima group far End bad M
                        fe-group-error       (90), -- ima group far End error
                        fe-los-of-signal     (91), -- ima far end LOS
                        fe-out-of-frame      (92), -- ima far end OOF
                        fe-loss-cell-del     (93), -- ima far end LCD
                        fe-loss-of-frame     (94), -- ima lof
                        fe-loss-diff-sync    (95), -- ima loss Diff Sync
                        fe-misconnected      (96), -- ima misconnected
                        alarm-cleared       (102), -- alarm cleared
                        history-overflow    (103), -- history overflow
                        afa-link-removal    (104), -- AFA link removal
                        lmi-link-down       (105), -- LMI link down
                        link-delay          (106), -- Excessive Link Delay
                        group-no-link       (107), -- group no link
                        group-degraded      (108), -- group Degraded Service
                        group-sync-failed   (109), -- group Sync Failure 
                        sar-init-failure    (110) } -- SAR Initialize Failure

-- This data type is used to define VC types supported by the management
-- CPU and port cards.

VcpLinkType ::= INTEGER { 
                     vc-invalid(1),        -- Invalid 
                     vc-regular(2),        -- regular 
                     vc-multicast(3),      -- Multi cast 
                     vc-management(4),     -- Management 
                     vc-leaf(5)            -- Leaf 
		   }

VcFamilyCardType ::= INTEGER { 
 		     cardFamNone(1),       -- No family 
                     cardFamMCPU(2),       -- MCPU 
                     cardFamCTX(3),        -- CTX 
                     cardFamOC3(4),        -- OC3
                     cardFamDS3(5),        -- DS3  
                     cardFamE3(6),         -- E3
                     cardFamQSIM(7),       -- QSIM
                     cardFamFAM(8),        -- FAM
                     cardFamENET(9),       -- ENET 
                     cardFamHSSI(10),      -- HSSI 
                     cardFamCBR(11),       -- CBR
                     cardFamIMA(12),       -- IMA
                     cardFamBackplane(13)  -- backplane 
	     	  }


-- sys (system administration) group

-- general system information

sysGenInfo  OBJECT IDENTIFIER ::= { sys 1 }

sysGenInfoShelfName OBJECT-TYPE
    SYNTAX  DisplayString (SIZE(0..16))
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Name of the managed node."
    ::= { sysGenInfo 1 }

sysGenInfoCustomerName OBJECT-TYPE
    SYNTAX  DisplayString (SIZE(0..32))
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Name of the organization that uses the managed node."
    ::= { sysGenInfo 2 }

sysGenInfoPhoneNumber OBJECT-TYPE
    SYNTAX  DisplayString (SIZE(0..32))
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Phone number of the organization that uses
             the managed node."
    ::= { sysGenInfo 3 }

sysGenInfoMaintenanceContact OBJECT-TYPE
    SYNTAX  DisplayString (SIZE(0..32))
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Maintenance contact of the managed node."
    ::= { sysGenInfo 4 }

sysGenInfoLocation OBJECT-TYPE
    SYNTAX  DisplayString (SIZE(0..32))
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Location of the managed node."
    ::= { sysGenInfo 5 }

sysGenInfoAutoLogoutTime OBJECT-TYPE
    SYNTAX  INTEGER (1..99)
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "The time a TELNET or VT-100 terminal user can maintain
             a session with the managed node without any keyboard
             action.  Unit: minute"
    DEFVAL  { 10 }
    ::= { sysGenInfo 6 }

sysGenInfoPassword OBJECT-TYPE
    SYNTAX  OCTET STRING (SIZE(0..16))
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Password required to access the managed node using
             VT-100 terminal or TELNET.  A get request always
             returns a NULL string."
    DEFVAL  { "password" }
    ::= { sysGenInfo 7 }

sysGenCurrentCodeRelease OBJECT-TYPE
    SYNTAX  DisplayString
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Firmware revision of the current code running in the
             managed node."
    ::= { sysGenInfo 8 }


-- Time and Date

sysTimeAndDate OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Time and date maintained in the managed node."
    ::= { sys 2 }

-- IP Network Configuration

sysIpConfig  OBJECT IDENTIFIER ::= { sys 3 }

-- local host subgroup
--
-- The objects in this subgroup includes the information
-- required by the SNMP managers or TELENT clients to
-- communicate with the SNMP agent and TELNET server in
-- the managed node.
--

sysIpConfigLocalHost OBJECT IDENTIFIER ::= { sysIpConfig 1 }

sysIpConfigLocalHostCommunityName OBJECT-TYPE
    SYNTAX  DisplayString (SIZE(0..64))
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Community name of the managed node.  A get
             request always returns a NULL string."
    DEFVAL  { "private" }
    ::= { sysIpConfigLocalHost 1 }

sysIpConfigLocalHostIpAddress OBJECT-TYPE
    SYNTAX  IpAddress
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Local host's Ethernet IP address."
    ::= { sysIpConfigLocalHost 2 }

sysIpConfigLocalHostSubnetMask OBJECT-TYPE
    SYNTAX  IpAddress
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Local host's Ethernet IP subnet mask."
    ::= { sysIpConfigLocalHost 3 }

sysIpConfigLocalHostMacAddress OBJECT-TYPE
    SYNTAX  PhysAddress
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Local host's Ethernet MAC-layer address."
    ::= { sysIpConfigLocalHost 4 }

-- trap gateway subgroup
--
-- The objects in this subgroup are required when there
-- are trap clients not directly reachable by the managed
-- node.  It requires a trap gateway to route the SNMP
-- trap messages to the trap clients (SNMP managers).
--

sysIpConfigTrapGateway OBJECT IDENTIFIER ::= { sysIpConfig 2 }

sysIpConfigTrapGatewayIpAddress OBJECT-TYPE
    SYNTAX  IpAddress
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Trap gateway's IP address."
    DEFVAL { '00000000'h }
    ::= { sysIpConfigTrapGateway 1 }

sysIpConfigTrapGatewaySubnetMask OBJECT-TYPE
    SYNTAX  IpAddress
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Trap gateway's IP subnet mask."
    DEFVAL  { '00000000'h }
    ::= { sysIpConfigTrapGateway 2 }

-- trap client table
--
-- Each entry in the table contains the information of an SNMP
-- trap client which receives SNMP traps from the SNMP agent in
-- the managed node.
--

sysIpConfigTrapClientTable OBJECT-TYPE
    SYNTAX  SEQUENCE OF SysIpConfigTrapClientEntry
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "Trap client table has 4 entries"
    ::= { sysIpConfig 3 }

sysIpConfigTrapClientEntry OBJECT-TYPE
    SYNTAX  SysIpConfigTrapClientEntry
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "Each entry contains IP address and port number of
             an SNMP manager which receives traps from the
             managed node."
    INDEX   { sysIpConfigTrapClientIndex }
    ::= { sysIpConfigTrapClientTable 1 }

SysIpConfigTrapClientEntry ::=
    SEQUENCE {
        sysIpConfigTrapClientIndex
            INTEGER,
        sysIpConfigTrapClientIpAddress
            IpAddress,
        sysIpConfigTrapClientSubnetMask
            IpAddress,
        sysIpConfigTrapClientPortNumber
            INTEGER
    }

sysIpConfigTrapClientIndex OBJECT-TYPE
    SYNTAX  INTEGER (1..4)
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            ""
    ::= { sysIpConfigTrapClientEntry 1 }

sysIpConfigTrapClientIpAddress OBJECT-TYPE
    SYNTAX  IpAddress
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Trap client's IP address."
    DEFVAL  { '00000000'h }
    ::= { sysIpConfigTrapClientEntry 2 }

sysIpConfigTrapClientSubnetMask OBJECT-TYPE
    SYNTAX  IpAddress
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Trap client's IP subnet mask."
    DEFVAL  { '00000000'h }
    ::= { sysIpConfigTrapClientEntry 3 }

sysIpConfigTrapClientPortNumber OBJECT-TYPE
    SYNTAX  INTEGER
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Trap client's port number."
    DEFVAL  { 162 }
    ::= { sysIpConfigTrapClientEntry 4 }

-- RS232 Ports Configuration

sysRs232Table OBJECT-TYPE
    SYNTAX  SEQUENCE OF SysRs232Entry
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
        "This table contains 2 rows.  The first row shows the physical
         configuration of the port connected to a VT100 termianl.  The
         second row is used to configure the port which supports SLIP.
         Access to the first row is read-only and access to the second
         row is read-write."
    ::= { sys 4 }

sysRs232Entry OBJECT-TYPE
    SYNTAX  SysRs232Entry
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "Each entry contains the attributes of a serial port."
    INDEX   { sysRs232Port }
    ::= { sysRs232Table 1 }

SysRs232Entry ::=
    SEQUENCE {
        sysRs232Port
            INTEGER,
        sysRs232BaudRate
            INTEGER,
        sysRs232Parity
            INTEGER,
        sysRs232DataBits
            INTEGER,
        sysRs232StopBits
            INTEGER
    }

sysRs232Port OBJECT-TYPE
    SYNTAX  INTEGER { port-1 (1),
                      port-2 (2) }
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "The managed node has 2 serial ports: port 1 and port 2."
    ::= { sysRs232Entry 1 }

sysRs232BaudRate OBJECT-TYPE
    SYNTAX  INTEGER { br-300   (1),
                      br-1200  (2),
                      br-2400  (3),
                      br-4800  (4),
                      br-9600  (5),
                      br-19200 (6),
                      br-38400 (7) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Baud rate.  The instance of this object in port-1
             is read-only."
    DEFVAL { br-9600 }
    ::= { sysRs232Entry 2 }

sysRs232Parity OBJECT-TYPE
    SYNTAX  INTEGER { none (1),
                      even (2),
                      odd  (3) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Parity.  The instance of this object in port-1 is
             read-only."
    DEFVAL { none }
    ::= { sysRs232Entry 3 }

sysRs232DataBits OBJECT-TYPE
    SYNTAX  INTEGER { db-7 (1),
                      db-8 (2) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Number of data bits.  The instance of this object
             in port-1 is read-only."
    DEFVAL { db-8 }
    ::= { sysRs232Entry 4 }

sysRs232StopBits OBJECT-TYPE
    SYNTAX  INTEGER { sb-1 (1),
                      sb-2 (2) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Number of stop bits.  The instance of this object
             in port-1 is read-only."
    DEFVAL { sb-1 }
    ::= { sysRs232Entry 5 }

-- System Reference Clock
 
sysRefClock OBJECT-TYPE
    SYNTAX  INTEGER { no-clock         (1),
                      internal-default (2),
                      internal         (3),
                      bits             (4),
                      slot-3           (5),
                      slot-4           (6),
                      slot-5           (7),
                      slot-6           (8),
                      slot-7           (9),
                      slot-8           (10),
                      slot-9           (11) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "System reference clock maintained in the managed node."
    ::= { sys 5 }
 

sysProductType OBJECT-TYPE
    SYNTAX  INTEGER { no-product (1),
                      ab9600     (2),
                      ab9300     (3),
                      ab9100     (4),
                      mojave     (5) }
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "System Product Type contain type of product."
    ::= { sys 6 }

-- shelf group

shelfSerialNumber OBJECT-TYPE
    SYNTAX OCTET STRING (SIZE(10..10))
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Serial number of the shelf." 
    ::= { shelf 1 }

shelfRevision OBJECT-TYPE
    SYNTAX OCTET STRING (SIZE(1..1))
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Hardware revision number of the shelf." 
    ::= { shelf 2 }

shelfPowerSupplyTable OBJECT-TYPE
    SYNTAX SEQUENCE OF ShelfPowerSupplyEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The power supply table in the shelf."
    ::= { shelf 3 }

shelfPowerSupplyEntry OBJECT-TYPE
    SYNTAX ShelfPowerSupplyEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information of the power supply in the shelf."
    INDEX { shelfPowerSupplySlot }
    ::= { shelfPowerSupplyTable 1 }

ShelfPowerSupplyEntry ::=
    SEQUENCE {
        shelfPowerSupplySlot
            INTEGER,
        shelfPowerSupplyAdminStatus
            AdminStatus,
        shelfPowerSupplyOperStatus
            INTEGER
    }

shelfPowerSupplySlot OBJECT-TYPE
    SYNTAX INTEGER { slot-1 (1),  -- left power supply
                     slot-2 (2) } -- right power supply
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Slot number of the power supply." 
    ::= { shelfPowerSupplyEntry 1 }

shelfPowerSupplyAdminStatus OBJECT-TYPE
    SYNTAX AdminStatus
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Administrative status."
    DEFVAL { in-service }
    ::= { shelfPowerSupplyEntry 2 }

shelfPowerSupplyOperStatus OBJECT-TYPE
    SYNTAX INTEGER { out-of-service (1),
                     in-service     (2),
                     missing        (3) }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Operational status for Power Supply. In AB9300/AB9100, it
	     doesn't support any setting value.
	    "
    ::= { shelfPowerSupplyEntry 3 }

shelfPartNumber OBJECT-TYPE
    SYNTAX OCTET STRING (SIZE(1..1))
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Part number of the shelf."
    ::= { shelf 4 }

-- card group

-- this group includes the objects common to all supported cards

cardBaseTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CardBaseEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "A 6 entry card table in the shelf."
    ::= { card 1 }

cardBaseEntry OBJECT-TYPE
    SYNTAX CardBaseEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Each card entry contains objects that refer to the
             card in that entry."
    INDEX { cardSlot }
    ::= { cardBaseTable 1}

CardBaseEntry ::=
    SEQUENCE {
        cardSlot
            INTEGER,
        cardTypeDb
            CardType,
        cardTypeHw
            CardType,
        cardAdminStatus
            AdminStatus,
        cardOperStatus
            CardOperStatus,
        cardSerialNumber
            OCTET STRING,
        cardRevision
            OCTET STRING,
        cardPartNumber
            DisplayString,
        cardReset
            INTEGER,
        cardShelfState
            CardShelfState 
    }

cardSlot OBJECT-TYPE
    SYNTAX INTEGER (1..6)
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Slot number of the card in the shelf.  The assignment of the
             card slots is as follows:
                 slot 1  : management cpu,
                 slot 2  : ctx card,
                 slot 3  : one of the trunk cards (e.g. ds3/oc3/e3/hssi),
                 slot 4-6: one of the port cards (e.g. ether/cbr/qsim)."
    ::= { cardBaseEntry 1 }

cardTypeDb OBJECT-TYPE
    SYNTAX CardType
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "The configured card type in the slot.  It may differ from
             the actual card type (cardTypeHw) in the corresponding
             slot.  A set request will be accepted only when one of the
             following is true:

             1.  the value of cardTypeHw in this slot is none, or
             2.  the new value of cardTypeDb is the same as the
                 corresponding cardTypeHw.
            "
    ::= { cardBaseEntry 2 }

cardTypeHw OBJECT-TYPE
    SYNTAX CardType
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "The actual card type in the slot."
    ::= { cardBaseEntry 3 }

cardAdminStatus OBJECT-TYPE
    SYNTAX AdminStatus
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Administrative status of the card.  An error is returned if this
             slot has been selected as the system reference clock and an
             attempt is made to change this object to out-of-service.  This
             object does not apply to management cpu and ctx card."
    DEFVAL { in-service }
    ::= { cardBaseEntry 4 }

cardOperStatus OBJECT-TYPE
    SYNTAX CardOperStatus
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Operational status of the card."
    ::= { cardBaseEntry 5 }

cardSerialNumber OBJECT-TYPE
    SYNTAX OCTET STRING (SIZE(10..10))
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Serial number of the card."
    ::= { cardBaseEntry 6 }

cardRevision OBJECT-TYPE
    SYNTAX OCTET STRING (SIZE(1..1))
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Hardware revision number of the card."
    ::= { cardBaseEntry 7 }

cardPartNumber OBJECT-TYPE
    SYNTAX DisplayString
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Part number of the card."
    ::= { cardBaseEntry 8 }

cardReset OBJECT-TYPE
    SYNTAX  INTEGER { reset (1) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This is the command to reset the card at the specified 
             slot number. A read request always returns 0.
             Warning: Reseting card will temporarily disrupt traffic on 
             the specified slot number."
    ::= { cardBaseEntry 9 }

cardShelfState OBJECT-TYPE
    SYNTAX CardShelfState
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Operational shelf state of the card."
    ::= { cardBaseEntry 10 }

-- port group

-- this group includes the objects common to all port/trunk card's ports.
-- this table does not apply to management cpu and ctx card.

portBaseTable OBJECT-TYPE
    SYNTAX SEQUENCE OF PortBaseEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The port information table."
    ::= { port 1 }

portBaseEntry OBJECT-TYPE
    SYNTAX PortBaseEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Each port entry contains objects that refer to the
             port in that entry."
    INDEX { portSlot, portNumber }
    ::= { portBaseTable 1 }

PortBaseEntry ::=
    SEQUENCE {
        portSlot
            INTEGER,
        portNumber
            INTEGER,
        portAdminStatus
            AdminStatus,
        portOperStatus
            PortOperStatus,
        portIfIndex
            INTEGER
    }

portSlot OBJECT-TYPE
    SYNTAX INTEGER (3..6)
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Slot Number.  This table does not have objects for
             management cpu (slot #1) and ctx card (slot #2)."
    ::= { portBaseEntry 1 }

portNumber OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Port number.  The number of ports in each card
             depends on the type of card in that slot.  Following
             is a list of cards and the port range of that cards:

                 card type   port range
                 ----------- ----------
                 ds3            1..1
                 ether          1..2
                 oc3            1..1
                 hssi           1..1
                 cbr-dsx-4      1..4
                 cbr-e1-4       1..4
                 cbr-dsx-8      1..8
                 cbr-e1-8       1..8
                 v-35-qsim      1..4
                 rs-422-qsim    1..4
                 hssi-qsim      1..1
                 e3             1..1"
    ::= { portBaseEntry 2 }

portAdminStatus OBJECT-TYPE
    SYNTAX AdminStatus
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Administrative status of the port.  An error is returned if this
             port has been selected as the system reference clock and an
             attempt is made to change this object to out-of-service."
    DEFVAL { out-of-service }
    ::= { portBaseEntry 3 }

portOperStatus OBJECT-TYPE
    SYNTAX PortOperStatus
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Operational status of the port." 
    ::= { portBaseEntry 4 }

portIfIndex OBJECT-TYPE
    SYNTAX INTEGER (1..57)
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Currently this object applies to the interface ports
             in port cards ONLY.  It is pre-assigned as following:

                 slot      range

                   3        1..8
                   4        9..16
                   5       17..24
                   6       25..32
		   7       33..40
		   8       41..48
		   9       49..57
             "
    ::= { portBaseEntry 5 }

-- virtual circuit table

-- Multi/Non-multi cast virtual circuit Path table

vcpNextAvailGlobVcSideId OBJECT-TYPE
     SYNTAX INTEGER (0..2147483647)
     ACCESS read-only
     STATUS mandatory
     DESCRIPTION
          "This unique value which identified the next available
           virtual circuit ID.  It is allowed NMS manager to get
           the next available Virtual Circuit Id before created
           a new row into Virtual circuit Path Table."
     ::= { circuit 2 }

vcpBaseTable OBJECT-TYPE
    SYNTAX SEQUENCE OF VcpBaseEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The base virtual circuit table contains the common 
             information for both sides of circuit."
    ::= { circuit 3 }

vcpBaseEntry OBJECT-TYPE
    SYNTAX VcpBaseEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information of the base virtual circuit." 
    INDEX { vcpSideAId, vcpSideBId }
    ::= { vcpBaseTable 1 }

VcpBaseEntry ::=
    SEQUENCE {
        vcpSideAId
            INTEGER,
        vcpSideBId
            INTEGER,
        vcpLinkType
            VcpLinkType,
        vcpDescription
            DisplayString,
        vcpAdminStatus
            AdminStatus,
        vcpRowStatus
            INTEGER
    }


vcpSideAId OBJECT-TYPE
    SYNTAX INTEGER (0..2147483647)
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "A unique value which identifies the SideA of circuit."
    ::= { vcpBaseEntry 1 }

vcpSideBId OBJECT-TYPE
    SYNTAX INTEGER (0..2147483647)
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "A unique value which identifies the SideB of circuit."
    ::= { vcpBaseEntry 2 }

vcpLinkType OBJECT-TYPE
    SYNTAX  VcpLinkType
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Vc Circuit Type indicated whether this circuit is 
             Regular, Multicast, Management, Unicast, leaf."
    ::= { vcpBaseEntry 3 }

vcpDescription OBJECT-TYPE
    SYNTAX  DisplayString (SIZE(0..12))
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "Vc description of circuits."
    DEFVAL { "" }
    ::= { vcpBaseEntry 4 }

vcpAdminStatus OBJECT-TYPE
    SYNTAX AdminStatus
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Vc administrative status."
    DEFVAL { in-service }
    ::= { vcpBaseEntry 5 }

vcpRowStatus OBJECT-TYPE
    SYNTAX  INTEGER { create (1),
                      delete (2) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This object indicates the action to be taken by a set
             request."
    DEFVAL { create }
    ::= { vcpBaseEntry 6 }

-- Multi/Non-multi cast Side Table circuit table

vcpSideTable OBJECT-TYPE
    SYNTAX SEQUENCE OF VcpSideEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The side table contains the Side A or Side B of
             circuit information."
    ::= { circuit 4 }

vcpSideEntry OBJECT-TYPE
    SYNTAX VcpSideEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information of the base virtual circuit." 
    INDEX { vcpSideId }
    ::= { vcpSideTable 1 }

VcpSideEntry ::=
    SEQUENCE {
        vcpSideId
            INTEGER,
        vcpSideSlot
            INTEGER,
        vcpSidePort
            INTEGER,
        vcpSideTransmitVpi
            INTEGER,
        vcpSideTransmitVci
            INTEGER,
        vcpSideReceiveVpi
            INTEGER,
        vcpSideReceiveVci
            INTEGER,
        vcpSidePriority
            INTEGER,
        vcpSidePacketDiscard
            VcpPacketDiscard
    }

vcpSideId OBJECT-TYPE
    SYNTAX INTEGER (0..2147483647)
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "unique number associated with virtual circuit."
    ::= { vcpSideEntry 1 }

vcpSideSlot OBJECT-TYPE
    SYNTAX INTEGER (1..9)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Slot Number.  This table does not have objects for
             ctx card (slot #2) and card (slot #3)."
    ::= { vcpSideEntry 2 }

vcpSidePort OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Port number.  The number of ports in each card
             depends on the type of card in that slot.  Following
             is a list of cards and the port range of that cards:

                 card type   port range
                 ----------- ----------
                 mcpu           1..1
                 ds3            1..1
                 ether          1..2
                 oc3            1..1
                 hssi           1..1
                 cbr-dsx-4      1..4
                 cbr-csu-4      1..4
                 cbr-e1-4       1..4
                 cbr-dsx-8      1..8
                 cbr-csu-8      1..8
                 cbr-e1-8       1..8
                 v-35-qsim      1..4
                 rs-422-qsim    1..4
                 hssi-qsim      1..1
                 e3             1..1"
    ::= { vcpSideEntry 3 }

vcpSideTransmitVpi OBJECT-TYPE
    SYNTAX INTEGER (0..255)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Port card transmit vpi."
    ::= { vcpSideEntry 4 }

vcpSideTransmitVci OBJECT-TYPE
    SYNTAX INTEGER (0..16383)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Port card transmit vci."
    ::= { vcpSideEntry 5 }

vcpSideReceiveVpi OBJECT-TYPE
    SYNTAX INTEGER (0..255)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Port card receive vpi.  The value range 0..255 applies
             when VPI-only translation is requested.  Otherwise, its
             range is 0..15.  If the value of an instance of this
             object is > 15, the value of the corresponding instance
             of vcPortReceiveVci MUST be 0 (VPI-only translation)."
    ::= { vcpSideEntry 6 }

vcpSideReceiveVci OBJECT-TYPE
    SYNTAX INTEGER (0..1023)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Port card receive vci.  If the value of this object is 0,
             VPI-only translation is requested."
    ::= { vcpSideEntry 7 }

vcpSidePriority OBJECT-TYPE
    SYNTAX INTEGER (1..4)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Priority queue is to prioritize the circuit. The 
	     smallest number is the highest priority.  The 
	     largest number is lowest priority.
	    "
    ::= { vcpSideEntry 8 }

vcpSidePacketDiscard OBJECT-TYPE
    SYNTAX VcpPacketDiscard
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Packet Discard indicates whether this packet needs
	     to drop off based on the threshold."
    DEFVAL { pkt-no }
    ::= { vcpSideEntry 9 }

-- Multi/Non-multi cast Mapping Side Table table

vcpMappingSideTable OBJECT-TYPE
    SYNTAX SEQUENCE OF VcpMappingSideEntry
    ACCESS not-accessible 
    STATUS mandatory
    DESCRIPTION
            "The Mapping side table contains circuit Side information."
    ::= { circuit 5 }

vcpMappingSideEntry OBJECT-TYPE
    SYNTAX VcpMappingSideEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information of the base virtual circuit." 
    INDEX { vcpMappingSideSlot, vcpMappingSidePort, 
            vcpMappingSideAId,  vcpMappingSideBId }
    ::= { vcpMappingSideTable 1 }

VcpMappingSideEntry ::=
    SEQUENCE {
        vcpMappingSideSlot
            INTEGER,
        vcpMappingSidePort
            INTEGER,
        vcpMappingSideAId
            INTEGER,
        vcpMappingSideBId
            INTEGER,
        vcpMappingCardType
            CardType,
        vcpMappingFamCardType
            VcFamilyCardType,
        vcpMappingOtherCardType
            CardType,
        vcpMappingOtherFamCardType
           VcFamilyCardType 
    }

vcpMappingSideSlot OBJECT-TYPE
    SYNTAX INTEGER (1..9)
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Slot Number.  This table does not have objects for
             ctx card (slot #2) and card (slot #3)."
    ::= { vcpMappingSideEntry 1 }

vcpMappingSidePort OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Port number.  The number of ports in each card
             depends on the type of card in that slot.  Following
             is a list of cards and the port range of that cards:

                 card type   port range
                 ----------- ----------
                 mcpu           1..1
                 ds3            1..1
                 ether          1..2
                 oc3            1..1
                 hssi           1..1
                 cbr-dsx-4      1..4
                 cbr-csu-4      1..4
                 cbr-e1-4       1..4
                 cbr-dsx-8      1..8
                 cbr-csu-8      1..8
                 cbr-e1-8       1..8
                 v-35-qsim      1..4
                 rs-422-qsim    1..4
                 hssi-qsim      1..1
                 e3             1..1"
    ::= { vcpMappingSideEntry 2 }

vcpMappingSideAId OBJECT-TYPE
    SYNTAX INTEGER (0..2147483647)
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "SideA ID is a unique number associated with virtual circuit."
    ::= { vcpMappingSideEntry 3 }


vcpMappingSideBId OBJECT-TYPE
    SYNTAX INTEGER (0..2147483647)
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "SideB ID is a unique number associated with virtual circuit."
    ::= { vcpMappingSideEntry 4 }

vcpMappingCardType OBJECT-TYPE
    SYNTAX CardType
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "card Type associated with mySide of circuit."
    ::= { vcpMappingSideEntry 5 }

vcpMappingFamCardType OBJECT-TYPE
    SYNTAX VcFamilyCardType 
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Family Card Type associate with mySide of circuit."
    ::= { vcpMappingSideEntry 6 }

vcpMappingOtherCardType OBJECT-TYPE
    SYNTAX CardType
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Other Side of Card Type associate with the circuit."
    ::= { vcpMappingSideEntry 7 }


vcpMappingOtherFamCardType OBJECT-TYPE
    SYNTAX VcFamilyCardType 
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Other Side of Family Card Type associate with the circuit."
    ::= { vcpMappingSideEntry 8 }

-- fault group

faultClearCurrentAlarms OBJECT-TYPE
    SYNTAX  INTEGER
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "A set request clears all entries in the current
             alarm table.  A get/get-next request returns 0."
    ::= { fault 1 }

faultClearHistoryAlarms OBJECT-TYPE
    SYNTAX  INTEGER
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "A set request clears all entries in the history
             alarm table.  A get/get-next request returns 0."
    ::= { fault 2 }


-- current (active) alarm table

faultCurrentAlarmTable OBJECT-TYPE
    SYNTAX  SEQUENCE OF FaultCurrentAlarmEntry
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "Current alarm table."
    ::= { fault 3 }

faultCurrentAlarmEntry OBJECT-TYPE
    SYNTAX  FaultCurrentAlarmEntry
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "Each entry in the table contains the information of
             a currently active alarm."
    INDEX   { faultCurrentAlarmTag }
    ::= { faultCurrentAlarmTable 1 }

FaultCurrentAlarmEntry ::=
    SEQUENCE {
        faultCurrentAlarmTag
            INTEGER,
        faultCurrentAlarmAlarmType
            AlarmType,
        faultCurrentAlarmSeverity
            INTEGER,
        faultCurrentAlarmCardType
            CardType,
        faultCurrentAlarmCardNumber
            INTEGER,
        faultCurrentAlarmPortNumber
            INTEGER,
        faultCurrentAlarmSetTime
            TimeAndDate,
        faultCurrentAlarmDescription
            DisplayString
    }

faultCurrentAlarmTag OBJECT-TYPE
    SYNTAX  INTEGER
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "The tag of the alarm in the current alarm table."
    ::= { faultCurrentAlarmEntry 1 }

faultCurrentAlarmAlarmType OBJECT-TYPE
    SYNTAX  AlarmType 
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Alarm type."
    ::= { faultCurrentAlarmEntry 2 }

faultCurrentAlarmSeverity OBJECT-TYPE
    SYNTAX  INTEGER { minor (2),
                      major (3) }
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Alarm severity."
    ::= { faultCurrentAlarmEntry 3 }

faultCurrentAlarmCardType OBJECT-TYPE
    SYNTAX  CardType
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Card type of the card which caused the alarm."
    ::= { faultCurrentAlarmEntry 4 }

faultCurrentAlarmCardNumber OBJECT-TYPE
    SYNTAX  INTEGER (1..6)
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Slot number of the card which caused the alarm."
    ::= { faultCurrentAlarmEntry 5 }

faultCurrentAlarmPortNumber OBJECT-TYPE
    SYNTAX  INTEGER (1..8)
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The port number of the card which caused the alarm."
    ::= { faultCurrentAlarmEntry 6 }

faultCurrentAlarmSetTime OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The time when the alarm was set."
    ::= { faultCurrentAlarmEntry 7 }

faultCurrentAlarmDescription OBJECT-TYPE
    SYNTAX  DisplayString
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "A readable string which describes the alarm."
    ::= { faultCurrentAlarmEntry 8 }


-- history alarm table

faultHistoryAlarmTable OBJECT-TYPE
    SYNTAX  SEQUENCE OF FaultHistoryAlarmEntry
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "History/Information alarm table."
    ::= { fault 4 }

faultHistoryAlarmEntry OBJECT-TYPE
    SYNTAX  FaultHistoryAlarmEntry
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "Each entry in the history alarm table contains either a
             cleared alarm or an information alarm."
    INDEX   { faultHistoryAlarmTag }
    ::= { faultHistoryAlarmTable 1 }

FaultHistoryAlarmEntry ::=
    SEQUENCE {
        faultHistoryAlarmTag
            INTEGER,
        faultHistoryAlarmAlarmType
            AlarmType,
        faultHistoryAlarmSeverity
            INTEGER,
        faultHistoryAlarmCardType
            CardType,
        faultHistoryAlarmCardNumber
            INTEGER,
        faultHistoryAlarmPortNumber
            INTEGER,
        faultHistoryAlarmSetTime
            TimeAndDate,
        faultHistoryAlarmDescription
            DisplayString,
        faultHistoryAlarmClearTime
            TimeAndDate
    }

faultHistoryAlarmTag OBJECT-TYPE
    SYNTAX  INTEGER
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "The tag of the alarm in the history alarm table."
    ::= { faultHistoryAlarmEntry 1 }

faultHistoryAlarmAlarmType OBJECT-TYPE
    SYNTAX  AlarmType 
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Alarm type."
    ::= { faultHistoryAlarmEntry 2 }

faultHistoryAlarmSeverity OBJECT-TYPE
    SYNTAX  INTEGER { info  (1),
                      minor (2),
                      major (3) }
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Severity of the alarm."
    ::= { faultHistoryAlarmEntry 3 }

faultHistoryAlarmCardType OBJECT-TYPE
    SYNTAX  CardType 
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Card type of the card which caused the alarm."
    ::= { faultHistoryAlarmEntry 4 }

faultHistoryAlarmCardNumber OBJECT-TYPE
    SYNTAX  INTEGER (1..6)
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Slot number of the card which caused the alarm."
    ::= { faultHistoryAlarmEntry 5 }

faultHistoryAlarmPortNumber OBJECT-TYPE
    SYNTAX  INTEGER (1..8)
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "Port number of the card which caused the alarm."
    ::= { faultHistoryAlarmEntry 6 }

faultHistoryAlarmSetTime OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The time when the alarm was set."
    ::= { faultHistoryAlarmEntry 7 }

faultHistoryAlarmDescription OBJECT-TYPE
    SYNTAX  DisplayString
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "A readable string which describes the alarm."
    ::= { faultHistoryAlarmEntry 8 }

faultHistoryAlarmClearTime OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The time when the alarm was cleared."
    ::= { faultHistoryAlarmEntry 9 }

END
--
-- This MIB is used to support the enterprise-specific objects for QSIM, HSIM
-- and FAM interface cards and QSIM is used to refer to the 3 interface cards.
--
-- The following MIB groups are supported by all the interface cards (note:
-- they all use "qsim" as prefix):
--
--    qsimCard, qsimVc, qsimLmi, qsimSdlcVc, qsimDxiVc and qsimFrameRelayVc.
--
--    qsimLmi and qsimFrameRelayVc groups are used for ports which support
--    frame relay protocol.
--
--    qsimSdlcVc group is used for ports which support SDLC protocol.
--
--    qsimDxiVc group is used for ports which support DXI protocol.
--
-- The following MIB groups are specific to each of the interface cards (note:
-- they use "qsim" or "hsim" as prefix to distinguish the supporting card):
--
--    qsimPort group is for QSIM interface card only.
--
--    hsimPort group is for HSIM interface card only.
--

C-PRODUCT-QSIM-MIB DEFINITIONS ::= BEGIN


IMPORTS
    qsim                 FROM C-PRODUCT-GROUP-MIB
    cardSlot,
    portSlot,
    portNumber,
    vcpSideId FROM C-PRODUCT-BASE-MIB
    OBJECT-TYPE          FROM RFC-1212;

-- Data Types

-- Pin status for V.35 ports

PinStatus ::= INTEGER { off(1), on(2) }

--
-- MIB Groups
--

qsimCard         OBJECT IDENTIFIER ::= { qsim   1 }
qsimPort         OBJECT IDENTIFIER ::= { qsim   2 }
hsimPort         OBJECT IDENTIFIER ::= { qsim   3 }
-- The next  statement apply only for Lodi Rel1.4 only
qsimVc           OBJECT IDENTIFIER ::= { qsim   4 }
qsimLmi          OBJECT IDENTIFIER ::= { qsim   6 }
qsimNewVc        OBJECT IDENTIFIER ::= { qsim   9 }

-- The next 3 statements apply for Lodi Rel1.4 only
qsimSdlcVc       OBJECT IDENTIFIER ::= { qsimVc 1 }
qsimDxiVc        OBJECT IDENTIFIER ::= { qsimVc 2 }
qsimFrameRelayVc OBJECT IDENTIFIER ::= { qsimVc 3 }

-- The next 3 statements apply for Baja &Lodi Rel2.0 only
qsimNewSdlcVc       OBJECT IDENTIFIER ::= { qsimNewVc 1 }
qsimNewDxiVc        OBJECT IDENTIFIER ::= { qsimNewVc 2 }
qsimNewFrameRelayVc OBJECT IDENTIFIER ::= { qsimNewVc 3 }

--
-- Card Group (qsimCard)
--

qsimCardTable OBJECT-TYPE
    SYNTAX SEQUENCE OF QsimCardEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Card configuration table."
    ::= { qsimCard 1 }

qsimCardEntry OBJECT-TYPE
    SYNTAX QsimCardEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Card configuration entry."
    INDEX { cardSlot }
    ::= { qsimCardTable 1 }

QsimCardEntry ::=
    SEQUENCE {
        qsimCardMaxFrameSize
            INTEGER
    }

qsimCardMaxFrameSize OBJECT-TYPE
    SYNTAX INTEGER { mfs-2kb (1),
                     mfs-4kb (2),
                     mfs-8kb (3) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Maximum frame size for SDLC, DXI and Frame Relay frames.
             WARNING: Change of the Maximum Frame Size will
                      cause Disruption of Service provided
                      by the card."
    DEFVAL { mfs-2kb }
    ::= { qsimCardEntry 1 }

--
-- QSIM-specific Port Group (qsimPortTable)
--

qsimPortTable OBJECT-TYPE
    SYNTAX SEQUENCE OF QsimPortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "QSIM port configuration table."
    ::= { qsimPort 1 }

qsimPortEntry OBJECT-TYPE
    SYNTAX QsimPortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "QSIM port configuration entry.  The slot number (portSlot)
             of this card can be from 4 to 6.  The port number (portNumber)
             can be from 1 to 4."
    INDEX { portSlot, portNumber }
    ::= { qsimPortTable 1 }

QsimPortEntry ::=
    SEQUENCE {
        qsimPortLinkType
            INTEGER,
        qsimPortCableType
            INTEGER,
        qsimPortTermTimingSource
            INTEGER,
        qsimPortReceiveTimingPhase
            INTEGER,
        qsimPortDataRate
            INTEGER,
        qsimPortMinFlagBytes
            INTEGER,
        qsimPortFcsSize
            INTEGER,
        qsimPortRts
            PinStatus,
        qsimPortCts
            PinStatus,
        qsimPortDcd
            PinStatus,
        qsimPortDsr
            PinStatus
    }

qsimPortLinkType OBJECT-TYPE
    SYNTAX INTEGER { dxi         (1),
                     sdlc        (2),
                     frame-relay (3) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Link layer protocol supported by the port."
    DEFVAL { dxi }
    ::= { qsimPortEntry 1 }

qsimPortCableType OBJECT-TYPE
    SYNTAX INTEGER { none (1),  -- cable not detected
                     dte  (2),  -- dte cable is detected
                     dce  (3) } -- dce cable is detected
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Type of cable connected to the port."
    ::= { qsimPortEntry 2 }

qsimPortTermTimingSource OBJECT-TYPE
    SYNTAX INTEGER { internal (1),
                     external (2) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Terminal timing source.  This object applies ONLY
             when a DCE cable is connected to the port. If cable
             type is 'none' or 'dce', this object can be read
             and written.  If cable type is 'dte', a get request
             returns whatever value currently stored in the
             managed node for this port and a set request returns
             genErr."
    DEFVAL { internal }
    ::= { qsimPortEntry 3 }

qsimPortReceiveTimingPhase OBJECT-TYPE
    SYNTAX INTEGER { normal   (1),
                     inverted (2) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Receive timing phase control.  This object applies ONLY
             when a DCE cable is connected to the port. If cable
             type is 'none' or 'dce', this object can be read and
             written.  If cable type is 'dte', a get request returns
             whatever value currently stored in the managed node for
             this port and a set request returns genErr."
    DEFVAL { normal }
    ::= { qsimPortEntry 4 }

qsimPortDataRate OBJECT-TYPE
    SYNTAX INTEGER { dr-64k  (1),
                     dr-128k (2),
                     dr-256k (3),
                     dr-512k (4),
                     dr-1m   (5),
                     dr-2m   (6),
                     dr-4m   (7),
                     dr-8m   (8) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Data rate supported by the port."
    DEFVAL { dr-2m }
    ::= { qsimPortEntry 5 }

qsimPortMinFlagBytes OBJECT-TYPE
    SYNTAX INTEGER { fb-1 (1),  -- 1 flag byte
                     fb-2 (2) } -- 2 flag bytes
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Minimum flag bytes required to distinguish a frame."
    DEFVAL { fb-1 }
    ::= { qsimPortEntry 6 }

qsimPortFcsSize OBJECT-TYPE
    SYNTAX INTEGER { fcs-2 (1),  -- 2-byte FCS field
                     fcs-4 (2) } -- 4-byte FCS field
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Number of bytes in the FCS field of a frame."
    DEFVAL { fcs-2 }
    ::= { qsimPortEntry 7 }

qsimPortRts OBJECT-TYPE
    SYNTAX PinStatus
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "RTS pin status."
    ::= { qsimPortEntry 8 }

qsimPortCts OBJECT-TYPE
    SYNTAX PinStatus
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "CTS pin status."
    ::= { qsimPortEntry 9 }

qsimPortDcd OBJECT-TYPE
    SYNTAX PinStatus
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "DCD pin status."
    ::= { qsimPortEntry 10 }

qsimPortDsr OBJECT-TYPE
    SYNTAX PinStatus
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "DSR pin status."
    ::= { qsimPortEntry 11 }

--
-- HSIM-specific Port Group (hsimPortTable)
--

hsimPortTable OBJECT-TYPE
    SYNTAX SEQUENCE OF HsimPortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "HSIM port configuration table."
    ::= { hsimPort 1 }

hsimPortEntry OBJECT-TYPE
    SYNTAX HsimPortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "HSIM port configuration entry.  The slot number (portSlot)
             of this card can be from 4 to 6.  The port number (portNumber)
             of this card is always 1."
    INDEX { portSlot, portNumber }
    ::= { hsimPortTable 1 }

HsimPortEntry ::=
    SEQUENCE {
        hsimPortLinkType
            INTEGER,
        hsimPortDceDteMode
            INTEGER,
        hsimPortDataRate
            INTEGER,
        hsimPortMinFlagBytes
            INTEGER,
        hsimPortFcsSize
            INTEGER,
        hsimPortTa
            PinStatus,
        hsimPortCa
            PinStatus
    }

hsimPortLinkType OBJECT-TYPE
    SYNTAX INTEGER { dxi         (1),
                     sdlc        (2),
                     frame-relay (3) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Link layer protocol supported by the port."
    DEFVAL { dxi }
    ::= { hsimPortEntry 1 }

hsimPortDceDteMode OBJECT-TYPE
    SYNTAX INTEGER { dce (1),
                     dte (2) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "DCE/DTE mode of the port."
    DEFVAL { dce }
    ::= { hsimPortEntry 2 }

hsimPortDataRate OBJECT-TYPE
    SYNTAX INTEGER { dr-20m  (1) }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Data rate supported by the port."
    ::= { hsimPortEntry 3 }

hsimPortMinFlagBytes OBJECT-TYPE
    SYNTAX INTEGER { fb-1 (1),  -- 1 flag byte
                     fb-2 (2) } -- 2 flag bytes
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Minimum flag bytes required to distinguish a frame."
    DEFVAL { fb-1 }
    ::= { hsimPortEntry 4 }

hsimPortFcsSize OBJECT-TYPE
    SYNTAX INTEGER { fcs-2 (1),  -- 2-byte FCS field
                     fcs-4 (2) } -- 4-byte FCS field
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Number of bytes in the FCS field of a frame."
    DEFVAL { fcs-2 }
    ::= { hsimPortEntry 5 }

hsimPortTa OBJECT-TYPE
    SYNTAX PinStatus
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "TA pin status."
    ::= { hsimPortEntry 6 }

hsimPortCa OBJECT-TYPE
    SYNTAX PinStatus
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "CA pin status."
    ::= { hsimPortEntry 7 }

-- This method is only used for Lodi 1.4 & is not applicable for 
-- future releases as it will become obsolete.
-- SDLC VC Group (qsimSdlcVc)
-- DXI VC Group (qsimDxiVc)
-- Frame Relay VC Group (qsimFrameRelayVc)

--
-- LMI Group (qsimLmiTable)
--

qsimLmiTable OBJECT-TYPE
    SYNTAX SEQUENCE OF QsimLmiEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "LMI configuration table."
    ::= { qsimLmi 1 }

qsimLmiEntry OBJECT-TYPE
    SYNTAX QsimLmiEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "LMI configuration entry.  The slot number (portSlot)
             should be from 4 to 6.  The port number (portNumber)
             is from 1 to 4 for QSIM card, 1 to 8 for FAM card, and
             1 for HSIM card."
    INDEX { portSlot, portNumber }
    ::= { qsimLmiTable 1 }

QsimLmiEntry ::=
    SEQUENCE {
        qsimLmiProtocol
            INTEGER,
        qsimLmiProcedure
            INTEGER,
        qsimLmiUserT391
            INTEGER,
        qsimLmiUserN391
            INTEGER,
        qsimLmiUserN392
            INTEGER,
        qsimLmiUserN393
            INTEGER,
        qsimLmiNetworkT392
            INTEGER,
        qsimLmiNetworkN392
            INTEGER,
        qsimLmiNetworkN393
            INTEGER
    }

qsimLmiProtocol OBJECT-TYPE
    SYNTAX INTEGER { none    (1),
                     q-933a  (2),
                     t1-617d (3) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "LMI protocol supported by the port."
    DEFVAL { none }
    ::= { qsimLmiEntry 1 }

qsimLmiProcedure OBJECT-TYPE
    SYNTAX INTEGER { user-side     (1),
                     network-side  (2),
                     bidirectional (3) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "LMI procedure supported by the port.  This object applies
             when LMI Q.933 Annex A or T1.617 Annex D protocol is selected."
    DEFVAL { network-side }
    ::= { qsimLmiEntry 2 }

qsimLmiUserT391 OBJECT-TYPE
    SYNTAX INTEGER (5..180)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "User-side link integrity verification (LIV) polling timer. This
             object applies when LMI user-side or bidirectional procedure
             is selected."
    DEFVAL { 10 }
    ::= { qsimLmiEntry 3 }

qsimLmiUserN391 OBJECT-TYPE
    SYNTAX INTEGER (1..255)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "User-side full status polling counter.  This object applies
             when LMI user-side or bidirectional procedure is selected."
    DEFVAL { 6 }
    ::= { qsimLmiEntry 4 }

qsimLmiUserN392 OBJECT-TYPE
    SYNTAX INTEGER (1..10)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "User-side error threshold.  This object applies when
             LMI user-side or bidirectional procedure is selected.
             User-side N392 should be less than or equal to user-
             side N393."
    DEFVAL { 3 }
    ::= { qsimLmiEntry 5 }

qsimLmiUserN393 OBJECT-TYPE
    SYNTAX INTEGER (1..10)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "User-side monitored events count.  This object applies when
             LMI user-side or bidirectional procedure is selected."
    DEFVAL { 4 }
    ::= { qsimLmiEntry 6 }

qsimLmiNetworkT392 OBJECT-TYPE
    SYNTAX INTEGER (5..200)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Network-side polling verification timer.  This object applies
             when LMI network-side or bidirectional procedure is selected."
    DEFVAL { 15 }
    ::= { qsimLmiEntry 7 }

qsimLmiNetworkN392 OBJECT-TYPE
    SYNTAX INTEGER (1..10)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Network-side error threshold.  This object applies when
             LMI network-side or bidirectional procedure is selected.
             Network-side N392 should be less than or equal to Network-
             side N393."
    DEFVAL { 3 }
    ::= { qsimLmiEntry 8 }

qsimLmiNetworkN393 OBJECT-TYPE
    SYNTAX INTEGER (1..10)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Network-side monitored events count.  This object applies
             when LMI network-side or bidirectional procedure is selected."
    DEFVAL { 4 }
    ::= { qsimLmiEntry 9 }

-- New SDLC VC Group (qsimNewSdlcVc)
-- Is only aplicable for Baja & Lodi Release 2.0 onwards
-- This table is used to access the VC's on the ports whose link type is SDLC.
--

qsimNewSdlcVcTable OBJECT-TYPE
    SYNTAX SEQUENCE OF QsimNewSdlcVcEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "SDLC VC configuration table."
    ::= { qsimNewSdlcVc 1 }

qsimNewSdlcVcEntry OBJECT-TYPE
    SYNTAX QsimNewSdlcVcEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "SDLC VC configuration entry.  The slot number (vcPortSlot)
             of the VC can be from 4 to maxslots. The port number (vcPortPort)
             can be from 1 to 4."
    INDEX { vcpSideId }
    ::= { qsimNewSdlcVcTable 1 }

QsimNewSdlcVcEntry ::=
    SEQUENCE {
        qsimNewSdlcVcShapper
            INTEGER
    }

qsimNewSdlcVcShapper OBJECT-TYPE
    SYNTAX INTEGER (1..13)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Data rate supported by the SDLC VC.  Depending on the type
             of card a VC is configured, the shapper numbers are assigned
             as follows:

               HSIM              QSIM
             data rate         data rate     shapper number
             ---------         ---------     --------------
                1.5m              64k              1
                3m                128k             2
                4.5m              192k             3
                6m                256k             4
                7.5m              384k             5
                9m                512k             6
                10.5m             640k             7
                12m               768k             8
                13.5m             1m               9
                15m               1.5m             10
                16.5m             2m               11
                18m               4m               12
                20m               8m               13
            "
    ::= { qsimNewSdlcVcEntry 1 }

--
-- DXI VC Group (qsimNewDxiVc)
--
-- This table is used to access the VC's on the ports whose link type is DXI.
--

qsimNewDxiVcTable OBJECT-TYPE
    SYNTAX SEQUENCE OF QsimNewDxiVcEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "DXI VC configuration table."
    ::= { qsimNewDxiVc 1 }

qsimNewDxiVcEntry OBJECT-TYPE
    SYNTAX QsimNewDxiVcEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "DXI VC configuration entry.  The slot number (vcPortSlot)
             of the VC can be from 4 to 6. The port number (vcPortPort)
             can be from 1 to 4."
    INDEX { vcpSideId }
    ::= { qsimNewDxiVcTable 1 }

QsimNewDxiVcEntry ::=
    SEQUENCE {
        qsimNewDxiVcDfaVpi
            INTEGER,
        qsimNewDxiVcDfaVci
            INTEGER,
        qsimNewDxiVcDfaVciRange
            INTEGER,
        qsimNewDxiVcShapper
            INTEGER
    }

qsimNewDxiVcDfaVpi OBJECT-TYPE
    SYNTAX INTEGER (0..15)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "DXI DFA VPI."
    ::= { qsimNewDxiVcEntry 1 }

qsimNewDxiVcDfaVci OBJECT-TYPE
    SYNTAX INTEGER (0..63)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "DXI DFA VCI."
    ::= { qsimNewDxiVcEntry 2 }

qsimNewDxiVcDfaVciRange OBJECT-TYPE
    SYNTAX INTEGER (1..64)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "DXI VCI range.  This object is used to create a set
             of VCs whose VPI equals to the value of the instance
             of qsimDxiVcDfaVpi and whose VCIs are in the range
             FROM 'the value of the instance of qsimDxiVcDfaVci'
             TO 'the value of the instance of this object PLUS the
             value of the instance of qsiDxiVcDfaVci MINUS 1'.  A
             successful set request will generate 1 to N VC entries
             in this table.  Where N equals to the value of the
             instance of this object.  A get request always returns
             1."
    DEFVAL { 1 }
    ::= { qsimNewDxiVcEntry 3 }

qsimNewDxiVcShapper OBJECT-TYPE
    SYNTAX INTEGER (1..13)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Data rate supported by the DXI VC.  Depending on the type
             of card a VC is configured, the shapper numbers are assigned
             as follows:

               HSIM              QSIM
             data rate         data rate     shapper number
             ---------         ---------     --------------
                1.5m              64k              1
                3m                128k             2
                4.5m              192k             3
                6m                256k             4
                7.5m              384k             5
                9m                512k             6
                10.5m             640k             7
                12m               768k             8
                13.5m             1m               9
                15m               1.5m             10
                16.5m             2m               11
                18m               4m               12
                20m               8m               13
            "
    ::= { qsimNewDxiVcEntry 4 }

--
-- Frame Relay VC Group (qsimNewFrameRelayVc)
--
-- This table is used to access the VC's on the ports whose link type is
-- frame relay.
--

qsimNewFrameRelayVcTable OBJECT-TYPE
    SYNTAX SEQUENCE OF QsimNewFrameRelayVcEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Frame relay VC configuration table."
    ::= { qsimNewFrameRelayVc 1 }

qsimNewFrameRelayVcEntry OBJECT-TYPE
    SYNTAX QsimNewFrameRelayVcEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Frame relay VC configuration entry.  The slot number
             (vcPortSlot) of the VC can be from 4 to maxslots. The port
             number (vcPortPort) can be from 1 to 4."
    INDEX { vcpSideId }
    ::= { qsimNewFrameRelayVcTable 1 }

QsimNewFrameRelayVcEntry ::=
    SEQUENCE {
        qsimNewFrameRelayVcInterworking
            INTEGER,
        qsimNewFrameRelayVcEncapsulation
            INTEGER,
        qsimNewFrameRelayVcDe2Clp
            INTEGER,
        qsimNewFrameRelayVcClp2De
            INTEGER,
        qsimNewFrameRelayVcFecnToEfci
            INTEGER,
        qsimNewFrameRelayVcShapper
            INTEGER,
        qsimNewFrameRelayVcDlci
            INTEGER,
        qsimNewFrameRelayVcFrSscsDlci
            INTEGER,
        qsimNewFrameRelayVcStatus
            INTEGER
    }

qsimNewFrameRelayVcInterworking OBJECT-TYPE
    SYNTAX INTEGER { network (1),  -- network interworking
                     service (2) } -- service interworking
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Frame Relay/ATM interworking mode."
    ::= { qsimNewFrameRelayVcEntry 1 }

qsimNewFrameRelayVcEncapsulation OBJECT-TYPE
    SYNTAX INTEGER { transparent (1),
                     translation (2) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Encapsulation type.  This object applies ONLY to service
             interworking."
    ::= { qsimNewFrameRelayVcEntry 2 }

qsimNewFrameRelayVcDe2Clp OBJECT-TYPE
    SYNTAX INTEGER { direct   (1),
                     always-0 (2),
                     always-1 (3) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "If mode 1 mapping is desirable, the user shall select
             direct mapping.  If mode 2 mapping is desirable, the
             user shall select always-0 or always-1 to map the CLP
             field to a constant value (0 or 1)."
    ::= { qsimNewFrameRelayVcEntry 3 }

qsimNewFrameRelayVcClp2De OBJECT-TYPE
    SYNTAX INTEGER { none     (1),
                     direct   (2),
                     always-0 (3),
                     always-1 (4) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "For network interworking -

             The options are none and direct.  If mode 1 mapping
             is desirable, the user shall select direct mapping.
             If mode 2 mapping is desirable, the user shall select
             none.  The none option maps the DE field in FR-SSCS
             PDU to the core-Q.922 frame DE field and ignores the
             CLP field in the ATM cells.

             For service interworking -

             The options are direct, always-0 and always-1.  If mode
             1 mapping is desirable, the user shall select direct
             mapping.  If mode 2 mapping is desirable, the user shall
             select always-0 or always-1 to map the DE field to a
             constant value (0 or 1)."
    ::= { qsimNewFrameRelayVcEntry 4 }

qsimNewFrameRelayVcFecnToEfci OBJECT-TYPE
    SYNTAX INTEGER { direct   (1),
                     always-0 (2) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "This object applies ONLY to service interworking.  If
             mode 1 mapping is desirable, direct mapping should be
             selected.  If mode 2 mapping is desirable, always-0
             should be selected to set the EFCI field to 'congestion
             not experienced'."
    ::= { qsimNewFrameRelayVcEntry 5 }

qsimNewFrameRelayVcShapper OBJECT-TYPE
    SYNTAX INTEGER (1..13)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Data rate supported by the frame relay VC.  Depending on the type
             of card a VC is configured, the shapper numbers are assigned
             as follows:

               HSIM              QSIM
             data rate         data rate     shapper number
             ---------         ---------     --------------
                1.5m              64k              1
                3m                128k             2
                4.5m              192k             3
                6m                256k             4
                7.5m              384k             5
                9m                512k             6
                10.5m             640k             7
                12m               768k             8
                13.5m             1m               9
                15m               1.5m             10
                16.5m             2m               11
                18m               4m               12
                20m               8m               13
            "
    ::= { qsimNewFrameRelayVcEntry 6 }

qsimNewFrameRelayVcDlci OBJECT-TYPE
    SYNTAX INTEGER (16..991)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Frame relay DLCI."
    ::= { qsimNewFrameRelayVcEntry 7 }

qsimNewFrameRelayVcFrSscsDlci OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "This object applies ONLY to network interworking.
             Its valid value is 16..991 and 1022."
    ::= { qsimNewFrameRelayVcEntry 8 }

qsimNewFrameRelayVcStatus OBJECT-TYPE
    SYNTAX INTEGER { out-of-service (1),
                     in-service     (2),
                     not-configured (3) }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Frame relay PVC operational status."
    ::= { qsimNewFrameRelayVcEntry 9 }


END
C-PRODUCT-SIM-STAT-MIB DEFINITIONS ::= BEGIN


IMPORTS
    qsim                 FROM C-PRODUCT-GROUP-MIB
    TimeAndDate,
    portSlot,
    portNumber,
    vcpSideId 		 FROM C-PRODUCT-BASE-MIB
    Counter              FROM RFC1155-SMI
    OBJECT-TYPE          FROM RFC-1212;

-- Data Types

-- Serial Interface Module (SIM) Statistics groups

simStat         OBJECT IDENTIFIER ::= { qsim   5 } -- cover qsim, hsim, etc.

simPortStat     OBJECT IDENTIFIER ::= { simStat 1 }
simAtmVcStat    OBJECT IDENTIFIER ::= { simStat 2 }
simDxiVcStat    OBJECT IDENTIFIER ::= { simStat 3 }
simFrameRelayVcStat
                OBJECT IDENTIFIER ::= { simStat 4 }
simLmiStat      OBJECT IDENTIFIER ::= { simStat 5 }
simNewAtmVcStat    OBJECT IDENTIFIER ::= { simStat 6 }
simNewDxiVcStat    OBJECT IDENTIFIER ::= { simStat 7 }
simNewFrameRelayVcStat
                 OBJECT IDENTIFIER ::= { simStat 8 }


-- Serial Interface Module Port Statistics subgroup (simPortStat)
-- This table is used to access the frame statistics on the ports.
-- This group should cover a variety of port types including 
-- QSIM(V.35, RS422), HSIM, and (OSIM)8-port T1

simPortStatTable OBJECT-TYPE
    SYNTAX SEQUENCE OF SimPortStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The Serial Interface Module Port Statistics table. "
    ::= { simPortStat 1 }

simPortStatEntry OBJECT-TYPE
    SYNTAX SimPortStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information about a Serial Interface Module Port Statistics.
             The slot number (portSlot) of this card can be from 4 to 6.  
             The port number (portNumber) can be from 1 to 4 for QSIM,
             1 for HSIM, and from 1 to 8 for OSIM."
    INDEX { portSlot, portNumber }
    ::= { simPortStatTable 1 }

SimPortStatEntry ::=
    SEQUENCE {
        simPortClrStatCmd
            INTEGER,
        simPortClrStatTime
            TimeAndDate,
        simPortRxFrames 
            Counter,
        simPortTxFrames 
            Counter,
        simPortInvalidFrames 
            Counter,
        simPortCongestedFrames 
            Counter,
        simPortRxOctets
            Counter,
        simPortTxOctets
            Counter,
        simPortRxFcsErrs
            Counter
    }

simPortClrStatCmd OBJECT-TYPE
    SYNTAX  INTEGER { 
                      clear (1)
                    }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This is issued to clear all statistics of this port.
             The current time will be stored at simPortClrStatTime."
    ::= { simPortStatEntry 1 }

simPortClrStatTime OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The time when the last statistics was clear."
    ::= { simPortStatEntry 2 }

simPortRxFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received frames with good FCS at this port 
             since last counter reset."
    ::= { simPortStatEntry 3 }

simPortTxFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total transmitted frames at this port since last counter reset.
             These frames were transmitted successfuly."
    ::= { simPortStatEntry 4 }

simPortInvalidFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received invalid frames at this port since last 
             counter reset. These frames are received with good FCS but can
             not be processed due to wrong content."
    ::= { simPortStatEntry 5 }

simPortCongestedFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total congested frames at this port since last counter reset.
             These frames were not transmitted due to link congestion."
    ::= { simPortStatEntry 6 }

simPortRxOctets OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received octets with good FCS at this port 
             since last counter reset."
    ::= { simPortStatEntry 7 }

simPortTxOctets OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total transmitted octets at this port 
             since last counter reset."
    ::= { simPortStatEntry 8 }

simPortRxFcsErrs OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received frames with bad FCS at this port 
             since last counter reset."
    ::= { simPortStatEntry 9 }


-- Serial Interface Module ATM VC Statistics subgroup (simAtmVcStat)
-- This table is used to access the frame statistics on ATM VCs.
-- This group should cover a variety of port types including 
-- QSIM(V.35, RS422), HSIM, and (OSIM)8-port T1
-- This table is for AB9300 & AB9600 Rel2.0 onwards

simNewAtmVcStatTable OBJECT-TYPE
    SYNTAX SEQUENCE OF SimNewAtmVcStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The Serial Interface Module ATM VC Statistics table. "
    ::= { simNewAtmVcStat 1 }

simNewAtmVcStatEntry OBJECT-TYPE
    SYNTAX SimNewAtmVcStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information about a Serial Interface Module ATM VC Statistics.
             The slot number (portSlot) of this card can be from 4 to 6.  
             The port number (portNumber) can be from 1 to 4 for QSIM,
             1 for HSIM, and from 1 to 8 for OSIM."
    INDEX { vcpSideId }
    ::= { simNewAtmVcStatTable 1 }


SimNewAtmVcStatEntry ::=
    SEQUENCE {
        simNewAtmVcClrStatCmd
            INTEGER,
        simNewAtmVcClrStatTime
            TimeAndDate,
        simNewAtmVcRxFrames   
            Counter,
        simNewAtmVcTxFrames 
            Counter,
        simNewAtmVcInvalidFrames 
            Counter,
        simNewAtmVcCongestedFrames 
            Counter
    }

simNewAtmVcClrStatCmd OBJECT-TYPE
    SYNTAX  INTEGER { 
                      clear (1)
                    }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This is issued to clear all statistics of this ATM VC.
             The current time will be stored at simNewAtmVcClrStatTime."
    ::= { simNewAtmVcStatEntry 1 }

simNewAtmVcClrStatTime OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The time when the last statistics was clear."
    ::= { simNewAtmVcStatEntry 2 }

simNewAtmVcRxFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received frames at this ATM VC 
             since last counter reset."
    ::= { simNewAtmVcStatEntry 3 }

simNewAtmVcTxFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total transmitted frames at this ATM VC since last counter reset.
             These frames were transmitted successfuly."
    ::= { simNewAtmVcStatEntry 4 }

simNewAtmVcInvalidFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received invalid frames at this ATM VC since last 
             counter reset. These frames are received with good VC id but can
             not be processed due to wrong content."
    ::= { simNewAtmVcStatEntry 5 }

simNewAtmVcCongestedFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total congested frames at this ATM VC since last counter reset.
             These frames were not transmitted due to link congestion."
    ::= { simNewAtmVcStatEntry 6 }


-- Serial Interface Module DXI VC Statistics subgroup (simDxiVcStat)
-- This table is used to access the frame statistics on DXI VCs.
-- This group should cover a variety of port types including 
-- QSIM(V.35, RS422), HSIM, and (OSIM)8-port T1
-- This new table is for AB9600 Rel 2.0 & AB9300

simNewDxiVcStatTable OBJECT-TYPE
    SYNTAX SEQUENCE OF SimNewDxiVcStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The Serial Interface Module DXI VC Statistics table. "
    ::= { simNewDxiVcStat 1 }

simNewDxiVcStatEntry OBJECT-TYPE
    SYNTAX SimNewDxiVcStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information about a Serial Interface Module DXI VC Statistics.
             The slot number (portSlot) of this card can be from 4 to 6.  
             The port number (portNumber) can be from 1 to 4 for QSIM,
             1 for HSIM, and from 1 to 8 for OSIM."
    INDEX { vcpSideId }
    ::= { simNewDxiVcStatTable 1 }


SimNewDxiVcStatEntry ::=
    SEQUENCE {
        simNewDxiVcClrStatCmd
            INTEGER,
        simNewDxiVcClrStatTime
            TimeAndDate,
        simNewDxiVcRxFrames   
            Counter,
        simNewDxiVcTxFrames 
            Counter,
        simNewDxiVcInvalidFrames 
            Counter,
        simNewDxiVcCongestedFrames 
            Counter,
        simNewDxiVcRxOctets
            Counter,
        simNewDxiVcTxOctets
            Counter,
        simNewDxiVcRxClp
            Counter
    }

simNewDxiVcClrStatCmd OBJECT-TYPE
    SYNTAX  INTEGER { 
                      clear (1)
                    }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This is issued to clear all statistics of this DXI VC.
             The current time will be stored at simDxiVcClrStatTime."
    ::= { simNewDxiVcStatEntry 1 }

simNewDxiVcClrStatTime OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The time when the last statistics was clear."
    ::= { simNewDxiVcStatEntry 2 }

simNewDxiVcRxFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received frames at this DXI VC 
             since last counter reset."
    ::= { simNewDxiVcStatEntry 3 }

simNewDxiVcTxFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total transmitted frames at this DXI VC since last counter reset.
             These frames were transmitted successfuly."
    ::= { simNewDxiVcStatEntry 4 }

simNewDxiVcInvalidFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received invalid frames at this DXI VC since last 
             counter reset. These frames are received with good VC id but can
             not be processed due to wrong content."
    ::= { simNewDxiVcStatEntry 5 }

simNewDxiVcCongestedFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total congested frames at this DXI VC since last counter reset.
             These frames were not transmitted due to link congestion."
    ::= { simNewDxiVcStatEntry 6 }

simNewDxiVcRxOctets OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received octets at this DXI VC 
             since last counter reset."
    ::= { simNewDxiVcStatEntry 7 }

simNewDxiVcTxOctets OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total transmitted octets at this DXI VC 
             since last counter reset."
    ::= { simNewDxiVcStatEntry 8 }

simNewDxiVcRxClp OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received frames with CLP bit set at this DXI VC 
             since last counter reset."
    ::= { simNewDxiVcStatEntry 9 }

-- Serial Interface Module FR VC Statistics subgroup (simFrameRelayVcStat)
-- This table is used to access the frame statistics on FR VCs.
-- This group should cover a variety of port types including 
-- QSIM(V.35, RS422), HSIM, and (OSIM)8-port T1

simNewFrameRelayVcStatTable OBJECT-TYPE
    SYNTAX SEQUENCE OF SimNewFrameRelayVcStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The Serial Interface Module FR VC Statistics table. "
    ::= { simNewFrameRelayVcStat 1 }

simNewFrameRelayVcStatEntry OBJECT-TYPE
    SYNTAX SimNewFrameRelayVcStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information about a Serial Interface Module FR VC Statistics.
             The slot number (portSlot) of this card can be from 4 to 6.  
             The port number (portNumber) can be from 1 to 4 for QSIM,
             1 for HSIM, and from 1 to 8 for OSIM."
    INDEX { vcpSideId }
    ::= { simNewFrameRelayVcStatTable 1 }


SimNewFrameRelayVcStatEntry ::=
    SEQUENCE {
        simNewFrameRelayVcClrStatCmd
            INTEGER,
        simNewFrameRelayVcClrStatTime
            TimeAndDate,
        simNewFrameRelayVcRxFrames   
            Counter,
        simNewFrameRelayVcTxFrames 
            Counter,
        simNewFrameRelayVcInvalidFrames 
            Counter,
        simNewFrameRelayVcCongestedFrames 
            Counter,
        simNewFrameRelayVcRxOctets
            Counter,
        simNewFrameRelayVcTxOctets
            Counter,
        simNewFrameRelayVcRxDe
            Counter,
        simNewFrameRelayVcRxFecn
            Counter,
        simNewFrameRelayVcRxBecn
            Counter
    }

simNewFrameRelayVcClrStatCmd OBJECT-TYPE
    SYNTAX  INTEGER { 
                      clear (1)
                    }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This is issued to clear all statistics of this FR VC.
             The current time will be stored at simNewFrameRelayVcClrStatTime."
    ::= { simNewFrameRelayVcStatEntry 1 }

simNewFrameRelayVcClrStatTime OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The time when the last statistics was clear."
    ::= { simNewFrameRelayVcStatEntry 2 }

simNewFrameRelayVcRxFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received frames at this FR VC 
             since last counter reset."
    ::= { simNewFrameRelayVcStatEntry 3 }

simNewFrameRelayVcTxFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total transmitted frames at this FR VC since last counter reset.
             These frames were transmitted successfuly."
    ::= { simNewFrameRelayVcStatEntry 4 }

simNewFrameRelayVcInvalidFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received invalid frames at this FR VC since last 
             counter reset. These frames are received with good VC id but can
             not be processed due to wrong content."
    ::= { simNewFrameRelayVcStatEntry 5 }

simNewFrameRelayVcCongestedFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total congested frames at this FR VC since last counter reset.
             These frames were not transmitted due to link congestion."
    ::= { simNewFrameRelayVcStatEntry 6 }

simNewFrameRelayVcRxOctets OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received octets at this FR VC 
             since last counter reset."
    ::= { simNewFrameRelayVcStatEntry 7 }

simNewFrameRelayVcTxOctets OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total transmitted octets at this FR VC 
             since last counter reset."
    ::= { simNewFrameRelayVcStatEntry 8 }

simNewFrameRelayVcRxDe OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received frames with DE bit set at this FR VC 
             since last counter reset."
    ::= { simNewFrameRelayVcStatEntry 9 }

simNewFrameRelayVcRxFecn OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received frames with FECN bit set at this FR VC 
             since last counter reset."
    ::= { simNewFrameRelayVcStatEntry 10 }

simNewFrameRelayVcRxBecn OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Total received frames with BECN bit set at this FR VC 
             since last counter reset."
    ::= { simNewFrameRelayVcStatEntry 11 }

--
-- LMI statistics group (simLmiStatTable)
--

simLmiStatTable OBJECT-TYPE
    SYNTAX SEQUENCE OF SimLmiStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "LMI statistics table."
    ::= { simLmiStat 1 }

simLmiStatEntry OBJECT-TYPE
    SYNTAX SimLmiStatEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "LMI statistics entry.  The slot index (portSlot) of this
             entry can be from 4 to 6.  The port index (portNumber) can
             be from 1 to 8 for FAM, 1 to 4 for QSIM and 1 for HSIM."
    INDEX { portSlot, portNumber }
    ::= { simLmiStatTable 1 }

SimLmiStatEntry ::=
    SEQUENCE {
        simLmiClrStatCmd
            INTEGER,
        simLmiClrStatTime
            TimeAndDate,
        simLmiReceivedFrames   
            Counter,
        simLmiDiscardedFrames   
            Counter,
        simLmiUserLivTimeouts   
            Counter,
        simLmiUserXmtLivRequests 
            Counter,
        simLmiUserRcvLivResponses
            Counter,
        simLmiUserXmtFullStatusRequests
            Counter,
        simLmiUserRcvFullStatusResponses
            Counter,
        simLmiUserLossSeqNumSyncs
            Counter,
        simLmiUserRcvUnconfigPvcs
            Counter,
        simLmiNetworkPvTimeouts
            Counter,
        simLmiNetworkRcvLivRequests
            Counter,
        simLmiNetworkXmtLivResponses 
            Counter,
        simLmiNetworkRcvFullStatusRequests
            Counter,
        simLmiNetworkXmtFullStatusResponses
            Counter,
        simLmiNetworkLossSeqNumSyncs
            Counter
    }

simLmiClrStatCmd OBJECT-TYPE
    SYNTAX  INTEGER { clear (1) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This is a command to clear all LMI statistics.  This object
             applies when LMI protocol is not 'none'."
    ::= { simLmiStatEntry 1 }

simLmiClrStatTime OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The time when the last LMI statistics was cleared.  This object
             applies when LMI protocol is not 'none'."
    ::= { simLmiStatEntry 2 }

simLmiReceivedFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Received LMI frames.  This object applies when LMI protocol is
             not 'none'."
    ::= { simLmiStatEntry 3 }

simLmiDiscardedFrames OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Discarded LMI frames.  This object applies when LMI protocol is
             not 'none'."
    ::= { simLmiStatEntry 4 }

simLmiUserLivTimeouts OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "User-side LIV timeouts.  This object applies when LMI
             procedure is user-side or bidirectional."
    ::= { simLmiStatEntry 5 }

simLmiUserXmtLivRequests OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "User-side LIV requests.  This object applies when LMI
             procedure is user-side or bidirectional."
    ::= { simLmiStatEntry 6 }

simLmiUserRcvLivResponses OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "User-side LIV responses.  This object applies when LMI
             procedure is user-side or bidirectional."
    ::= { simLmiStatEntry 7 }

simLmiUserXmtFullStatusRequests OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "User-side full status requests.  This object applies when
             LMI procedure is user-side or bidirectional."
    ::= { simLmiStatEntry 8 }

simLmiUserRcvFullStatusResponses OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "User-side full status responses.  This object applies when
             LMI procedure is user-side or bidirectional."
    ::= { simLmiStatEntry 9 }

simLmiUserLossSeqNumSyncs OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "User-side loss of sequence number synchronization.  This object
             applies when LMI procedure is user-side or bidirectional."
    ::= { simLmiStatEntry 10 }

simLmiUserRcvUnconfigPvcs OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "User-side unconfigured PVCs.  This object applies when LMI
             procedure is user-side or bidirectional."
    ::= { simLmiStatEntry 11 }

simLmiNetworkPvTimeouts OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Network-side PV timeouts.  This object applies when LMI
             procedure is network-side or bidirectional."
    ::= { simLmiStatEntry 12 }

simLmiNetworkRcvLivRequests OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Network-side LIV requests.  This object applies when LMI
             procedure is network-side or bidirectional."
    ::= { simLmiStatEntry 13 }

simLmiNetworkXmtLivResponses OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Network-side LIV responses.  This object applies when LMI
             procedure is network-side or bidirectional."
    ::= { simLmiStatEntry 14 }

simLmiNetworkRcvFullStatusRequests OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Network-side full status requests.  This object applies when LMI
             procedure is network-side or bidirectional."
    ::= { simLmiStatEntry 15 }

simLmiNetworkXmtFullStatusResponses OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Network-side full status responses.  This object applies when LMI
             procedure is network-side or bidirectional."
    ::= { simLmiStatEntry 16 }

simLmiNetworkLossSeqNumSyncs OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "Network-side loss of sequence number synchronization.  This object
             applies when LMI procedure is network-side or bidirectional."
    ::= { simLmiStatEntry 17 }

END
C-PRODUCT-CBR-MIB DEFINITIONS ::= BEGIN

IMPORTS
   cbr			FROM C-PRODUCT-GROUP-MIB
   portSlot,
   portNumber,
   vcpSideId,
   TimeAndDate		FROM C-PRODUCT-BASE-MIB
   Counter		FROM RFC1155-SMI
   OBJECT-TYPE		FROM RFC-1212;

-- Data Types

-- CBR groups

cbrDS1E1CardConfig	OBJECT IDENTIFIER ::= {cbr 1}
cbrDS1E1PortConfig	OBJECT IDENTIFIER ::= {cbr 2}
cbrDS1E1VcConfig	OBJECT IDENTIFIER ::= {cbr 3}
cbrDS1E1ATMStats        OBJECT IDENTIFIER ::= {cbr 4}
cbrV35PortConfig        OBJECT IDENTIFIER ::= {cbr 5}
cbrDS1E1NewVcConfig	OBJECT IDENTIFIER ::= {cbr 6}
cbrDS1E1NewATMStats     OBJECT IDENTIFIER ::= {cbr 7}

-- CBR Card Configuration Group (cbrDS1E1CardConfig)

cbrDS1E1CardConfTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CbrDS1E1CardEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
        "This object contains the CBR specific card Configuration table.
        There is one cbrDS1E1CardConfEntry associated for each provisioned
        CBR interface within the shelf.  This table uses portSlot as an index
        which is defined in the portBaseTable of the C-PRODUCT BASE MIB.
        This index value uniquely identifies the CBR interface to which this
        entry is applicable."
    ::= {cbrDS1E1CardConfig 1}

cbrDS1E1CardConfEntry OBJECT-TYPE
    SYNTAX CbrDS1E1CardEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
	    "An entry in the CBR specific card Configuration table."
    INDEX { portSlot }
    ::= {cbrDS1E1CardConfTable 1}

CbrDS1E1CardEntry ::=
    SEQUENCE {
	cbrDS1E1CardRefPort
	    INTEGER
    }

cbrDS1E1CardRefPort OBJECT-TYPE
    SYNTAX INTEGER (1..8)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates which port the receive clock may be selected as
	the system reference clock source.  The value range starts at 1 and the
	maximum value is dependent upon the total number of physical ports on
	the specified CBR interface.  Four and eight port CBR intefaces are
	supported.  An error is returned if this object is set outside the
	range of the specified physical card interface.  In addition, an error
	is returned if this slot has been selected as the system reference 
	clock and an attempt is made to change to a port not in-service.
	The default value is port 1 (1)."
    DEFVAL { 1 }
    ::= {cbrDS1E1CardConfEntry 1}

-- CBR Port Configuration Group (cbrDS1E1PortConfig)

cbrDS1E1PortConfTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CbrDS1E1PortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
	"This object contains the CBR specific port Configuration table.
	There is one cbrDS1E1PortConfEntry associated for each provisioned
	CBR port interface within the shelf.  This table uses portSlot and
	portNumber as an index which is defined in the portBaseTable of the
	C-PRODUCT BASE MIB. This index value uniquely identifies the CBR port
	interface to which this entry is applicable."
    ::= {cbrDS1E1PortConfig 1}

cbrDS1E1PortConfEntry OBJECT-TYPE
    SYNTAX CbrDS1E1PortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
	    "An entry in the CBR specific port Configuration table."
    INDEX { portSlot, portNumber }
    ::= { cbrDS1E1PortConfTable 1 }

CbrDS1E1PortEntry ::=
    SEQUENCE {
	cbrDS1E1PortConfLBO
	    INTEGER,
	cbrDS1E1PortConfLineCode
	    INTEGER,
	cbrDS1E1PortConfPortMode
	    INTEGER, 
	cbrDS1E1PortConfFraming
	    INTEGER,
	cbrDS1E1PortConfTiming
	    INTEGER,
	cbrDS1E1PortConfSignaling
	    INTEGER,
	cbrDS1E1PortConfCRC-4
	    INTEGER,
	cbrDS1E1PortConfDS0Channels
	    INTEGER,
	cbrDS1E1PortConfLoopBackType
	    INTEGER
    }

cbrDS1E1PortConfLBO OBJECT-TYPE
    SYNTAX INTEGER {
	       dsx-0-110ft(1),
	       dsx-110-220ft(2),
	       dsx-220-330ft(3),
	       dsx-330-440ft(4),
	       dsx-440-550ft(5),
	       dsx-550-600ft(6),
	       dsx-GT-600ft(7)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object is applicable to a T1-DSX CBR interface ONLY and 
	indicates the associated Line Build Out configuration for the
	designated port.  An error is returned if an access is attempted on
	a physical interface other than a T1-DSX port interface.  The default
	value is 330 to 440 feet (4)."
    DEFVAL { dsx-330-440ft }
    ::= {cbrDS1E1PortConfEntry 1}

cbrDS1E1PortConfLineCode OBJECT-TYPE
    SYNTAX INTEGER {
	       ami(1),
	       t1-B8ZS(2),
	       e1-HDB3(3)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the zero code suppression technique
	configured to the specified T1/E1 port interface.  The bipolar
	with 8 zero substitution (B8ZS) technique is applicable to T1
	interfaces ONLY.  The High Density Binary Three (HDB3) is
	applicable to E1 interfaces ONLY." 
    ::= {cbrDS1E1PortConfEntry 2}

cbrDS1E1PortConfPortMode OBJECT-TYPE
    SYNTAX INTEGER {
	       unstructured(1),
	       struct-voice(2),
	       struct-data(3)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the type of service configured to the
	specified T1/E1 port interface.  Unstructured allows the 
	application to utilize the entire available bandwidth at a
	bit rate of 1.544 Mb/s for T1 or 2.048 Mb/s for E1.  T1/E1 Framing
	is optional in this service mode.  Structured service provides Nx64
	kbit/s capability where N ranges between 1 and the maximum number of
	available DS0 channels.  Struct-Voice passes traffic with signaling
	informaion enabled.  Struct-Data passes traffic with signaling
	information disabled.  Changing the mode configuration will cause
	the following parameters to be changed.               

        .                      framing  timing signaling crc-4
        .                      -------  ------ --------- -----
	.      T1 unstructured unframed N/A    N/A       N/A
        .         struct data  ESF      loop*  N/A       N/A
        .         struct voice ESF      loop*  N/A       N/A 
        .      E1 unstructured unframed N/A    disable   disable
        .         struct data  single   loop*  disable   disable
        .         struct voice multi    loop*  enable    enable

	* timing is converted to loop timing only if timing is previously
	. configured to be in SRTS or adaptive timing modes

	NOTE:  Changing this object to a different mode will cause all
	previously associated VCC's to be deleted.  The default value for
	this object is unstructured (1)."
    DEFVAL { unstructured }
    ::= { cbrDS1E1PortConfEntry 3 }

cbrDS1E1PortConfFraming OBJECT-TYPE
    SYNTAX INTEGER {
	       unframed(1),
	       t1-D4(2),
	       t1-ESF(3),
	       e1-single-frame(4),
	       e1-multi-frame(5)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the type of frame organization configured for
	the specified T1/E1 port interface.  D4 and ESF frame organizations
	apply to T1 interfaces ONLY. Single-frame and multi-frame organizations
	pertain to E1 interfaces ONLY.  An error is returned if a set is
	applied to an inappropriate cardtype (eg. T1-D4 is applied to an E1
	cardtype).  Unframed is not a valid configuration in a structured mode.
	The E1 interface will not allow framing to be changed in structured
	voice mode.  Changing the framing configuration for an E1 interface
	will cause the following parameters to be changed in unstructured
	and structured data modes.

        .                             signaling crc-4
        .                             --------- -----
        .             E1 unframed     disable   disable
        .                single-frame disable*  disable
        .                multi-frame  enable*   enable

	* signaling is automatically changed in unstructured mode only

	The default value is unframed (1)."
    DEFVAL { unframed }
    ::= { cbrDS1E1PortConfEntry 4 }

cbrDS1E1PortConfTiming OBJECT-TYPE
    SYNTAX INTEGER {
	       system(1),
	       loop(2),
	       srts(3),
	       adaptive(4)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the type of input clock service configured for
	the specified T1/E1 port interface. Synchronous Residual Time Stamp
	(SRTS) and Adaptive timing modes are ONLY available in unstructured
	mode.  System configures the port interface to use the system reference
	clock within the shelf as a reference for transmitting.  Loop uses
	the input port Rx clock as the timing source.  An error is returned if
	an access is attempted to set this object in an inappropriate port
	mode (eg. SRTS is applied in structured voice mode).  The default value
	is adaptive (4)."
    DEFVAL { adaptive }
    ::= { cbrDS1E1PortConfEntry 5 }

cbrDS1E1PortConfSignaling OBJECT-TYPE
    SYNTAX INTEGER {
	       no-signaling(1),
	       e1-CAS(2)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object is applicable to E1 interfaces ONLY and indicates if
	signaling information is enabled or disabled.  Signaling information
        is always disabled in E1 single-frame or unframed mode.  Signaling
	information is always enabled in structured voice multi-frame mode.
	An error is returned if a set is applied to an inappropriate cardtype
	(eg. E1-CAS is applied to a T1 cardtype).  In addition, the crc-4
	configuration object is automatically disabled if the E1 interface is
	in unstructured multi-frame mode and signaling is disabled. 
	
	NOTE:  This object can ONLY be changed in E1 unstructured multi-frame
	mode.  The default value is no-signaling (1)."
    DEFVAL { no-signaling }
    ::= { cbrDS1E1PortConfEntry 6 }

cbrDS1E1PortConfCRC-4 OBJECT-TYPE
    SYNTAX INTEGER {
	       disabled(1),
	       enabled(2)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object is applicable to E1 interfaces ONLY and indicates if
	CRC-4 information is enabled or disabled.  CRC-4 information is
        always disabled in E1 single-frame or unframed mode.  CRC-4 
        information is always enabled in multi-frame mode with signaling
        disabled.  NOTE: This object can ONLY be modified in E1 CAS multi-frame
        mode.  The default value is disabled (1)."
    DEFVAL { disabled }
    ::= { cbrDS1E1PortConfEntry 7 }

cbrDS1E1PortConfDS0Channels OBJECT-TYPE
    SYNTAX INTEGER 
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the associated DS0's which have been assigned
         to the specified physical port interface.  All available DS0 channels
         are automatically allocated in unstructured mode. In structured mode,
         the DS0 channels are bit-coded with each bit representing one DS0
         channel.  The following are some examples:
 
            Value                       Representation
         0x00000002     DS0-1 has been allocated to this port
         0x000007f0     DS0-4 to DS0-10 have been allocated to this port
         0x00027004     DS0-2, DS0-12 to DS0-14, DS0-17 have been allocated
	 
	 In E1 structured voice mode, the bit fields correspond to telephone 
	 channels and are automatically mapped to it's associated DS0
	 channel. Valid telephone channels range from 1 to 30.
	 "
    ::= { cbrDS1E1PortConfEntry 8 }

cbrDS1E1PortConfLoopBackType OBJECT-TYPE
    SYNTAX INTEGER {
	       no-loopback(1),
	       network-line(2),
	       local-card(3),
	       network-card(4),
	       no-response(5)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the type of loopback configured for the
	specified T1/E1 port interface. Network-line (2) redirects incoming
	remote traffic back into the network interface at the external edge of
	the card interface. Network-card (4) regenerates framing information
	prior to redirecting incoming remote traffic back into the network
	interface.  Local-card (3) redirects local incoming traffic back into
	the local system.  The default value is no-loopback (1)."
    DEFVAL { no-loopback }
    ::= { cbrDS1E1PortConfEntry 9 }

-- This definition is good only for Lodi 1.4 & 1.5, Use new implementation
-- If you had to modify anything for Baja & Lodi 2.0
-- CBR VC Configuration Group (cbrDS1E1VcConfig)

-- CBR ATM Statistics Group (cbrDS1E1ATMStats)

-- For Baja & Lodi 2.0 onwards
-- CBR New VC Configuration Group (cbrDS1E1NewVcConfig)

cbrDS1E1NewVcConfTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CbrDS1E1NewVcEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
	"This object contains the CBR specific VC Configuration table.
	There is one cbrDS1E1VcConfEntry associated for each CBR VC connection
	provisioned within the shelf.  This table uses vcPortSlot, vcPortPort,
        vcPortTransmitVpi, vcPortTransmitVci, vcPortReceiveVpi, and 
	vcPortReceiveVci as an index which is defined in the vcBaseTable of
	the C-PRODUCT BASE MIB. This index value uniquely identifies the CBR
	VC connection to which this entry is applicable.

        NOTE:  The associated Circuit Emulation Service (CES) MIB defined by
        the ATM forum restricts the VC index to a single 32-bit scalar value.
        In support of this MIB, the CES MIB index retains the same indexing
        information as the enterprise MIB (with the exception of using 
	vcPortReceiveVpi and vcPortReceiveVci) but has been bit-mapped using
	the following construction:

           vcPortPort		bit  0..3
           vcPortSlot   	bit  4..8
           vcPortTransmitVci    bit  9..23
           vcPortTransmitVpi    bit 24..31"

    ::= { cbrDS1E1NewVcConfig 1 }

cbrDS1E1NewVcConfEntry OBJECT-TYPE
    SYNTAX CbrDS1E1NewVcEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
	    "An entry in the CBR specific VC Configuration table."
    INDEX { vcpSideId }
    ::= { cbrDS1E1NewVcConfTable 1 }

CbrDS1E1NewVcEntry ::=
    SEQUENCE {
	cbrDS1E1NewVcConfCDVT
	    INTEGER,
	cbrDS1E1NewVcConfIntegPeriod
	    INTEGER,
	cbrDS1E1NewVcConfPayloadSize
	    INTEGER,
	cbrDS1E1NewVcConfPayloadType
	    INTEGER, 
	cbrDS1E1NewVcConfOnHookDetection 
	    INTEGER,
	cbrDS1E1NewVcConfSignalingType 
	    INTEGER,
	cbrDS1E1NewVcConfDS0Channels
	    INTEGER 
    }

cbrDS1E1NewVcConfCDVT OBJECT-TYPE
    SYNTAX INTEGER (1..31) -- UNITS msecs
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the Cell Delay Variation Tolerance (CDVT)
         in msecs configured for the specified T1/E1 ATM VC connection.  The
	 CDVT value specifies the amount of cell delay uncertainty which may
	 be experienced by any particular cell.  The maximum CDVT value for a
	 T1 interface is 24.  The maximum CDVT value for an E1 interface is
	 31.  The default value is 1 msec (1)."
    DEFVAL { 1 }
    ::= { cbrDS1E1NewVcConfEntry 1 }

cbrDS1E1NewVcConfIntegPeriod OBJECT-TYPE
    SYNTAX INTEGER (2000..65535) -- UNITS msecs
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the Cell Loss Integration Period in msecs
         configured for the specified ATM VC connection.  If cell(s) are lost
         within this period, the ATM Cell Loss Status (ACLS) is set to loss.
         ACLS is accessible via the Circuit Emulation Service (CES) MIB defined
         by the ATM forum and/or the VT100 ATM statistics screen.  The default
         value is 2500 msecs (2500)."
    DEFVAL { 2500 }
    ::= { cbrDS1E1NewVcConfEntry 2 }

cbrDS1E1NewVcConfPayloadSize OBJECT-TYPE
    SYNTAX INTEGER (1..47) -- UNITS bytes
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the actual number of payload octets used per
         ATM cell size configured for the specified T1/E1 ATM VC connection.
         The default value is 47 bytes (47)."
    DEFVAL { 47 }
    ::= { cbrDS1E1NewVcConfEntry 3 }

cbrDS1E1NewVcConfPayloadType OBJECT-TYPE
    SYNTAX INTEGER {
	       none(1),
	       voice(2),
	       data(3)
	   }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates which payload type has been configured for the 
	 specified T1/E1 ATM VC connection.  It is reflective upon the T1/E1
	 port mode configuration (ie. none -> unstructured, voice -> structured
	 voice, data -> structured data).  The default is none (1)."
    DEFVAL { none }
    ::= { cbrDS1E1NewVcConfEntry 4 }

cbrDS1E1NewVcConfOnHookDetection OBJECT-TYPE
    SYNTAX INTEGER {
	       disabled(1),
	       enabled(2) 
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object dynamically reallocates bandwidth based upon the detection
         of an on-hook condition as specified by the signaling type.  This 
         object is applicable in structured voice mode ONLY.  The default
         value is disabled (1)."
    DEFVAL { disabled }
    ::= {cbrDS1E1NewVcConfEntry 5}

cbrDS1E1NewVcConfSignalingType OBJECT-TYPE
    SYNTAX INTEGER {
               no-signaling(1),
	       em-plar(2),
	       fxo-loop-start(3),
	       fxs-loop-start(4),
	       fxo-ground-start(5),
	       fxs-ground-start(6),
               e1-r2(7)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the associated signaling application type. This
         object defaults to no_signaling in unstructured/structured data modes
         and cannot be modified in these modes. This object can only be set in 
         structured voice mode.  All signaling application type values are
         applicable in this mode except for no-signaling.  An error will result
         if an attempt is made to set no_signaling in structured voice mode.
	 In addition, an error will result if an attempt is made to set e1-r2
	 to a T1 interface.  The default value is no-signaling(1)."
    DEFVAL { no-signaling }
    ::= { cbrDS1E1NewVcConfEntry 6 }

cbrDS1E1NewVcConfDS0Channels OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the associated DS0's which have been assigned
         to the specified ATM VC connection.  All available DS0 channels are
         automatically allocated in unstructured mode. In structured mode, the
         DS0 channels are bit-coded with each bit representing one DS0 channel.
         The following are some examples:

            Value                       Representation
         0x00000002     DS0-1 has been allocated to this VC
         0x000007f0     DS0-4 to DS0-10 have been allocated to this VC
         0x00027004     DS0-2, DS0-12 to DS0-14, DS0-17 have been allocated

         DS0 channels can only be assigned in structured mode.  Channel
         conflicts within a T1/E1 port interface will result in an error.
		For CBR V35 Port the valid values are as follows:
	 Channel Selection 	Value		Data Rate
	 -----------------	------------    -----------
	 1			2		64k
	 1-2			6		128k	
	 1-3			14		192k		
	 1-4			30		256k		
	 1-6			126		384k		
	 1-8			510		512k		
	 1-12			8190		768k		
	 1-16			131070		1024k		
	 1-24			33554430	1536k			
	 "
    ::= { cbrDS1E1NewVcConfEntry 7 }

cbrDS1E1NewATMStatsTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CbrDS1E1NewATMStatsEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
        "This object contains the CBR specific VC Statistics table.
        There is one cbrDS1E1ATMStatsEntry associated for each CBR VC connection
        provisioned within the shelf.  This table uses vcPortSlot, vcPortPort,
        vcPortTransmitVpi, and vcPortTransmitVci as an index which is defined
        in the vcBaseTable of the C-PRODUCT BASE MIB. This index value uniquely 
        identifies the CBR VC connection to which this entry is applicable.
        Additional VC statistics information is available in the associated
        Circuit Emulation Service (CES) MIB defined by the ATM forum.

        NOTE:  The associated Circuit Emulation Service (CES) MIB defined by
        the ATM forum restricts the VC index to a single 32-bit scalar value.
        In support of this MIB, the CES MIB index retains the same indexing
        information as the enterprise MIB but has been bit-mapped using the
        following construction:

           vcPortPort           bit  0..3
           vcPortSlot           bit  4..8
           vcPortTransmitVci    bit  9..23
           vcPortTransmitVpi    bit 24..31"

    ::= { cbrDS1E1NewATMStats 1 }

cbrDS1E1NewATMStatsEntry OBJECT-TYPE
    SYNTAX CbrDS1E1NewATMStatsEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
	    "An entry in the CBR specific VC Statistics table."
    INDEX { vcpSideId }
    ::= { cbrDS1E1NewATMStatsTable 1 }

CbrDS1E1NewATMStatsEntry ::=
    SEQUENCE {
	cbrDS1E1NewATMStatsRxCells
	    Counter,
	cbrDS1E1NewATMStatsTxCells
	    Counter,
	cbrDS1E1NewATMStatsOOSErrors
	    Counter,
	cbrDS1E1NewATMStatsCRCErrors
	    Counter,
	cbrDS1E1NewATMStatsOAMRxCells
	    Counter,
	cbrDS1E1NewATMStatsOAMTxCells
	    Counter,
	cbrDS1E1NewATMStatsClearStats
	    INTEGER,
	cbrDS1E1NewATMStatsResetTimeDate
	    TimeAndDate
    }

cbrDS1E1NewATMStatsRxCells OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the total number of ATM cells received
	 over the T1/E1 ATM VC connection since the last ATM VC clear
	 time and date."
    ::= { cbrDS1E1NewATMStatsEntry 1 }

cbrDS1E1NewATMStatsTxCells OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the total number of ATM cells transmitted
	 over the T1/E1 ATM VC connection since the last ATM VC clear
	 time and date."
    ::= { cbrDS1E1NewATMStatsEntry 2 }

cbrDS1E1NewATMStatsOOSErrors OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the total number of out-of-sequence errors
	 detected over the specified T1/E1 ATM VC connection since the last
	 ATM VC clear time and date."
    ::= { cbrDS1E1NewATMStatsEntry 3 }

cbrDS1E1NewATMStatsCRCErrors OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the total number of CRC errors detected over
	 the specified T1/E1 ATM VC connection since the last ATM VC clear
	 time and date."
    ::= { cbrDS1E1NewATMStatsEntry 4 }

cbrDS1E1NewATMStatsOAMRxCells OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the total number of OAM cells received over
	 the specified T1/E1 ATM VC connection since the last ATM VC clear
	 time and date."
    ::= { cbrDS1E1NewATMStatsEntry 5 }

cbrDS1E1NewATMStatsOAMTxCells OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the total number of OAM cells transmitted over
	 the specified T1/E1 ATM VC connection since the last ATM VC clear
	 time and date."
    ::= { cbrDS1E1NewATMStatsEntry 6 }

cbrDS1E1NewATMStatsClearStats OBJECT-TYPE
    SYNTAX INTEGER {
	       clear (1),
	       not-applicable (2)
	      }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object will (1) clear the ATM statistics counters and (2)
	initialize the reset time and date to the current time and date
	for the specified ATM VC connection.  NOTE:  A value of '2' is
	returned for any attempted reads of this object." 
    ::= { cbrDS1E1NewATMStatsEntry 7 }

cbrDS1E1NewATMStatsResetTimeDate OBJECT-TYPE
    SYNTAX TimeAndDate
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the last time and date the ATM statistics
	were cleared for the specified ATM VC connection."
    ::= { cbrDS1E1NewATMStatsEntry 8 }

END
C-PRODUCT-CBR-V35-MIB DEFINITIONS ::= BEGIN

IMPORTS
   cbr			FROM C-PRODUCT-GROUP-MIB
   portSlot,
   portNumber		FROM C-PRODUCT-BASE-MIB
   OBJECT-TYPE		FROM RFC-1212;

-- Data Types

-- CBR groups

cbrV35PortConfig	OBJECT IDENTIFIER ::= {cbr 5}

-- CBR V.35 Port Configuration Group (cbrV35PortConfig)

cbrV35PortConfTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CbrV35PortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
	"This object contains the CBR's V.35 specific port Configuration table.
	There is one cbrV35PortConfEntry associated for each provisioned
	CBR port interface within the shelf.  This table uses portSlot and
	portNumber as an index which is defined in the portBaseTable of the
	C-PRODUCT BASE MIB. This index value uniquely identifies the CBR port
	interface to which this entry is applicable."
    ::= {cbrV35PortConfig 1}

cbrV35PortConfEntry OBJECT-TYPE
    SYNTAX CbrV35PortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
	    "An entry in the CBR specific port Configuration table."
    INDEX { portSlot, portNumber }
    ::= { cbrV35PortConfTable 1 }

CbrV35PortEntry ::=
    SEQUENCE {
	cbrV35PortConfCableType
	    INTEGER,
	cbrV35PortConfScrClockSource
	    INTEGER,
	cbrV35PortConfTxClockPhase
	    INTEGER, 
	cbrV35PortConfRts
	    INTEGER,
	cbrV35PortConfCts
	    INTEGER,
	cbrV35PortConfDcd
	    INTEGER,
	cbrV35PortConfDsr
	    INTEGER,
	cbrV35PortConfSctClockSource 
	    INTEGER,
	cbrV35PortConfRxTimingSource
	    INTEGER,
	cbrV35PortConfCableID 
	    INTEGER,
	cbrV35PortConfLoopBackType
	    INTEGER
    }

cbrV35PortConfCableType OBJECT-TYPE
    SYNTAX INTEGER {
	       none (1), -- cable not detected
	       dte (2),	 -- dte cable detected
	       dce (3)	 -- dce cable detected
	   }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the type of cable connected to the port.
	An error is returned if an access is attempted on
	a physical interface other than a V.35 port interface.  The default
	value is none (1)."
    DEFVAL { none }
    ::= {cbrV35PortConfEntry 1}

cbrV35PortConfScrClockSource OBJECT-TYPE
    SYNTAX INTEGER {
	       internal (1),
               adaptive (2)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the SCR clock source.  This is
	aplicable for both DCE & DTE cable types.
	If the cable type is 'none', a get request returns
	whatever the value currently stored in the managed node for this
	port and a set request stores the value."
    ::= {cbrV35PortConfEntry 2}

cbrV35PortConfTxClockPhase OBJECT-TYPE
    SYNTAX INTEGER {
	       normal (1),
	       inverted (2)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the type of Transmit clock phase needed to 
	correct the clock out of phase problem.  This is aplicable ONLY when 
	a 'dte' cable is connected to the port.  
	The default value is normal (1)."

    DEFVAL { normal }
    ::= { cbrV35PortConfEntry 3 }

cbrV35PortConfRts OBJECT-TYPE
    SYNTAX INTEGER {
	       off (1),
	       on (2)
	   }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates RTS pin status.   Default value is off (1)."
    DEFVAL { off }
    ::= { cbrV35PortConfEntry 4 }

cbrV35PortConfCts OBJECT-TYPE
    SYNTAX INTEGER {
	       off (1),
	       on (2)
	   }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates CTS pin status.   Default value is off (1)."
    DEFVAL { off }
    ::= { cbrV35PortConfEntry 5 }

cbrV35PortConfDcd OBJECT-TYPE
    SYNTAX INTEGER {
	       off (1),
	       on (2)
	   }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates DCD pin status.   Default value is off (1)."
    DEFVAL { off }
    ::= { cbrV35PortConfEntry 6 }

cbrV35PortConfDsr OBJECT-TYPE
    SYNTAX INTEGER {
	       off (1),
	       on (2)
	   }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates DSR pin status.   Default value is off (1)."
    DEFVAL { off }
    ::= { cbrV35PortConfEntry 7 }

cbrV35PortConfSctClockSource OBJECT-TYPE
    SYNTAX INTEGER {
               recovered(1),
               internal (2)
           }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the type of SCT clock source.  This is
	aplicable for both 'DCE' & 'DTE' cable types.  If no cable
	is attached then it just reflects the value stored in the database.
        The default value is internal (2)."
    DEFVAL { internal }

    ::= { cbrV35PortConfEntry 8 }

cbrV35PortConfRxTimingSource OBJECT-TYPE
    SYNTAX INTEGER {
	       echo-clock-from-dte (1),
	       dce-transmit-clock (2)
	   }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the Serial interface Recieive Timing Source.
	The default value is dce-transmit-clock."
    DEFVAL { dce-transmit-clock }
    ::= { cbrV35PortConfEntry 9 }

cbrV35PortConfCableID OBJECT-TYPE
    SYNTAX INTEGER {
	       none (1),
	       v35 (2),
	       rs422 (3)
	   }
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
	"This object indicates the type of physical interface."
    DEFVAL { v35 }
    ::= { cbrV35PortConfEntry 10 }

cbrV35PortConfLoopBackType OBJECT-TYPE
    SYNTAX INTEGER {
               no-loopback(1),
               local-card(3),
               network-card(4),
               no-response(5)
           }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the type of loopback configured for the
        specified T1/E1 port interface. Network-line (2) redirects incoming
        remote traffic back into the network interface at the external edge of
        the card interface. Network-card (4) regenerates framing information
        prior to redirecting incoming remote traffic back into the network
        interface.  Local-card (3) redirects local incoming traffic back into
        the local system.  The default value is no-loopback (1)."
    DEFVAL { no-loopback }
    ::= { cbrV35PortConfEntry 11 }

END
C-PRODUCT-OC3-MIB DEFINITIONS ::= BEGIN


IMPORTS
    oc3card                           FROM C-PRODUCT-GROUP-MIB
    portSlot, portNumber, TimeAndDate FROM C-PRODUCT-BASE-MIB
    Counter                           FROM RFC1155-SMI
    DisplayString                     FROM RFC1213-MIB
    OBJECT-TYPE                       FROM RFC-1212;

-- OC3 groups

oc3Port           OBJECT IDENTIFIER ::= { oc3card 1 }
oc3PortStats      OBJECT IDENTIFIER ::= { oc3card 2 }
oc3PortResetStats OBJECT IDENTIFIER ::= { oc3card 3 }

-- OC3 Port Group (oc3Port)

oc3PortTable OBJECT-TYPE
    SYNTAX SEQUENCE OF Oc3PortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The OC3 port information table."
    ::= { oc3Port 1 }

oc3PortEntry OBJECT-TYPE
    SYNTAX Oc3PortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information about a OC3 port."
    INDEX { portSlot, portNumber }
    ::= { oc3PortTable 1 }

Oc3PortEntry ::=
    SEQUENCE {
        oc3PortLoopbackType
            INTEGER,
        oc3PortPeakRate
            INTEGER,
        oc3PortScramble
            INTEGER,
        oc3PortTiming
            INTEGER,
        oc3PortSonetMode
            INTEGER,
        oc3PortXmtCktId
            DisplayString,
        oc3PortRcvCktId
            DisplayString
    }

oc3PortLoopbackType OBJECT-TYPE
    SYNTAX INTEGER { none        (1), -- no loopback
                     networkLine (2),
                     localCard   (3)}
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Loopback type of the OC3 port."
    DEFVAL { none }
    ::= { oc3PortEntry 1 }

oc3PortPeakRate OBJECT-TYPE
    SYNTAX INTEGER (1..155)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Peak data transfer rate of the OC3 port.  Unit: Mbps.
	    This field doesn't apply AB9100/AB9300 devices."
    ::= { oc3PortEntry 2 }

oc3PortScramble OBJECT-TYPE
    SYNTAX INTEGER { no(1), 
                     yes(2) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "ATM payload scrambling for the OC3 port."
    DEFVAL { yes }
    ::= { oc3PortEntry 3 }

oc3PortTiming OBJECT-TYPE
    SYNTAX INTEGER { loop(1), 
                     system(2) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "OC3 timing source."
    DEFVAL { system }
    ::= { oc3PortEntry 4 }

oc3PortSonetMode OBJECT-TYPE
    SYNTAX INTEGER { oc3(1), 
                     stm1(2) }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "Sonet mode of operation, either OC3 or STM1"
    DEFVAL { oc3 }
    ::= { oc3PortEntry 5 }

oc3PortXmtCktId OBJECT-TYPE
    SYNTAX DisplayString
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "This is the string to be inserted in the J1 bytes of the sonet stream.
             It is the path trace buffer string being sent to the far end.
	     This field doesn't apply AB9100/AB9300 device. "
    ::= { oc3PortEntry 6 }

oc3PortRcvCktId OBJECT-TYPE
    SYNTAX DisplayString
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "This is the string being received in the J1 bytes of the sonet stream.
             It is the path trace buffer string coming from the far end.
	     This field doesn't apply AB9100/AB9300 device. "
    ::= { oc3PortEntry 7 }


-- OC3 Port Stats Group (oc3PortStats)


oc3PortStatsTable OBJECT-TYPE
    SYNTAX SEQUENCE OF Oc3PortStatsEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "The OC3 port information table."
    ::= { oc3PortStats 1 }

oc3PortStatsEntry OBJECT-TYPE
    SYNTAX Oc3PortStatsEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information about a OC3 port."
    INDEX { portSlot, portNumber }
    ::= { oc3PortStatsTable 1 }

Oc3PortStatsEntry ::=
    SEQUENCE {
        oc3PortRxCells
            Counter,
        oc3PortTxCells
            Counter,
        oc3PortCorrectedHCSErrorCells
            Counter,
        oc3PortUncorrectedHCSErrorCells
            Counter,
        oc3PortResetTimeDate
            TimeAndDate
    }

oc3PortRxCells OBJECT-TYPE
    SYNTAX  Counter
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The counter associated with the received cells, encountered
            on the ATM interface."
    ::= { oc3PortStatsEntry 1 }

oc3PortTxCells OBJECT-TYPE
    SYNTAX  Counter
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The counter associated with the transmitted cells, encountered
            on the ATM interface."
    ::= { oc3PortStatsEntry 2 }

oc3PortCorrectedHCSErrorCells OBJECT-TYPE
    SYNTAX  Counter
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The counter associated with the HCS errored cells whose errors were 
            correctable, encountered on the ATM interface."
    ::= { oc3PortStatsEntry 3 }

oc3PortUncorrectedHCSErrorCells OBJECT-TYPE
    SYNTAX  Counter
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The counter associated with the HCS errored cells whose errors were 
            uncorrectable, encountered on the ATM interface."
    ::= { oc3PortStatsEntry 4 }

oc3PortResetTimeDate OBJECT-TYPE
    SYNTAX  TimeAndDate
    ACCESS  read-only
    STATUS  mandatory
    DESCRIPTION
            "The reset time and date of ATM stats on this ATM interface."
    ::= { oc3PortStatsEntry 5 }


-- OC3 Port Reset Stats Group (oc3PortResetStats)

oc3PortResetAtmStats OBJECT-TYPE
    SYNTAX  INTEGER { reset (1) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This field is used to reset the atm statistics for the oc3 port.
             If a get is performed on this command, the result will always be zero"
    ::= { oc3PortResetStats 1 }


END
C-PRODUCT-ETHER-MIB DEFINITIONS ::= BEGIN


IMPORTS
    enetcard                            FROM C-PRODUCT-GROUP-MIB
    TimeAndDate,
    portSlot,
    portNumber,
    vcpSideId				FROM C-PRODUCT-BASE-MIB
    Counter  		                FROM RFC1155-SMI
    PhysAddress                         FROM RFC1213-MIB
    OBJECT-TYPE                         FROM RFC-1212;


    bridge      OBJECT IDENTIFIER ::= { enetcard    1 }
    phyPort     OBJECT IDENTIFIER ::= { enetcard    2 }
    ipOverAtm   OBJECT IDENTIFIER ::= { enetcard    3 }
    enetCircuit     OBJECT IDENTIFIER ::= { enetcard    4 }


          -- bridge group

          -- This group is used to manage the bridging objects. Some objects
          -- in this group can also be accessed through Standard Bridge MIB.
          -- They will be mentioned in individual object paragraph.


          brAgeTime OBJECT-TYPE
              SYNTAX  INTEGER (1..65535)
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "The time in minute for a bridging entry to be 
                       aged out."
              ::= { bridge 1 }

          -- Bridge Filtering Flags Table

          brFilterFlagTable OBJECT-TYPE
              SYNTAX  SEQUENCE OF BrFilterFlagEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Contain the flags to individually enable/disable 
                       these different types of filtering: Source protocol,
                       Source Address, and Destination Address ."
              ::= { bridge 2 }

          brFilterFlagEntry OBJECT-TYPE
              SYNTAX  BrFilterFlagEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Each entry in the table contains the information of
                       a currently filtering setup for a port."
	      INDEX { portSlot, portNumber }
              ::= { brFilterFlagTable 1 }

          BrFilterFlagEntry ::=
              SEQUENCE {
                  brFilterFlagSrcProt
                      INTEGER,
                  brFilterFlagSrcAddr
                      INTEGER,
                  brFilterFlagDstAddr
                      INTEGER,
                  brFilterFlagIP
                      INTEGER,
                  brFilterFlagIPX
                      INTEGER,
                  brFilterFlagDecnet
                      INTEGER
              }

          brFilterFlagSrcProt OBJECT-TYPE
              SYNTAX  INTEGER { disabled (1),
                                enabled (2) }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "To enable/disable source protocol filtering. "
              ::= { brFilterFlagEntry 1 }

          brFilterFlagSrcAddr OBJECT-TYPE
              SYNTAX  INTEGER { disabled (1),
                                enabled (2) }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "To enable/disable source address filtering. "
              ::= { brFilterFlagEntry 2 }

          brFilterFlagDstAddr OBJECT-TYPE
              SYNTAX  INTEGER { disabled (1),
                                enabled (2) }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "To enable/disable source address filtering. "
              ::= { brFilterFlagEntry 3 }

          brFilterFlagIP OBJECT-TYPE
              SYNTAX  INTEGER { disabled (1),
                                enabled (2) }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "To enable/disable IP protocol filtering. This object
                       is used when source protocol filtering is enabled. "
              ::= { brFilterFlagEntry 4 }

          brFilterFlagIPX OBJECT-TYPE
              SYNTAX  INTEGER { disabled (1),
                                enabled (2) }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "To enable/disable IPX protocol filtering. This object
                       is used when source protocol filtering is enabled. "
              ::= { brFilterFlagEntry 5 }

          brFilterFlagDecnet OBJECT-TYPE
              SYNTAX  INTEGER { disabled (1),
                                enabled (2) }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "To enable/disable DECNET protocol filtering. This object
                       is used when source protocol filtering is enabled. "
              ::= { brFilterFlagEntry 6 }

          -- Bridge Source Address Filtering Table

          brFilterSrcAddrTable OBJECT-TYPE
              SYNTAX  SEQUENCE OF BrFilterSrcAddrEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Contain all source addresses used for source address
                       filtering."
              ::= { bridge 3 }

          brFilterSrcAddrEntry OBJECT-TYPE
              SYNTAX  BrFilterSrcAddrEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Each entry in the table contains a source address
                       used for source address filtering."
              INDEX   { portSlot, portNumber, brFilterSrcAddr }
              ::= { brFilterSrcAddrTable 1 }

          BrFilterSrcAddrEntry ::=
              SEQUENCE {
                  brFilterSrcAddr
                      PhysAddress,
                  brFilterSrcAddrAct
                      INTEGER
              }

          brFilterSrcAddr OBJECT-TYPE
              SYNTAX  PhysAddress
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "If the source address in an MAC frame matches 
                       this value, the frame will be filtered."
              ::= { brFilterSrcAddrEntry 1 }

          brFilterSrcAddrAct OBJECT-TYPE
              SYNTAX  INTEGER { create(1),
                                delete(2),
				not-applicable (3) }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "This object is used for entry creation and deletion."
              ::= { brFilterSrcAddrEntry 2 }

          -- Bridge Destination Address Filtering Table

          brFilterDstAddrTable OBJECT-TYPE
              SYNTAX  SEQUENCE OF BrFilterDstAddrEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Contain all destination addresses used for destination 
                       address filtering."
              ::= { bridge 4 }

          brFilterDstAddrEntry OBJECT-TYPE
              SYNTAX  BrFilterDstAddrEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Each entry in the table contains a destination address
                       used for destination address filtering."
              INDEX   { portSlot, portNumber, brFilterDstAddr }
              ::= { brFilterDstAddrTable 1 }


          BrFilterDstAddrEntry ::=
              SEQUENCE {
                  brFilterDstAddr
                      PhysAddress,
                  brFilterDstAddrAct
                      INTEGER
              }

          brFilterDstAddr OBJECT-TYPE
              SYNTAX  PhysAddress
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "If the destination address in an MAC frame matches 
                       this value, the frame will be filtered."
              ::= { brFilterDstAddrEntry 1 }

          brFilterDstAddrAct OBJECT-TYPE
              SYNTAX  INTEGER { create(1),
                                delete(2),
				not-applicable (3) }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "This object is used for entry creation and deletion."
              ::= { brFilterDstAddrEntry 2 }

          -- Bridge Static Table

          brStaticTable OBJECT-TYPE
              SYNTAX  SEQUENCE OF BrStaticEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Contain all static addresses attached to each 
                       port. The entry is used for forwarding."
              ::= { bridge 5 }

          brStaticEntry OBJECT-TYPE
              SYNTAX  BrStaticEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Each entry in the table contains a station address
                       used for forwarding."
              INDEX   { portSlot, portNumber, brStaticAddr }
              ::= { brStaticTable 1 }

          BrStaticEntry ::=
              SEQUENCE {
                  brStaticAddr
                      PhysAddress,
                  brStaticDstSlot
                      INTEGER,
                  brStaticDstPort
                      INTEGER,
                  brStaticDstTxVpi
                      INTEGER,
                  brStaticDstTxVci
                      INTEGER,
                  brStaticDstRxVpi
                      INTEGER,
                  brStaticDstRxVci
                      INTEGER,
                  brStaticAddrAct
                      INTEGER
              }

          brStaticAddr OBJECT-TYPE
              SYNTAX  PhysAddress
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "If the destination address in an MAC frame matches 
                       this value, the frame will be forwarded to destination
                       specified by destination port or ATM VC."
              ::= { brStaticEntry 1 }

          brStaticDstSlot OBJECT-TYPE
              SYNTAX  INTEGER (1..6)
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "The slot number to which this address is destined.
                       If use VC, this object should be set to 0. "
              ::= { brStaticEntry 2 }

          brStaticDstPort OBJECT-TYPE
              SYNTAX  INTEGER (1..4)
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "The port number to which this address is destined.
                       If use slot/port, this object is ignored. "
              ::= { brStaticEntry 3 }

          brStaticDstTxVpi OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "The Tx VP number to which this address is destined.
                       If use slot/port, this object is ignored. "
              ::= { brStaticEntry 4 }

          brStaticDstTxVci OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "The Tx VC number to which this address is destined.
                       If use slot/port, this object is ignored. "
              ::= { brStaticEntry 5 }

          brStaticDstRxVpi OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "The Rx VP number to which this address is destined.
                       If use slot/port, this object is ignored. "
              ::= { brStaticEntry 6 }

          brStaticDstRxVci OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "The Rx VC number to which this address is destined.
                       If use slot/port, this object is ignored. "
              ::= { brStaticEntry 7 }

          brStaticAddrAct OBJECT-TYPE
              SYNTAX  INTEGER { create(1),
                                delete(2),
				not-applicable (3) }
              ACCESS  read-write
              STATUS  mandatory
              DESCRIPTION
                      "This object is used for entry creation and deletion."
              ::= { brStaticEntry 8 }

     -- Bridge Forwarding Database Table

          brFdbTable OBJECT-TYPE
              SYNTAX  SEQUENCE OF BrFdbEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "A table that contains information about unicast
                      entries for which the bridge has forwarding and/or
                      filtering information.  This information is used
                      by the transparent bridging function in
                      determining how to propagate a received frame."
              ::= { bridge 6 }

          brFdbEntry OBJECT-TYPE
              SYNTAX  BrFdbEntry
              ACCESS  not-accessible
              STATUS  mandatory
              DESCRIPTION
                      "Information about a specific unicast MAC address
                      for which the bridge has some forwarding and/or
                      filtering information."
              INDEX   { portSlot, portNumber, brFdbAddress }
              ::= { brFdbTable 1 }

          BrFdbEntry ::=
              SEQUENCE {
                  brFdbAddress
                      PhysAddress,
                  brFdbDstTxVpi
                      INTEGER,
                  brFdbDstTxVci
                      INTEGER,
                  brFdbDstRxVpi
                      INTEGER,
                  brFdbDstRxVci
                      INTEGER,
                  brFdbStatus
                      INTEGER,
		  brFdbAge
		      INTEGER
              }

          brFdbAddress OBJECT-TYPE
              SYNTAX  PhysAddress
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "A unicast MAC address for which the bridge has
                      forwarding and/or filtering information."
              REFERENCE
                      "IEEE 802.1D-1990: Section 3.9.1, 3.9.2"
              ::= { brFdbEntry 1 }

          brFdbDstTxVpi OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The Tx VP number to which this address is destined."
              ::= { brFdbEntry 2 }

          brFdbDstTxVci OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The Tx VC number to which this address is destined."
              ::= { brFdbEntry 3 }

          brFdbDstRxVpi OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The Rx VP number to which this address is destined."
              ::= { brFdbEntry 4 }

          brFdbDstRxVci OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The Rx VC number to which this address is destined."
              ::= { brFdbEntry 5 }

          brFdbStatus OBJECT-TYPE
              SYNTAX  INTEGER {
                          other(1),
                          invalid(2),
                          learned(3),
                          self(4),
                          mgmt(5)
                      }
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "The status of this entry.  The meanings of the
                      values are:

                        other(1)   : none of the following.  This would
                                     include the case where some other
                                     MIB object (not the corresponding
                                     instance of brFdbPort, nor an
                                     entry in the dot1dStaticTable) is
                                     being used to determine if and how
                                     frames addressed to the value of
                                     the corresponding instance of
                                     brFdbAddress are being
                                     forwarded.

                        invalid(2) : this entry is not longer valid
                                     (e.g., it was learned but has since
                                     aged-out), but has not yet been
                                     flushed from the table.

                        learned(3) : the value of the corresponding
                                     instance of brFdbPort was
                                     learned, and is being used.

                        self(4)    : the value of the corresponding
                                     instance of brFdbAddress
                                     represents one of the bridge's
                                     addresses.  The corresponding
                                     instance of brFdbPort
                                     indicates which of the bridge's
                                     ports has this address.

                        mgmt(5)    : the value of the corresponding
                                     instance of brFdbAddress is
                                     also the value of an existing
                                     instance of dot1dStaticAddress."
              ::= { brFdbEntry 6 }

          brFdbAge OBJECT-TYPE
              SYNTAX  INTEGER 
              ACCESS  read-only
              STATUS  mandatory
              DESCRIPTION
                      "Age of this forwarding table entry."
              ::= { brFdbEntry 7 }
     --                 
     -- The Ports Group
     --
     portTable OBJECT-TYPE
          SYNTAX SEQUENCE OF PortEntry
          ACCESS not-accessible
          STATUS mandatory
          DESCRIPTION
               "The port information table."
          ::= { phyPort 1 }

     portEntry OBJECT-TYPE
          SYNTAX PortEntry
          ACCESS not-accessible
          STATUS mandatory
          DESCRIPTION
               "Information about a port."
          INDEX { portSlot, portNumber }
          ::= { portTable 1 }

     PortEntry ::= SEQUENCE {
             portMaxInfo
                 INTEGER,
             portInFrames
                 Counter,
             portOutFrames
                 Counter,    
	     portFramesForwarded
                Counter,
             portBroadcastFrames
                Counter,
             portNumFramesFlooded
                Counter,
             portNumFramesDiscarded
                 Counter,
             portMaxMTUexceededFrames
                Counter,
             portNoATMvcDiscards
                Counter,
             portBridgeDiscards
                Counter,
             portOutPortDisabledDiscards
                Counter,
             portSrcAddressDiscards
                Counter,
             portDestAddressDiscards
                Counter,
             portSAPfilterDiscards
                Counter,
             portLearnedEntryDiscards
                Counter,
	     portStatsClearStats
	    	INTEGER,
	     portStatsResetTimeDate
	    	TimeAndDate,
             portMacAddress
                PhysAddress,
	     portFramesTransmitted
	    	Counter
     }
     portMaxInfo OBJECT-TYPE
         SYNTAX  INTEGER
         ACCESS  read-only
         STATUS  mandatory
         DESCRIPTION
                 "The maximum size of the INFO (non-MAC) field that
                 this port will receive or transmit."
         ::= { portEntry 1 }

     portInFrames OBJECT-TYPE
         SYNTAX  Counter
         ACCESS  read-only
         STATUS  mandatory
         DESCRIPTION
                 "The number of frames that have been received by
                 this port from its segment. Note that a frame
                 received on the interface corresponding to this
                 port is only counted by this object if and only if
                 it is for a protocol being processed by the local
                 bridging function, including bridge management
                 frames."
         REFERENCE
                 "IEEE 802.1D-1990: Section 6.6.1.1.3"
         ::= { portEntry 2 }

     portOutFrames OBJECT-TYPE
         SYNTAX  Counter
         ACCESS  read-only
         STATUS  mandatory
         DESCRIPTION
                 "The number of frames that have been transmitted
                 by this port to its segment.  Note that a frame
                 transmitted on the interface corresponding to this
                 port is only counted by this object if and only if
                 it is for a protocol being processed by the local
                 bridging function, including bridge management
                 frames."
         REFERENCE
                 "IEEE 802.1D-1990: Section 6.6.1.1.3"
         ::= { portEntry 3 }

	portFramesForwarded OBJECT-TYPE
          SYNTAX Counter
          ACCESS read-only
          STATUS mandatory
          DESCRIPTION
	  	"Number of incoming frames at this port that
		 were forwarded."
          ::= { portEntry 4 }

      portBroadcastFrames OBJECT-TYPE
          SYNTAX Counter
          ACCESS read-only
          STATUS mandatory
          DESCRIPTION
	  	"Number of broadcast frames received on port"
         ::= { portEntry 5 }
 
     portNumFramesFlooded OBJECT-TYPE
          SYNTAX Counter
          ACCESS read-only
          STATUS mandatory
          DESCRIPTION
	  	"Total number of incoming frames on this port
		 that were flooded"
         ::= { portEntry 6 }
     portNumFramesDiscarded OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
                 "Count of valid frames received which were
                 discarded (i.e., filtered) by the Forwarding
                 Process."
         REFERENCE
                 "IEEE 802.1D-1990: Section 6.6.1.1.3"
         ::= { portEntry 7 }

     portMaxMTUexceededFrames OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames discarded because of size
		 greater than maximum MTU size for the port"
         ::= { portEntry 8 }

     portNoATMvcDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames discarded because there was no
		 ATM VC associated with this physical port"
         ::= { portEntry 9 }

     portBridgeDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames discarded because of bridging
		 operation"
         ::= { portEntry 10 }
     portOutPortDisabledDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames filtered because 
		 the output port was disabled"
          ::= { portEntry 11 }
     portSrcAddressDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames filtered because of
		 source address filtering"
          ::= { portEntry 12 }
     portDestAddressDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames filtered because of
		destination address filtering"
         ::= { portEntry 13 }
     portSAPfilterDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames filtered because of protocol
			filtering operation"
         ::= { portEntry 14 }
     portLearnedEntryDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"The number of frames that were discarded
	 	 because there was no storage memory available"
         ::= { portEntry 15 }

     portStatsClearStats OBJECT-TYPE
	 SYNTAX INTEGER {
	    clear (1),
	    not-applicable (2)
	    }
	 ACCESS read-write
	 STATUS mandatory
	 DESCRIPTION
            "This object will (1) clear the ATM statistics counters and (2)
	     initialize the reset time and date to the current time and date
	     for the specified  port.  NOTE:  A value of '2' is
	     returned for any attempted reads of this object." 
	 ::= { portEntry 16 }

     portStatsResetTimeDate OBJECT-TYPE
         SYNTAX TimeAndDate
         ACCESS read-only
         STATUS mandatory
         DESCRIPTION
    	    "This object indicates the last time and date the ATM statistics
	    were cleared for the specified  port."
         ::= {  portEntry 17 }

     portMacAddress OBJECT-TYPE
          SYNTAX PhysAddress
          ACCESS read-only
          STATUS mandatory
          DESCRIPTION
               "This is mac address of ethernet port."
          ::= { portEntry 18 }

     portFramesTransmitted OBJECT-TYPE
          SYNTAX Counter
          ACCESS read-only
          STATUS mandatory
          DESCRIPTION
	  	"Total number of frames transmitted at this port."
          ::= { portEntry 19 }

  
     -- The Virtual Circuits Group

     vcpTable OBJECT-TYPE
          SYNTAX SEQUENCE OF VcpEntry
          ACCESS not-accessible
          STATUS mandatory
          DESCRIPTION
               "The virtual circuit information table."
          ::= { enetCircuit 2 }

     vcpEntry OBJECT-TYPE
          SYNTAX VcpEntry
          ACCESS not-accessible
          STATUS mandatory
          DESCRIPTION
               "Information about a virtual circuits."
    	  INDEX { vcpSideId }
          ::= { vcpTable 1 }

     VcpEntry ::= SEQUENCE {
             vcpMaxInfo
                 INTEGER,
             vcpInFrames
                 Counter,
             vcpOutFrames
                 Counter,    
	     vcpFramesForwarded
                Counter,
             vcpBroadcastFrames
                Counter,
             vcpNumFramesFlooded
                Counter,
             vcpNumFramesDiscarded
                 Counter,
             vcpMaxMTUexceededFrames
                Counter,
             vcpBridgeDiscards
                Counter,
             vcpOutPortDisabledDiscards
                Counter,
             vcpSrcAddressDiscards
                Counter,
             vcpDestAddressDiscards
                Counter,
             vcpSAPfilterDiscards
                Counter,
             vcpLearnedEntryDiscards
                Counter,
	     vcpStatsClearStats
	    	INTEGER,
	     vcpStatsResetTimeDate
	    	TimeAndDate,
             vcpTransmitQueueAveRate
                 INTEGER,
             vcpNumFramesTransmitted
                 Counter
     }
     vcpMaxInfo OBJECT-TYPE
         SYNTAX  INTEGER
         ACCESS  read-only
         STATUS  mandatory
         DESCRIPTION
                 "The maximum size of the INFO (non-MAC) field that
                 this vcp will receive or transmit."
         ::= { vcpEntry 1 }

     vcpInFrames OBJECT-TYPE
         SYNTAX  Counter
         ACCESS  read-only
         STATUS  mandatory
         DESCRIPTION
                 "The number of frames that have been received by
                 this vcp from its segment. Note that a frame
                 received on the interface corresponding to this
                 vcp is only counted by this object if and only if
                 it is for a protocol being processed by the local
                 bridging function, including bridge management
                 frames."
         REFERENCE
                 "IEEE 802.1D-1990: Section 6.6.1.1.3"
         ::= { vcpEntry 2 }

     vcpOutFrames OBJECT-TYPE
         SYNTAX  Counter
         ACCESS  read-only
         STATUS  mandatory
         DESCRIPTION
                 "The number of frames that have been transmitted
                 by this vcp to its segment.  Note that a frame
                 transmitted on the interface corresponding to this
                 vcp is only counted by this object if and only if
                 it is for a protocol being processed by the local
                 bridging function, including bridge management
                 frames."
         REFERENCE
                 "IEEE 802.1D-1990: Section 6.6.1.1.3"
         ::= { vcpEntry 3 }

	vcpFramesForwarded OBJECT-TYPE
          SYNTAX Counter
          ACCESS read-only
          STATUS mandatory
          DESCRIPTION
	  	"Number of incoming frames at this vcp that
		 were forwarded."
          ::= { vcpEntry 4 }

      vcpBroadcastFrames OBJECT-TYPE
          SYNTAX Counter
          ACCESS read-only
          STATUS mandatory
          DESCRIPTION
	  	"Number of broadcast frames received on vcp"
         ::= { vcpEntry 5 }
 
     vcpNumFramesFlooded OBJECT-TYPE
          SYNTAX Counter
          ACCESS read-only
          STATUS mandatory
          DESCRIPTION
	  	"Total number of incoming frames on this vcp
		 that were flooded"
         ::= { vcpEntry 6 }
     vcpNumFramesDiscarded OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
                 "Count of valid frames received which were
                 discarded (i.e., filtered) by the Forwarding
                 Process."
         REFERENCE
                 "IEEE 802.1D-1990: Section 6.6.1.1.3"
         ::= { vcpEntry 7 }

     vcpMaxMTUexceededFrames OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames discarded because of size
		 greater than maximum MTU size for the vcp"
         ::= { vcpEntry 8 }

     vcpBridgeDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames discarded because of bridging
		 operation"
         ::= { vcpEntry 9 }
     vcpOutPortDisabledDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames filtered because 
		 the output port was disabled"
          ::= { vcpEntry 10 }
     vcpSrcAddressDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames filtered because of
		 source address filtering"
          ::= { vcpEntry 11 }
     vcpDestAddressDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames filtered because of
		destination address filtering"
         ::= { vcpEntry 12 }
     vcpSAPfilterDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"Number of frames filtered because of protocol
			filtering operation"
         ::= { vcpEntry 13 }
     vcpLearnedEntryDiscards OBJECT-TYPE
         SYNTAX   Counter
         ACCESS   read-only
         STATUS   mandatory
         DESCRIPTION
	 	"The number of frames that were discarded
	 	 because there was no storage memory available"
         ::= { vcpEntry 14 }

	 vcpStatsClearStats OBJECT-TYPE
	    SYNTAX INTEGER {
		       clear (1),
		       not-applicable (2)
		      }
	    ACCESS read-write
	    STATUS mandatory
	    DESCRIPTION
		"This object will (1) clear the ATM statistics counters and (2)
		initialize the reset time and date to the current time and date
		for the specified ATM VC connection.  NOTE:  A value of '2' is
		returned for any attempted reads of this object." 
	    ::= { vcpEntry 15 }

	 vcpStatsResetTimeDate OBJECT-TYPE
	    SYNTAX TimeAndDate
	    ACCESS read-only
	    STATUS mandatory
	    DESCRIPTION
		"This object indicates the last time and date the ATM statistics
		were cleared for the specified ATM VC connection."
	    ::= {  vcpEntry 16 }
	 
     vcpTransmitQueueAveRate OBJECT-TYPE
          SYNTAX INTEGER {
              na(0),
              r17mbps(1),
              r10mbps(2),
              r8mbps(3),
              r6mbps(4),
              r4mbps(5),
              r192mbps(6),
              r1536mbps(7),
              r1344mbps(8),
              r672kbps(9),
              r448kbps(10),
              r224kbps(11),
              r112kbps(12),
              r56kbps(13)
            }
          ACCESS read-write
          STATUS mandatory
          DESCRIPTION
               "This field specifies the average rate of transmit queue"
          ::= { vcpEntry 17 }

	vcpNumFramesTransmitted OBJECT-TYPE
          SYNTAX Counter
          ACCESS read-only
          STATUS mandatory
          DESCRIPTION
	  	"Total number of frames transmitted at this vcp."
          ::= { vcpEntry 18 }

     END
C-PRODUCT-IMA-MIB DEFINITIONS ::= BEGIN


IMPORTS
    ima                 FROM C-PRODUCT-GROUP-MIB
    portSlot,
    portNumber,
    PortOperStatus      FROM C-PRODUCT-BASE-MIB
    OBJECT-TYPE         FROM RFC-1212;

-- Data Types
AfaStatus    ::= INTEGER { off(1), 
                           on(2) }

AfaActRate   ::= INTEGER { act-rate-10-4(1),
                           act-rate-10-5(2),
                           act-rate-10-6(3),
                           act-rate-10-7(4)}

AfaDeactRate ::= INTEGER { deact-rate-10-6(1),
                           deact-rate-10-7(2),
                           deact-rate-10-8(3),
                           deact-rate-10-9(4)}

InbLoopBackStatus ::= INTEGER { disabled(1), 
                                enabled(2) }

-- IMA groups
imaCard         OBJECT IDENTIFIER ::= { ima   1 }
imaPort         OBJECT IDENTIFIER ::= { ima   2 }
imaCardGroup    OBJECT IDENTIFIER ::= { ima   3 }


imaCardTable OBJECT-TYPE
    SYNTAX SEQUENCE OF ImaCardEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
        "The IMA card information table."
    ::= {imaCard 1}

imaCardEntry OBJECT-TYPE
    SYNTAX ImaCardEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
        "This entry object contains IMA card configuration objects." 
    INDEX { portSlot }
    ::= {imaCardTable 1}

ImaCardEntry ::=
    SEQUENCE {
        imaCardGroupSize
            INTEGER,
        imaCardTrafficType
            INTEGER,
	imaCardRefPort
	    INTEGER,
        imaCardNextAvailableGroup
            INTEGER
    }

imaCardGroupSize OBJECT-TYPE
    SYNTAX INTEGER (1..8)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
	"This object indicates the number of ports in a Group for an 
         IMA Trunk Card. If use CTX+, this GroupSize is irrelevant."
    DEFVAL { 1 }
    ::= {imaCardEntry 1}

imaCardTrafficType OBJECT-TYPE
    SYNTAX INTEGER {
               cbr     (1),
               non-cbr (2)
    } 
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the traffic type selected for the card,
         cbr traffic will get higer priority. This parameter is not   
         for a trunk card."
    DEFVAL { 1 }
    ::= {imaCardEntry 2}

imaCardRefPort OBJECT-TYPE
    SYNTAX INTEGER (1..8)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the clock reference port. It is altered 
         only when the card is set to out-of-service.  If is currently
         used by the shelf as system clock source then it can not
         be changed from here either." 
    DEFVAL { 1 }
    ::= {imaCardEntry 3}

imaCardNextAvailableGroup OBJECT-TYPE
    SYNTAX INTEGER (0..8)
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the next available IMA group number
         within this card, user shall reference this number as part 
         of the indices for adding an group.
         The max number of group is depending on number of port of
         the card, 0 is returned if all groups are used." 
    ::= {imaCardEntry 4}


imaPortTable OBJECT-TYPE
    SYNTAX SEQUENCE OF ImaPortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
        "The IMA port information table."
    ::= { imaPort 1 }

imaPortEntry OBJECT-TYPE
    SYNTAX ImaPortEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
        "This entry object contains IMA port configuration objects.  
         The slot (portSlot) of an card entry can be from 3 to 6
         (trunk or port). The port (portNumber) can be from 1 to 8."
    INDEX { portSlot, portNumber }
    ::= { imaPortTable 1 }

ImaPortEntry ::=
    SEQUENCE {
	imaPortLBO
            INTEGER,
	imaPortLineCode
            INTEGER,
	imaPortFraming
            INTEGER,
	imaPortTiming
            INTEGER,
	imaPortGainLimit
            INTEGER,
        imaPortImaGroupId
            INTEGER,
	imaPortImaTxLid
            INTEGER,
        imaPortImaRxLid
            INTEGER,
        imaPortImaOperLinkDelay
            INTEGER,
        imaPortAfa
            AfaStatus,
        imaPortAfaActMin
            INTEGER,
        imaPortAfaDeactMin
            INTEGER,
        imaPortAfaActRate
            AfaActRate,
        imaPortAfaDeactRate
            AfaDeactRate,
        imaPortInbLoopBack
            InbLoopBackStatus,
        imaPortApplication
            INTEGER
    }

imaPortLBO OBJECT-TYPE
    SYNTAX INTEGER {
               lbo-0-0dB  (1),
               lbo-7-5dB  (2),
               lbo-15-0dB (3),
               lbo-22-5dB (4)
           }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the Line Build Out configured 
         for the port."
    ::= {imaPortEntry 1}

imaPortLineCode OBJECT-TYPE
    SYNTAX INTEGER {
               ami     (1),
               t1-B8ZS (2),
               e1-HDB3 (3)
           }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the line coding configured 
         for the port."
    ::= {imaPortEntry 2}

imaPortFraming OBJECT-TYPE
    SYNTAX INTEGER {
               t1-D4  (1),
               t1-ESF (2),
               e1-Multi-Frame (3)
           }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the framing format configured 
         for the port." 
    ::= {imaPortEntry 3}

imaPortTiming OBJECT-TYPE
    SYNTAX INTEGER {
               system (1),
               loop   (2)
           }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the input clock service type 
         configured for the port." 
    ::= { imaPortEntry 4 }

imaPortGainLimit OBJECT-TYPE
    SYNTAX INTEGER {
               gl-26dB (1),
               gl-36dB (2)
           }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the Line Gain Limit configured 
         for the port."
    ::= { imaPortEntry 5 }

imaPortImaGroupId OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the IMA Group ID configured 
         for the port, it is READ only from this table.
         The port can be selected into an IMA group by setting 
         the imaCardGroupAdminPortsBitMap in imaCardGroupTable." 
    ::= { imaPortEntry 6 }

imaPortImaTxLid OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the IMA Port Tx Link id learned
         from the IMA protocol."
    ::= { imaPortEntry 7 }

imaPortImaRxLid OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the IMA Port Rx Link id learned
         from the IMA protocol."
    ::= { imaPortEntry 8 }

imaPortImaOperLinkDelay OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the IMA Port Operational Link Delay
         of the port." 
    ::= { imaPortEntry 9 }

imaPortAfa OBJECT-TYPE
    SYNTAX AfaStatus
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object specifies the AFA status for the port."
    ::= { imaPortEntry 10 }

imaPortAfaActMin OBJECT-TYPE
    SYNTAX INTEGER ( 1..15 )
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object specifies the AFA kick-in period for the port."
    ::= { imaPortEntry 11 }

imaPortAfaDeactMin OBJECT-TYPE
    SYNTAX INTEGER ( 15..30 )
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object specifies the AFA recover period for the port."
    ::= { imaPortEntry 12 }

imaPortAfaActRate OBJECT-TYPE
    SYNTAX AfaActRate 
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object specifies the AFA kick-in error rate for the port." 
    ::= { imaPortEntry 13 }

imaPortAfaDeactRate OBJECT-TYPE
    SYNTAX AfaDeactRate 
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object specifies the AFA recover error rate for the port." 
    ::= { imaPortEntry 14 }

imaPortInbLoopBack OBJECT-TYPE
    SYNTAX InbLoopBackStatus
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object specifies the Inband Loopback status for the port."
    ::= { imaPortEntry 15 }

imaPortApplication OBJECT-TYPE
    SYNTAX INTEGER {
               dsx (1),
               csu (2)
           }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the type of application
         configured for that port." 
    ::= { imaPortEntry 16 }


imaCardGroupTable OBJECT-TYPE
    SYNTAX SEQUENCE OF ImaCardGroupEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
        "The card based IMA group information table."
    ::= {imaCardGroup 1}

imaCardGroupEntry OBJECT-TYPE
    SYNTAX ImaCardGroupEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
        "This entry object contains IMA group configuration objects." 
    INDEX { portSlot, imaCardGroupId }
    ::= {imaCardGroupTable 1}

ImaCardGroupEntry ::=
    SEQUENCE {
        imaCardGroupId
            INTEGER,
        imaCardGroupImaId
            INTEGER,
        imaCardGroupAdminStatus
            INTEGER,
	imaCardGroupMinNumLinksStart
	    INTEGER,
	imaCardGroupMinNumLinksFailed
	    INTEGER,
	imaCardGroupMaxNumLinksAct
	    INTEGER,
	imaCardGroupTxImaId
	    INTEGER,
	imaCardGroupRxImaId
	    INTEGER,
	imaCardGroupTxFrameLength
	    INTEGER,
	imaCardGroupAdminLinkDelayMax
	    INTEGER,
	imaCardGroupOperLinkDelayMax
	    INTEGER,
	imaCardGroupAdminPortsBitMap
	    INTEGER,
	imaCardGroupOperPortsBitMap
	    INTEGER,
        imaCardGroupOperStatus
            PortOperStatus,
        imaCardGroupRowStatus
            INTEGER
    }

imaCardGroupId OBJECT-TYPE
    SYNTAX INTEGER (1..8)
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
        "This object is used as an index to an imaCardGroupEntry."
    ::= {imaCardGroupEntry 1}

imaCardGroupImaId OBJECT-TYPE
    SYNTAX INTEGER (0..255)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object is the admin IMA id of the group." 
    ::= { imaCardGroupEntry 2 }

imaCardGroupAdminStatus OBJECT-TYPE
    SYNTAX INTEGER { 
        out-of-service(1),
        in-service(2)
        }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the admin service status of the group." 
    ::= { imaCardGroupEntry 3 }

imaCardGroupMinNumLinksStart OBJECT-TYPE
    SYNTAX INTEGER (1..8)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the minimum number of links to start 
         the group."
    ::= { imaCardGroupEntry 4 }

imaCardGroupMinNumLinksFailed OBJECT-TYPE
    SYNTAX INTEGER (1..8)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the minimum number of links for the 
         group to stay up, links lower than this number will declare
         the group to fail."
    ::= { imaCardGroupEntry 5 }

imaCardGroupMaxNumLinksAct OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the maximum number of links for the group,
         for a trunk IMA card, the value is the imaCardGroupSize, for
         a port card, it is derived from the imaCardGroupAdminPortsBitMap."
    ::= { imaCardGroupEntry 6 }

imaCardGroupTxImaId OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the transmit IMA ID.  This shall show
         the ID assigned to imaCardGroupImaId." 
    ::= { imaCardGroupEntry 7 }

imaCardGroupRxImaId OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the receive IMA ID." 
    ::= { imaCardGroupEntry 8 }

imaCardGroupTxFrameLength OBJECT-TYPE
    SYNTAX INTEGER {
              cells-32 (1),
              cells-64 (2),
              cells-128 (3),
              cells-256 (4)
           }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the transmit frame length of the group." 
    ::= { imaCardGroupEntry 9 }

imaCardGroupAdminLinkDelayMax OBJECT-TYPE
    SYNTAX INTEGER (0..100)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object is the group admin maximum link differential delay 
         in msec." 
    ::= { imaCardGroupEntry 10 }

imaCardGroupOperLinkDelayMax OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object is the operational maximum link differential delay 
         in msec." 
    ::= { imaCardGroupEntry 11 }

imaCardGroupAdminPortsBitMap OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This bit map object indicates the ports configured for the 
         group." 
    ::= { imaCardGroupEntry 12 }

imaCardGroupOperPortsBitMap OBJECT-TYPE
    SYNTAX INTEGER
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This bit map object indicates the operational ports in the
         group." 
    ::= { imaCardGroupEntry 13 }

imaCardGroupOperStatus OBJECT-TYPE
    SYNTAX PortOperStatus 
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
        "This object indicates the group operational service status." 
    ::= { imaCardGroupEntry 14 }

imaCardGroupRowStatus OBJECT-TYPE
    SYNTAX INTEGER { create (1),
                     delete (2)}
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
        "This object indicates the row set action request."
    ::= { imaCardGroupEntry 15 }

END
C-PRODUCT-CTX-MIB DEFINITIONS ::= BEGIN

-- Abstract
--
--    This memo defines a portion of the Management Information
--    Base (MIB) for managing objects for AB9300 CTX interface card.  
--

IMPORTS
    ctx                  FROM C-PRODUCT-GROUP-MIB
    TimeAndDate,
    cardSlot,
    vcpSideId            FROM C-PRODUCT-BASE-MIB
    Counter              FROM RFC1155-SMI
    OBJECT-TYPE          FROM RFC-1212;

-- CTX groups

ctxCardConfig     OBJECT IDENTIFIER ::= { ctx 1 }
ctxATMStats       OBJECT IDENTIFIER ::= { ctx 2 }

ctxCardBuffer     OBJECT IDENTIFIER ::= { ctxCardConfig 1 }
ctxCardShapers    OBJECT IDENTIFIER ::= { ctxCardConfig 2 }
ctxCard           OBJECT IDENTIFIER ::= { ctxCardConfig 3 }


-- CTX Card Buffer Group (ctxCardBuffer)

ctxCardBufferTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CtxCardBufferEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "This object contains the CTX Queue Buffer information table.
             There are one ctxCardBufferEntry associated for each CTX Queue.
             Within the shelf, there are 16 queue buffers.  The table uses
             the slot number and queue number as an index associated with
             each queue buffer.
           "
    ::= { ctxCardBuffer 1 }

ctxCardBufferEntry OBJECT-TYPE
    SYNTAX CtxCardBufferEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information about a CTX Buffer information."
    INDEX { cardSlot, ctxCardBufferIndex }
    ::= { ctxCardBufferTable 1 }

CtxCardBufferEntry ::=
    SEQUENCE {
        ctxCardBufferIndex
            INTEGER,
        ctxCardInterface 
            OCTET STRING,
        ctxCardBufferCells
            INTEGER,
        ctxCardCongOn
            INTEGER,
        ctxCardCongOff
            INTEGER
    }


ctxCardBufferIndex OBJECT-TYPE
    SYNTAX  INTEGER (1..16)
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "Queue Index "
    ::= { ctxCardBufferEntry 1 }

ctxCardInterface OBJECT-TYPE
    SYNTAX  OCTET STRING (SIZE(1..80)) 
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "This object describes the Description of the queue. The queue
             Description is combined with slot, Card Interface, high/low 
             priority queue. For example:

                Slot    Interface  Queue
                 3      IMA Grp 1  0 CBR
                 3      IMA Grp 1  1 VBR
                 3      IMA Grp 1  2 UBR1
                         ...
                 (SAR ports)       1 low 
                 8      (none)     0 high
                 8      (none)     1 low
           "
    ::= { ctxCardBufferEntry 2 }

ctxCardBufferCells OBJECT-TYPE
    SYNTAX INTEGER (512..65280)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "This object indicates the buffer cells configured to a 
             specified card interface. The integer value contains
             between 512 and 65280.  The unit of Buffer Cells
             is in number of cells.  
            "
    DEFVAL { 512 }
    ::= { ctxCardBufferEntry 3 }

ctxCardCongOn OBJECT-TYPE
    SYNTAX INTEGER (0..100) 
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "This object indicates the percentage of Congestion ON
             configured to a specified card interface. The integer
             value contains 0-100 percentage. 
            "
    DEFVAL { 0 }
    ::= { ctxCardBufferEntry 4 }

ctxCardCongOff OBJECT-TYPE
    SYNTAX INTEGER (0..100)
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
            "This object indicates the percentage of Congestion OFF
             configured to a specified card interface. The integer
             value contains 0-100 percentage. 
            "
    DEFVAL { 0 }
    ::= { ctxCardBufferEntry 5 }

-- CTX Buffer Sharper Group (ctxCardShapers)


ctxCardShapersTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CtxCardShapersEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "This object contains the CTX Traffic Shaper information 
             table.  There are one ctxCardShapersEntry associated 
             for each Traffic Shaper.  Within the shelf, there are
             total of seven Traffic Shapers.  The table uses the
             slot number and shaper Index as an index associated
             for each Traffic shaper.
           "
    ::= { ctxCardShapers 1 }

ctxCardShapersEntry OBJECT-TYPE
    SYNTAX CtxCardShapersEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information about a CTX Shaper information."
    INDEX { cardSlot, ctxCardShapersIndex }
    ::= { ctxCardShapersTable 1 }

CtxCardShapersEntry ::=
    SEQUENCE {
        ctxCardShapersIndex
            INTEGER,
        ctxCardShapersDesc
            OCTET STRING,
        ctxCardShapersRate
            INTEGER
    }

ctxCardShapersIndex OBJECT-TYPE
    SYNTAX  INTEGER (1..7) 
    ACCESS  not-accessible
    STATUS  mandatory
    DESCRIPTION
            "The Index is associated with Traffic shaper.
            "
    ::= { ctxCardShapersEntry 1 }

ctxCardShapersDesc OBJECT-TYPE
    SYNTAX  OCTET STRING (SIZE(1..80)) 
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
            "This object describes the Description of the Traffic
             shaper.  For example:
                Trunk Bulk
                Trk Grp 1 (VBR HI)
                Trk Grp 1 (VBR LO)
                Trk Grp 1 (UBR)
                SAR Output
                SAR Input
                OC3 Bulk
           "
    ::= { ctxCardShapersEntry 2 }

ctxCardShapersRate OBJECT-TYPE
    SYNTAX  INTEGER (150..390625)
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This object contains the Traffic Shapers Rate.
             The integer value contains between 150 and 390625
             for Trunk Bulk, Trk Grp and OC3 Bulk.  The max
             Shaper rate for SAR Output/Input is 78125.  The
             unit of Shapers Rate is in cells per seconds.
            "
    ::= { ctxCardShapersEntry 3 }

-- CTX Card Group (ctxCard)

ctxCardTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CtxCardEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "This object contains the CTX card information table.
             There are one ctxCardEntry associated for each CTX card.
           "
    ::= { ctxCard 1 }

ctxCardEntry OBJECT-TYPE
    SYNTAX CtxCardEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "Information about a CTX Card information."
    INDEX { cardSlot }
    ::= { ctxCardTable 1 }

CtxCardEntry ::=
    SEQUENCE {
        ctxCardReset
            INTEGER
    }

ctxCardReset OBJECT-TYPE
    SYNTAX  INTEGER { reset(1) }
    ACCESS  read-write
    STATUS  mandatory
    DESCRIPTION
            "This object indicates the action to be changed CTX
             buffer by a reset CTX card. It will cause cell loss
	     on all Virtual Circuits for 10ms. A read request always
             return zero.
            "
    DEFVAL { reset }
    ::= { ctxCardEntry 1 }

-- CTX ATM Statistics Group (ctxATMStats)

ctxATMStatsTable OBJECT-TYPE
    SYNTAX SEQUENCE OF CbrATMStatsEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
            "This object contains the CTX specific VC Statistics table.
             There is one ctxATMStatsEntry associated for each CTX VC 
             connection provisioned within the shelf.  This table uses 
             vcpSideId as an index which is defined in the vcBaseTable
	     of the C-PRODUCT BASE MIB. This index value uniquely 
	     identifies the CTX VC connection to which this entry
	     is applicable.
        "
    ::= { ctxATMStats 1 }

ctxATMStatsEntry OBJECT-TYPE
    SYNTAX CbrATMStatsEntry
    ACCESS not-accessible
    STATUS mandatory
    DESCRIPTION
         "An entry in the CTX specific VC Statistics table."
    INDEX { vcpSideId }
    ::= { ctxATMStatsTable 1 }

CbrATMStatsEntry ::=
    SEQUENCE {
      ctxATMStatsRxCells
          Counter,
      ctxATMStatsTxCells
          Counter,
      ctxATMStatsResetStats
          INTEGER,
      ctxATMStatsResetTimeDate
          TimeAndDate
    }

ctxATMStatsRxCells OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
         "This object indicates the total number of ATM cells received
          over the CTX ATM VC connection since the last ATM VC clear
          time and date."
    ::= { ctxATMStatsEntry 1 }

ctxATMStatsTxCells OBJECT-TYPE
    SYNTAX Counter
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
         "This object indicates the total number of ATM cells transmitted
          over the CTX ATM VC connection since the last ATM VC clear
          time and date."
    ::= { ctxATMStatsEntry 2 }

ctxATMStatsResetStats OBJECT-TYPE
    SYNTAX INTEGER {
           reset (1),
           not-applicable (2)
    }
    ACCESS read-write
    STATUS mandatory
    DESCRIPTION
         "This object will (1) clear the ATM statistics counters and (2)
          initialize the reset time and date to the current time and date
          for the specified ATM VC connection.  NOTE:  A value of '2' is
          returned for any attempted reads of this object." 
    ::= { ctxATMStatsEntry 3 }

ctxATMStatsResetTimeDate OBJECT-TYPE
    SYNTAX TimeAndDate
    ACCESS read-only
    STATUS mandatory
    DESCRIPTION
         "This object indicates the last time and date the ATM statistics
          were cleared for the specified ATM VC connection."
    ::= { ctxATMStatsEntry 4 }
END
